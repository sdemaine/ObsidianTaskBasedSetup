/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit https://github.com/brianpetro/obsidian-smart-templates
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../jsbrains/smart-templates/ejs.min.cjs
var require_ejs_min = __commonJS({
  "../jsbrains/smart-templates/ejs.min.cjs"(exports2, module2) {
    (function(f) {
      if (typeof exports2 === "object" && typeof module2 !== "undefined") {
        module2.exports = f();
      } else if (typeof define === "function" && define.amd) {
        define([], f);
      } else {
        var g;
        if (typeof window !== "undefined") {
          g = window;
        } else if (typeof global !== "undefined") {
          g = global;
        } else if (typeof self !== "undefined") {
          g = self;
        } else {
          g = this;
        }
        g.ejs = f();
      }
    })(function() {
      var define2, module3, exports3;
      return (/* @__PURE__ */ function() {
        function r(e, n, t) {
          function o(i2, f) {
            if (!n[i2]) {
              if (!e[i2]) {
                var c = "function" == typeof require && require;
                if (!f && c) return c(i2, true);
                if (u) return u(i2, true);
                var a = new Error("Cannot find module '" + i2 + "'");
                throw a.code = "MODULE_NOT_FOUND", a;
              }
              var p = n[i2] = { exports: {} };
              e[i2][0].call(p.exports, function(r2) {
                var n2 = e[i2][1][r2];
                return o(n2 || r2);
              }, p, p.exports, r, e, n, t);
            }
            return n[i2].exports;
          }
          for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
          return o;
        }
        return r;
      }())({ 1: [function(require2, module4, exports4) {
        "use strict";
        var fs = require2("fs");
        var path = require2("path");
        var utils = require2("./utils");
        var scopeOptionWarned = false;
        var _VERSION_STRING = require2("../package.json").version;
        var _DEFAULT_OPEN_DELIMITER = "<";
        var _DEFAULT_CLOSE_DELIMITER = ">";
        var _DEFAULT_DELIMITER = "%";
        var _DEFAULT_LOCALS_NAME = "locals";
        var _NAME = "ejs";
        var _REGEX_STRING = "(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)";
        var _OPTS_PASSABLE_WITH_DATA = ["delimiter", "scope", "context", "debug", "compileDebug", "client", "_with", "rmWhitespace", "strict", "filename", "async"];
        var _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat("cache");
        var _BOM = /^\uFEFF/;
        var _JS_IDENTIFIER = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;
        exports4.cache = utils.cache;
        exports4.fileLoader = fs.readFileSync;
        exports4.localsName = _DEFAULT_LOCALS_NAME;
        exports4.promiseImpl = new Function("return this;")().Promise;
        exports4.resolveInclude = function(name, filename, isDir) {
          var dirname = path.dirname;
          var extname = path.extname;
          var resolve = path.resolve;
          var includePath = resolve(isDir ? filename : dirname(filename), name);
          var ext = extname(name);
          if (!ext) {
            includePath += ".ejs";
          }
          return includePath;
        };
        function resolvePaths(name, paths) {
          var filePath;
          if (paths.some(function(v) {
            filePath = exports4.resolveInclude(name, v, true);
            return fs.existsSync(filePath);
          })) {
            return filePath;
          }
        }
        function getIncludePath(path2, options) {
          var includePath;
          var filePath;
          var views = options.views;
          var match = /^[A-Za-z]+:\\|^\//.exec(path2);
          if (match && match.length) {
            path2 = path2.replace(/^\/*/, "");
            if (Array.isArray(options.root)) {
              includePath = resolvePaths(path2, options.root);
            } else {
              includePath = exports4.resolveInclude(path2, options.root || "/", true);
            }
          } else {
            if (options.filename) {
              filePath = exports4.resolveInclude(path2, options.filename);
              if (fs.existsSync(filePath)) {
                includePath = filePath;
              }
            }
            if (!includePath && Array.isArray(views)) {
              includePath = resolvePaths(path2, views);
            }
            if (!includePath && typeof options.includer !== "function") {
              throw new Error('Could not find the include file "' + options.escapeFunction(path2) + '"');
            }
          }
          return includePath;
        }
        function handleCache(options, template) {
          var func;
          var filename = options.filename;
          var hasTemplate = arguments.length > 1;
          if (options.cache) {
            if (!filename) {
              throw new Error("cache option requires a filename");
            }
            func = exports4.cache.get(filename);
            if (func) {
              return func;
            }
            if (!hasTemplate) {
              template = fileLoader(filename).toString().replace(_BOM, "");
            }
          } else if (!hasTemplate) {
            if (!filename) {
              throw new Error("Internal EJS error: no file name or template provided");
            }
            template = fileLoader(filename).toString().replace(_BOM, "");
          }
          func = exports4.compile(template, options);
          if (options.cache) {
            exports4.cache.set(filename, func);
          }
          return func;
        }
        function tryHandleCache(options, data, cb) {
          var result;
          if (!cb) {
            if (typeof exports4.promiseImpl == "function") {
              return new exports4.promiseImpl(function(resolve, reject) {
                try {
                  result = handleCache(options)(data);
                  resolve(result);
                } catch (err) {
                  reject(err);
                }
              });
            } else {
              throw new Error("Please provide a callback function");
            }
          } else {
            try {
              result = handleCache(options)(data);
            } catch (err) {
              return cb(err);
            }
            cb(null, result);
          }
        }
        function fileLoader(filePath) {
          return exports4.fileLoader(filePath);
        }
        function includeFile(path2, options) {
          var opts = utils.shallowCopy(utils.createNullProtoObjWherePossible(), options);
          opts.filename = getIncludePath(path2, opts);
          if (typeof options.includer === "function") {
            var includerResult = options.includer(path2, opts.filename);
            if (includerResult) {
              if (includerResult.filename) {
                opts.filename = includerResult.filename;
              }
              if (includerResult.template) {
                return handleCache(opts, includerResult.template);
              }
            }
          }
          return handleCache(opts);
        }
        function rethrow(err, str, flnm, lineno, esc) {
          var lines = str.split("\n");
          var start = Math.max(lineno - 3, 0);
          var end = Math.min(lines.length, lineno + 3);
          var filename = esc(flnm);
          var context = lines.slice(start, end).map(function(line, i) {
            var curr = i + start + 1;
            return (curr == lineno ? " >> " : "    ") + curr + "| " + line;
          }).join("\n");
          err.path = filename;
          err.message = (filename || "ejs") + ":" + lineno + "\n" + context + "\n\n" + err.message;
          throw err;
        }
        function stripSemi(str) {
          return str.replace(/;(\s*$)/, "$1");
        }
        exports4.compile = function compile(template, opts) {
          var templ;
          if (opts && opts.scope) {
            if (!scopeOptionWarned) {
              console.warn("`scope` option is deprecated and will be removed in EJS 3");
              scopeOptionWarned = true;
            }
            if (!opts.context) {
              opts.context = opts.scope;
            }
            delete opts.scope;
          }
          templ = new Template(template, opts);
          return templ.compile();
        };
        exports4.render = function(template, d, o) {
          var data = d || utils.createNullProtoObjWherePossible();
          var opts = o || utils.createNullProtoObjWherePossible();
          if (arguments.length == 2) {
            utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);
          }
          return handleCache(opts, template)(data);
        };
        exports4.renderFile = function() {
          var args = Array.prototype.slice.call(arguments);
          var filename = args.shift();
          var cb;
          var opts = { filename };
          var data;
          var viewOpts;
          if (typeof arguments[arguments.length - 1] == "function") {
            cb = args.pop();
          }
          if (args.length) {
            data = args.shift();
            if (args.length) {
              utils.shallowCopy(opts, args.pop());
            } else {
              if (data.settings) {
                if (data.settings.views) {
                  opts.views = data.settings.views;
                }
                if (data.settings["view cache"]) {
                  opts.cache = true;
                }
                viewOpts = data.settings["view options"];
                if (viewOpts) {
                  utils.shallowCopy(opts, viewOpts);
                }
              }
              utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS);
            }
            opts.filename = filename;
          } else {
            data = utils.createNullProtoObjWherePossible();
          }
          return tryHandleCache(opts, data, cb);
        };
        exports4.Template = Template;
        exports4.clearCache = function() {
          exports4.cache.reset();
        };
        function Template(text, opts) {
          opts = opts || utils.createNullProtoObjWherePossible();
          var options = utils.createNullProtoObjWherePossible();
          this.templateText = text;
          this.mode = null;
          this.truncate = false;
          this.currentLine = 1;
          this.source = "";
          options.client = opts.client || false;
          options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;
          options.compileDebug = opts.compileDebug !== false;
          options.debug = !!opts.debug;
          options.filename = opts.filename;
          options.openDelimiter = opts.openDelimiter || exports4.openDelimiter || _DEFAULT_OPEN_DELIMITER;
          options.closeDelimiter = opts.closeDelimiter || exports4.closeDelimiter || _DEFAULT_CLOSE_DELIMITER;
          options.delimiter = opts.delimiter || exports4.delimiter || _DEFAULT_DELIMITER;
          options.strict = opts.strict || false;
          options.context = opts.context;
          options.cache = opts.cache || false;
          options.rmWhitespace = opts.rmWhitespace;
          options.root = opts.root;
          options.includer = opts.includer;
          options.outputFunctionName = opts.outputFunctionName;
          options.localsName = opts.localsName || exports4.localsName || _DEFAULT_LOCALS_NAME;
          options.views = opts.views;
          options.async = opts.async;
          options.destructuredLocals = opts.destructuredLocals;
          options.legacyInclude = typeof opts.legacyInclude != "undefined" ? !!opts.legacyInclude : true;
          if (options.strict) {
            options._with = false;
          } else {
            options._with = typeof opts._with != "undefined" ? opts._with : true;
          }
          this.opts = options;
          this.regex = this.createRegex();
        }
        Template.modes = { EVAL: "eval", ESCAPED: "escaped", RAW: "raw", COMMENT: "comment", LITERAL: "literal" };
        Template.prototype = { createRegex: function() {
          var str = _REGEX_STRING;
          var delim = utils.escapeRegExpChars(this.opts.delimiter);
          var open = utils.escapeRegExpChars(this.opts.openDelimiter);
          var close = utils.escapeRegExpChars(this.opts.closeDelimiter);
          str = str.replace(/%/g, delim).replace(/</g, open).replace(/>/g, close);
          return new RegExp(str);
        }, compile: function() {
          var src;
          var fn;
          var opts = this.opts;
          var prepended = "";
          var appended = "";
          var escapeFn = opts.escapeFunction;
          var ctor;
          var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : "undefined";
          if (!this.source) {
            this.generateSource();
            prepended += '  var __output = "";\n  function __append(s) { if (s !== undefined && s !== null) __output += s }\n';
            if (opts.outputFunctionName) {
              if (!_JS_IDENTIFIER.test(opts.outputFunctionName)) {
                throw new Error("outputFunctionName is not a valid JS identifier.");
              }
              prepended += "  var " + opts.outputFunctionName + " = __append;\n";
            }
            if (opts.localsName && !_JS_IDENTIFIER.test(opts.localsName)) {
              throw new Error("localsName is not a valid JS identifier.");
            }
            if (opts.destructuredLocals && opts.destructuredLocals.length) {
              var destructuring = "  var __locals = (" + opts.localsName + " || {}),\n";
              for (var i = 0; i < opts.destructuredLocals.length; i++) {
                var name = opts.destructuredLocals[i];
                if (!_JS_IDENTIFIER.test(name)) {
                  throw new Error("destructuredLocals[" + i + "] is not a valid JS identifier.");
                }
                if (i > 0) {
                  destructuring += ",\n  ";
                }
                destructuring += name + " = __locals." + name;
              }
              prepended += destructuring + ";\n";
            }
            if (opts._with !== false) {
              prepended += "  with (" + opts.localsName + " || {}) {\n";
              appended += "  }\n";
            }
            appended += "  return __output;\n";
            this.source = prepended + this.source + appended;
          }
          if (opts.compileDebug) {
            src = "var __line = 1\n  , __lines = " + JSON.stringify(this.templateText) + "\n  , __filename = " + sanitizedFilename + ";\ntry {\n" + this.source + "} catch (e) {\n  rethrow(e, __lines, __filename, __line, escapeFn);\n}\n";
          } else {
            src = this.source;
          }
          if (opts.client) {
            src = "escapeFn = escapeFn || " + escapeFn.toString() + ";\n" + src;
            if (opts.compileDebug) {
              src = "rethrow = rethrow || " + rethrow.toString() + ";\n" + src;
            }
          }
          if (opts.strict) {
            src = '"use strict";\n' + src;
          }
          if (opts.debug) {
            console.log(src);
          }
          if (opts.compileDebug && opts.filename) {
            src = src + "\n//# sourceURL=" + sanitizedFilename + "\n";
          }
          try {
            if (opts.async) {
              try {
                ctor = new Function("return (async function(){}).constructor;")();
              } catch (e) {
                if (e instanceof SyntaxError) {
                  throw new Error("This environment does not support async/await");
                } else {
                  throw e;
                }
              }
            } else {
              ctor = Function;
            }
            fn = new ctor(opts.localsName + ", escapeFn, include, rethrow", src);
          } catch (e) {
            if (e instanceof SyntaxError) {
              if (opts.filename) {
                e.message += " in " + opts.filename;
              }
              e.message += " while compiling ejs\n\n";
              e.message += "If the above error is not helpful, you may want to try EJS-Lint:\n";
              e.message += "https://github.com/RyanZim/EJS-Lint";
              if (!opts.async) {
                e.message += "\n";
                e.message += "Or, if you meant to create an async function, pass `async: true` as an option.";
              }
            }
            throw e;
          }
          var returnedFn = opts.client ? fn : function anonymous(data) {
            var include = function(path2, includeData) {
              var d = utils.shallowCopy(utils.createNullProtoObjWherePossible(), data);
              if (includeData) {
                d = utils.shallowCopy(d, includeData);
              }
              return includeFile(path2, opts)(d);
            };
            return fn.apply(opts.context, [data || utils.createNullProtoObjWherePossible(), escapeFn, include, rethrow]);
          };
          if (opts.filename && typeof Object.defineProperty === "function") {
            var filename = opts.filename;
            var basename = path.basename(filename, path.extname(filename));
            try {
              Object.defineProperty(returnedFn, "name", { value: basename, writable: false, enumerable: false, configurable: true });
            } catch (e) {
            }
          }
          return returnedFn;
        }, generateSource: function() {
          var opts = this.opts;
          if (opts.rmWhitespace) {
            this.templateText = this.templateText.replace(/[\r\n]+/g, "\n").replace(/^\s+|\s+$/gm, "");
          }
          this.templateText = this.templateText.replace(/[ \t]*<%_/gm, "<%_").replace(/_%>[ \t]*/gm, "_%>");
          var self2 = this;
          var matches = this.parseTemplateText();
          var d = this.opts.delimiter;
          var o = this.opts.openDelimiter;
          var c = this.opts.closeDelimiter;
          if (matches && matches.length) {
            matches.forEach(function(line, index) {
              var closing;
              if (line.indexOf(o + d) === 0 && line.indexOf(o + d + d) !== 0) {
                closing = matches[index + 2];
                if (!(closing == d + c || closing == "-" + d + c || closing == "_" + d + c)) {
                  throw new Error('Could not find matching close tag for "' + line + '".');
                }
              }
              self2.scanLine(line);
            });
          }
        }, parseTemplateText: function() {
          var str = this.templateText;
          var pat = this.regex;
          var result = pat.exec(str);
          var arr = [];
          var firstPos;
          while (result) {
            firstPos = result.index;
            if (firstPos !== 0) {
              arr.push(str.substring(0, firstPos));
              str = str.slice(firstPos);
            }
            arr.push(result[0]);
            str = str.slice(result[0].length);
            result = pat.exec(str);
          }
          if (str) {
            arr.push(str);
          }
          return arr;
        }, _addOutput: function(line) {
          if (this.truncate) {
            line = line.replace(/^(?:\r\n|\r|\n)/, "");
            this.truncate = false;
          }
          if (!line) {
            return line;
          }
          line = line.replace(/\\/g, "\\\\");
          line = line.replace(/\n/g, "\\n");
          line = line.replace(/\r/g, "\\r");
          line = line.replace(/"/g, '\\"');
          this.source += '    ; __append("' + line + '")\n';
        }, scanLine: function(line) {
          var self2 = this;
          var d = this.opts.delimiter;
          var o = this.opts.openDelimiter;
          var c = this.opts.closeDelimiter;
          var newLineCount = 0;
          newLineCount = line.split("\n").length - 1;
          switch (line) {
            case o + d:
            case o + d + "_":
              this.mode = Template.modes.EVAL;
              break;
            case o + d + "=":
              this.mode = Template.modes.ESCAPED;
              break;
            case o + d + "-":
              this.mode = Template.modes.RAW;
              break;
            case o + d + "#":
              this.mode = Template.modes.COMMENT;
              break;
            case o + d + d:
              this.mode = Template.modes.LITERAL;
              this.source += '    ; __append("' + line.replace(o + d + d, o + d) + '")\n';
              break;
            case d + d + c:
              this.mode = Template.modes.LITERAL;
              this.source += '    ; __append("' + line.replace(d + d + c, d + c) + '")\n';
              break;
            case d + c:
            case "-" + d + c:
            case "_" + d + c:
              if (this.mode == Template.modes.LITERAL) {
                this._addOutput(line);
              }
              this.mode = null;
              this.truncate = line.indexOf("-") === 0 || line.indexOf("_") === 0;
              break;
            default:
              if (this.mode) {
                switch (this.mode) {
                  case Template.modes.EVAL:
                  case Template.modes.ESCAPED:
                  case Template.modes.RAW:
                    if (line.lastIndexOf("//") > line.lastIndexOf("\n")) {
                      line += "\n";
                    }
                }
                switch (this.mode) {
                  case Template.modes.EVAL:
                    this.source += "    ; " + line + "\n";
                    break;
                  case Template.modes.ESCAPED:
                    this.source += "    ; __append(escapeFn(" + stripSemi(line) + "))\n";
                    break;
                  case Template.modes.RAW:
                    this.source += "    ; __append(" + stripSemi(line) + ")\n";
                    break;
                  case Template.modes.COMMENT:
                    break;
                  case Template.modes.LITERAL:
                    this._addOutput(line);
                    break;
                }
              } else {
                this._addOutput(line);
              }
          }
          if (self2.opts.compileDebug && newLineCount) {
            this.currentLine += newLineCount;
            this.source += "    ; __line = " + this.currentLine + "\n";
          }
        } };
        exports4.escapeXML = utils.escapeXML;
        exports4.__express = exports4.renderFile;
        exports4.VERSION = _VERSION_STRING;
        exports4.name = _NAME;
        if (typeof window != "undefined") {
          window.ejs = exports4;
        }
      }, { "../package.json": 6, "./utils": 2, fs: 3, path: 4 }], 2: [function(require2, module4, exports4) {
        "use strict";
        var regExpChars = /[|\\{}()[\]^$+*?.]/g;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var hasOwn = function(obj, key) {
          return hasOwnProperty.apply(obj, [key]);
        };
        exports4.escapeRegExpChars = function(string) {
          if (!string) {
            return "";
          }
          return String(string).replace(regExpChars, "\\$&");
        };
        var _ENCODE_HTML_RULES = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&#34;", "'": "&#39;" };
        var _MATCH_HTML = /[&<>'"]/g;
        function encode_char(c) {
          return _ENCODE_HTML_RULES[c] || c;
        }
        var escapeFuncStr = `var _ENCODE_HTML_RULES = {
      "&": "&amp;"
    , "<": "&lt;"
    , ">": "&gt;"
    , '"': "&#34;"
    , "'": "&#39;"
    }
  , _MATCH_HTML = /[&<>'"]/g;
function encode_char(c) {
  return _ENCODE_HTML_RULES[c] || c;
};
`;
        exports4.escapeXML = function(markup) {
          return markup == void 0 ? "" : String(markup).replace(_MATCH_HTML, encode_char);
        };
        function escapeXMLToString() {
          return Function.prototype.toString.call(this) + ";\n" + escapeFuncStr;
        }
        try {
          if (typeof Object.defineProperty === "function") {
            Object.defineProperty(exports4.escapeXML, "toString", { value: escapeXMLToString });
          } else {
            exports4.escapeXML.toString = escapeXMLToString;
          }
        } catch (err) {
          console.warn("Unable to set escapeXML.toString (is the Function prototype frozen?)");
        }
        exports4.shallowCopy = function(to, from) {
          from = from || {};
          if (to !== null && to !== void 0) {
            for (var p in from) {
              if (!hasOwn(from, p)) {
                continue;
              }
              if (p === "__proto__" || p === "constructor") {
                continue;
              }
              to[p] = from[p];
            }
          }
          return to;
        };
        exports4.shallowCopyFromList = function(to, from, list) {
          list = list || [];
          from = from || {};
          if (to !== null && to !== void 0) {
            for (var i = 0; i < list.length; i++) {
              var p = list[i];
              if (typeof from[p] != "undefined") {
                if (!hasOwn(from, p)) {
                  continue;
                }
                if (p === "__proto__" || p === "constructor") {
                  continue;
                }
                to[p] = from[p];
              }
            }
          }
          return to;
        };
        exports4.cache = { _data: {}, set: function(key, val) {
          this._data[key] = val;
        }, get: function(key) {
          return this._data[key];
        }, remove: function(key) {
          delete this._data[key];
        }, reset: function() {
          this._data = {};
        } };
        exports4.hyphenToCamel = function(str) {
          return str.replace(/-[a-z]/g, function(match) {
            return match[1].toUpperCase();
          });
        };
        exports4.createNullProtoObjWherePossible = function() {
          if (typeof Object.create == "function") {
            return function() {
              return /* @__PURE__ */ Object.create(null);
            };
          }
          if (!({ __proto__: null } instanceof Object)) {
            return function() {
              return { __proto__: null };
            };
          }
          return function() {
            return {};
          };
        }();
      }, {}], 3: [function(require2, module4, exports4) {
      }, {}], 4: [function(require2, module4, exports4) {
        (function(process) {
          function normalizeArray(parts, allowAboveRoot) {
            var up = 0;
            for (var i = parts.length - 1; i >= 0; i--) {
              var last = parts[i];
              if (last === ".") {
                parts.splice(i, 1);
              } else if (last === "..") {
                parts.splice(i, 1);
                up++;
              } else if (up) {
                parts.splice(i, 1);
                up--;
              }
            }
            if (allowAboveRoot) {
              for (; up--; up) {
                parts.unshift("..");
              }
            }
            return parts;
          }
          exports4.resolve = function() {
            var resolvedPath = "", resolvedAbsolute = false;
            for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
              var path = i >= 0 ? arguments[i] : process.cwd();
              if (typeof path !== "string") {
                throw new TypeError("Arguments to path.resolve must be strings");
              } else if (!path) {
                continue;
              }
              resolvedPath = path + "/" + resolvedPath;
              resolvedAbsolute = path.charAt(0) === "/";
            }
            resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
              return !!p;
            }), !resolvedAbsolute).join("/");
            return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
          };
          exports4.normalize = function(path) {
            var isAbsolute = exports4.isAbsolute(path), trailingSlash = substr(path, -1) === "/";
            path = normalizeArray(filter(path.split("/"), function(p) {
              return !!p;
            }), !isAbsolute).join("/");
            if (!path && !isAbsolute) {
              path = ".";
            }
            if (path && trailingSlash) {
              path += "/";
            }
            return (isAbsolute ? "/" : "") + path;
          };
          exports4.isAbsolute = function(path) {
            return path.charAt(0) === "/";
          };
          exports4.join = function() {
            var paths = Array.prototype.slice.call(arguments, 0);
            return exports4.normalize(filter(paths, function(p, index) {
              if (typeof p !== "string") {
                throw new TypeError("Arguments to path.join must be strings");
              }
              return p;
            }).join("/"));
          };
          exports4.relative = function(from, to) {
            from = exports4.resolve(from).substr(1);
            to = exports4.resolve(to).substr(1);
            function trim(arr) {
              var start = 0;
              for (; start < arr.length; start++) {
                if (arr[start] !== "") break;
              }
              var end = arr.length - 1;
              for (; end >= 0; end--) {
                if (arr[end] !== "") break;
              }
              if (start > end) return [];
              return arr.slice(start, end - start + 1);
            }
            var fromParts = trim(from.split("/"));
            var toParts = trim(to.split("/"));
            var length = Math.min(fromParts.length, toParts.length);
            var samePartsLength = length;
            for (var i = 0; i < length; i++) {
              if (fromParts[i] !== toParts[i]) {
                samePartsLength = i;
                break;
              }
            }
            var outputParts = [];
            for (var i = samePartsLength; i < fromParts.length; i++) {
              outputParts.push("..");
            }
            outputParts = outputParts.concat(toParts.slice(samePartsLength));
            return outputParts.join("/");
          };
          exports4.sep = "/";
          exports4.delimiter = ":";
          exports4.dirname = function(path) {
            if (typeof path !== "string") path = path + "";
            if (path.length === 0) return ".";
            var code = path.charCodeAt(0);
            var hasRoot = code === 47;
            var end = -1;
            var matchedSlash = true;
            for (var i = path.length - 1; i >= 1; --i) {
              code = path.charCodeAt(i);
              if (code === 47) {
                if (!matchedSlash) {
                  end = i;
                  break;
                }
              } else {
                matchedSlash = false;
              }
            }
            if (end === -1) return hasRoot ? "/" : ".";
            if (hasRoot && end === 1) {
              return "/";
            }
            return path.slice(0, end);
          };
          function basename(path) {
            if (typeof path !== "string") path = path + "";
            var start = 0;
            var end = -1;
            var matchedSlash = true;
            var i;
            for (i = path.length - 1; i >= 0; --i) {
              if (path.charCodeAt(i) === 47) {
                if (!matchedSlash) {
                  start = i + 1;
                  break;
                }
              } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
              }
            }
            if (end === -1) return "";
            return path.slice(start, end);
          }
          exports4.basename = function(path, ext) {
            var f = basename(path);
            if (ext && f.substr(-1 * ext.length) === ext) {
              f = f.substr(0, f.length - ext.length);
            }
            return f;
          };
          exports4.extname = function(path) {
            if (typeof path !== "string") path = path + "";
            var startDot = -1;
            var startPart = 0;
            var end = -1;
            var matchedSlash = true;
            var preDotState = 0;
            for (var i = path.length - 1; i >= 0; --i) {
              var code = path.charCodeAt(i);
              if (code === 47) {
                if (!matchedSlash) {
                  startPart = i + 1;
                  break;
                }
                continue;
              }
              if (end === -1) {
                matchedSlash = false;
                end = i + 1;
              }
              if (code === 46) {
                if (startDot === -1) startDot = i;
                else if (preDotState !== 1) preDotState = 1;
              } else if (startDot !== -1) {
                preDotState = -1;
              }
            }
            if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
              return "";
            }
            return path.slice(startDot, end);
          };
          function filter(xs, f) {
            if (xs.filter) return xs.filter(f);
            var res = [];
            for (var i = 0; i < xs.length; i++) {
              if (f(xs[i], i, xs)) res.push(xs[i]);
            }
            return res;
          }
          var substr = "ab".substr(-1) === "b" ? function(str, start, len) {
            return str.substr(start, len);
          } : function(str, start, len) {
            if (start < 0) start = str.length + start;
            return str.substr(start, len);
          };
        }).call(this, require2("_process"));
      }, { _process: 5 }], 5: [function(require2, module4, exports4) {
        var process = module4.exports = {};
        var cachedSetTimeout;
        var cachedClearTimeout;
        function defaultSetTimout() {
          throw new Error("setTimeout has not been defined");
        }
        function defaultClearTimeout() {
          throw new Error("clearTimeout has not been defined");
        }
        (function() {
          try {
            if (typeof setTimeout === "function") {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === "function") {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();
        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            return setTimeout(fun, 0);
          }
          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e2) {
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }
        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            return clearTimeout(marker);
          }
          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              return cachedClearTimeout.call(null, marker);
            } catch (e2) {
              return cachedClearTimeout.call(this, marker);
            }
          }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;
        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }
          if (queue.length) {
            drainQueue();
          }
        }
        function drainQueue() {
          if (draining) {
            return;
          }
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;
          var len = queue.length;
          while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }
        process.nextTick = function(fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }
          queue.push(new Item(fun, args));
          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function() {
          this.fun.apply(null, this.array);
        };
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = "";
        process.versions = {};
        function noop() {
        }
        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;
        process.listeners = function(name) {
          return [];
        };
        process.binding = function(name) {
          throw new Error("process.binding is not supported");
        };
        process.cwd = function() {
          return "/";
        };
        process.chdir = function(dir) {
          throw new Error("process.chdir is not supported");
        };
        process.umask = function() {
          return 0;
        };
      }, {}], 6: [function(require2, module4, exports4) {
        module4.exports = { name: "ejs", description: "Embedded JavaScript templates", keywords: ["template", "engine", "ejs"], version: "3.1.9", author: "Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)", license: "Apache-2.0", bin: { ejs: "./bin/cli.js" }, main: "./lib/ejs.js", jsdelivr: "ejs.min.js", unpkg: "ejs.min.js", repository: { type: "git", url: "git://github.com/mde/ejs.git" }, bugs: "https://github.com/mde/ejs/issues", homepage: "https://github.com/mde/ejs", dependencies: { jake: "^10.8.5" }, devDependencies: { browserify: "^16.5.1", eslint: "^6.8.0", "git-directory-deploy": "^1.5.1", jsdoc: "^4.0.2", "lru-cache": "^4.0.1", mocha: "^10.2.0", "uglify-js": "^3.3.16" }, engines: { node: ">=0.10.0" }, scripts: { test: "mocha -u tdd" } };
      }, {}] }, {}, [1])(1);
    });
  }
});

// ../jsbrains/smart-chat-model/adapters/anthropic.js
var require_anthropic = __commonJS({
  "../jsbrains/smart-chat-model/adapters/anthropic.js"(exports2) {
    var AnthropicAdapter = class {
      /**
       * Prepares the request body for the Anthropic API by converting ChatML format to a format compatible with Anthropic.
       * @param {Object} opts - The options object containing messages and other parameters in ChatML format.
       * @returns {Object} The request body formatted for the Anthropic API.
       */
      prepare_request_body(opts) {
        return chatml_to_anthropic(opts);
      }
      /**
       * Counts the tokens in the input by estimating them, as the Anthropic model does not provide a direct method.
       * @param {string|Object} input - The input text or object to count tokens in.
       * @returns {Promise<number>} The estimated number of tokens in the input.
       */
      async count_tokens(input) {
        return this.estimate_tokens(input);
      }
      /**
       * Estimates the number of tokens in the input based on a rough average token size.
       * @param {string|Object} input - The input text or object to estimate tokens in.
       * @returns {number} The estimated number of tokens.
       */
      estimate_tokens(input) {
        if (typeof input === "object") input = JSON.stringify(input);
        return Math.ceil(input.length / 6);
      }
      /**
       * Extracts the first tool call from the JSON response content.
       * @param {Object} json - The JSON response from which to extract the tool call.
       * @returns {Object|null} The first tool call found, or null if none exist.
       */
      get_tool_call(json) {
        return json.content.find((msg) => msg.type === "tool_use");
      }
      /**
       * Retrieves the input content of a tool call.
       * @param {Object} tool_call - The tool call object from which to extract the input.
       * @returns {Object} The input of the tool call.
       */
      get_tool_call_content(tool_call) {
        return tool_call.input;
      }
      /**
       * Retrieves the name of the tool from a tool call object.
       * @param {Object} tool_call - The tool call object from which to extract the name.
       * @returns {string} The name of the tool.
       */
      get_tool_name(tool_call) {
        return tool_call.name;
      }
      /**
       * Extracts the first message from the JSON response content.
       * @param {Object} json - The JSON response from which to extract the message.
       * @returns {Object|null} The first message found, or null if none exist.
       */
      get_message(json) {
        return json.content?.[0];
      }
      /**
       * Retrieves the content of the first message from the JSON response.
       * @param {Object} json - The JSON response from which to extract the message content.
       * @returns {string|null} The content of the first message, or null if no message is found.
       */
      get_message_content(json) {
        return this.get_message(json)?.[this.get_message(json)?.type];
      }
    };
    exports2.AnthropicAdapter = AnthropicAdapter;
    function chatml_to_anthropic(opts) {
      let tool_counter = 0;
      const messages = opts.messages.filter((msg) => msg.role !== "system").map((m) => {
        if (m.role === "tool") {
          return { role: "user", content: [
            {
              type: "tool_result",
              tool_use_id: `tool-${tool_counter}`,
              content: m.content
            }
          ] };
        }
        if (m.role === "assistant" && m.tool_calls) {
          tool_counter++;
          const out2 = {
            role: m.role,
            content: m.tool_calls.map((c) => ({
              type: "tool_use",
              id: `tool-${tool_counter}`,
              name: c.function.name,
              input: typeof c.function.arguments === "string" ? JSON.parse(c.function.arguments) : c.function.arguments
            }))
          };
          if (m.content) {
            if (typeof m.content === "string") out2.content.push({ type: "text", text: m.content });
            else m.content.forEach((c) => out2.content.push(c));
          }
          return out2;
        }
        if (typeof m.content === "string") return { role: m.role, content: m.content };
        if (Array.isArray(m.content)) {
          const content = m.content.map((c) => {
            if (c.type === "text") return { type: "text", text: c.text };
            if (c.type === "image_url") {
              const image_url = c.image_url.url;
              let media_type = image_url.split(":")[1].split(";")[0];
              if (media_type === "image/jpg") media_type = "image/jpeg";
              return { type: "image", source: { type: "base64", media_type, data: image_url.split(",")[1] } };
            }
          });
          return { role: m.role, content };
        }
        return m;
      });
      const { model, max_tokens, temperature, tools, tool_choice } = opts;
      const last_system_idx = opts.messages.findLastIndex((msg) => msg.role === "system" && msg.content.includes("---BEGIN"));
      if (last_system_idx > -1) {
        const system_prompt = "<context>\n" + opts.messages[last_system_idx].content + "\n</context>\n";
        messages[messages.length - 1].content = system_prompt + messages[messages.length - 1].content;
      }
      console.log(messages);
      const out = {
        messages,
        model,
        max_tokens,
        temperature
      };
      if (tools) {
        out.tools = tools.map((tool) => ({
          name: tool.function.name,
          description: tool.function.description,
          input_schema: tool.function.parameters
        }));
        if (tool_choice?.type === "function") {
          const tool_prompt = `Use the "${tool_choice.function.name}" tool!`;
          const last_user_idx = out.messages.findLastIndex((msg) => msg.role === "user");
          out.messages[last_user_idx].content += "\n" + tool_prompt;
          out.system = `Required: use the "${tool_choice.function.name}" tool!`;
        }
      }
      const last_non_context_system_idx = opts.messages.findLastIndex((msg) => msg.role === "system" && !msg.content.includes("---BEGIN"));
      if (last_non_context_system_idx > -1) out.system = opts.messages[last_non_context_system_idx].content;
      return out;
    }
    exports2.chatml_to_anthropic = chatml_to_anthropic;
  }
});

// ../jsbrains/smart-chat-model/adapters/cohere.js
var require_cohere = __commonJS({
  "../jsbrains/smart-chat-model/adapters/cohere.js"(exports2) {
    var CohereAdapter = class {
      /**
       * Converts a ChatML object to a format suitable for a request to the Cohere API.
       * @param {Object} chatml - The ChatML object containing the chat history and other parameters.
       * @returns {Object} The request body formatted for the Cohere API.
       */
      prepare_request_body(chatml) {
        return chatml_to_cohere(chatml);
      }
      /**
       * Extracts the message content from a JSON response from the Cohere API.
       * @param {Object} json - The JSON response object from which to extract the text content.
       * @returns {string} The extracted text content from the response.
       */
      get_message_content(json) {
        return json.text;
      }
      /**
       * Processes streaming data received from the Cohere API and extracts text chunks.
       * This method handles the accumulation of text data over multiple events and manages the state of the stream.
       * @param {Object} event - The event object containing streaming data.
       * @returns {string} The accumulated text chunk extracted from the stream.
       */
      get_text_chunk_from_stream(event) {
        if (!this.last_line_index) this.last_line_index = 0;
        clearTimeout(this.last_line_timeout);
        this.last_line_timeout = setTimeout(() => {
          this.last_line_index = 0;
        }, 1e4);
        const data = event.source.xhr.responseText;
        const lines = data.split("\n").slice(this.last_line_index);
        console.log(lines);
        this.last_line_index += lines.length;
        const text_chunk = lines.filter((line) => line.trim() !== "").map((line) => {
          console.log(line);
          const json = JSON.parse(line);
          if (json.event_type === "stream-end") {
            console.log("stream-end");
            this.end_of_stream = true;
            setTimeout(() => {
              this.end_of_stream = false;
            }, 3e3);
            return "";
          }
          return json.text;
        }).join("");
        console.log(text_chunk);
        return text_chunk;
      }
      /**
       * Determines if the end of the stream has been reached based on the event data.
       * @param {Object} event - The event object that may indicate the end of the stream.
       * @returns {boolean} True if the end of the stream is indicated, false otherwise.
       */
      is_end_of_stream(event) {
        return this.end_of_stream;
      }
    };
    exports2.CohereAdapter = CohereAdapter;
    function chatml_to_cohere(chatml) {
      const cohere = {
        model: chatml.model,
        // skip last user message
        chat_history: chatml.messages.slice(0, -1).map((message) => ({
          role: message.role,
          message: parse_message_content_to_string(message)
        })),
        message: parse_message_content_to_string(chatml.messages[chatml.messages.length - 1]),
        temperature: chatml.temperature
        // stream: chatml.stream // currently not supported
      };
      return cohere;
    }
    exports2.chatml_to_cohere = chatml_to_cohere;
    function parse_message_content_to_string(message) {
      return Array.isArray(message.content) ? message.content.filter((c) => c.type === "text").map((c) => c.text).join("\n") : message.content;
    }
  }
});

// ../jsbrains/smart-chat-model/adapters/gemini.js
var require_gemini = __commonJS({
  "../jsbrains/smart-chat-model/adapters/gemini.js"(exports2) {
    var GeminiAdapter = class {
      /**
       * Constructs a GeminiAdapter instance with a specified model configuration.
       * @param {Object} model - The model configuration object.
       */
      constructor(model) {
        this.model = model;
      }
      /**
       * Prepares the request body for the Gemini API by converting ChatML format to a format compatible with Gemini.
       * @param {Object} body - The options object containing messages and other parameters in ChatML format.
       * @returns {Object} The request body formatted for the Gemini API.
       */
      prepare_request_body(body) {
        return chatml_to_gemini(body);
      }
      /**
       * Extracts the first tool call from the JSON response content.
       * @param {Object} json - The JSON response from which to extract the tool call.
       * @returns {Object|null} The first tool call found, or null if none exist.
       */
      get_tool_call(json) {
        return json.candidates?.[0]?.content?.parts?.[0]?.functionCall;
      }
      /**
       * Retrieves the name of the tool from a tool call object.
       * @param {Object} tool_call - The tool call object from which to extract the name.
       * @returns {string|null} The name of the tool, or null if not available.
       */
      get_tool_name(tool_call) {
        return tool_call?.name;
      }
      /**
       * Retrieves the input content of a tool call.
       * @param {Object} tool_call - The tool call object from which to extract the input.
       * @returns {Object|null} The input of the tool call, or null if not available.
       */
      get_tool_call_content(tool_call) {
        return tool_call?.args;
      }
      /**
       * Extracts the first message from the JSON response content.
       * @param {Object} json - The JSON response from which to extract the message.
       * @returns {Object|null} The first message found, or null if none exist.
       */
      get_message(json) {
        return json.candidates?.[0];
      }
      /**
       * Retrieves the content of the first message from the JSON response.
       * @param {Object} json - The JSON response from which to extract the message content.
       * @returns {string|null} The content of the first message, or null if no message is found.
       */
      get_message_content(json) {
        return this.get_message(json)?.content?.parts.map((part) => part.text).join("");
      }
      /**
       * Handles escaped newlines in a streaming text chunk.
       * @param {Object} event - The streaming event containing the data.
       * @returns {string} The text chunk with escaped newlines replaced.
       */
      get_text_chunk_from_stream(event) {
        return event.data.replace(/\\n/g, "\n");
      }
      /**
       * Determines if the streaming response has ended based on the readyState of the XMLHttpRequest.
       * @param {Object} event - The streaming event.
       * @returns {boolean} True if the stream has ended, false otherwise.
       */
      is_end_of_stream(event) {
        return event.source.xhr.readyState === 4;
      }
      /**
       * Counts the tokens in the input by making an API request to the Gemini token counting endpoint.
       * @param {string|Object} input - The input text or object to count tokens in.
       * @returns {Promise<number>} The total number of tokens in the input.
       */
      async count_tokens(input) {
        const req = {
          url: `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:countTokens?key=${this.model.api_key}`,
          method: "POST",
          headers: { "Content-Type": "application/json" }
        };
        let body;
        if (typeof input === "string") body = chatml_to_gemini({ messages: [{ role: "user", content: input }] });
        else if (Array.isArray(input)) body = chatml_to_gemini({ messages: input });
        else if (typeof input === "object") body = chatml_to_gemini(input);
        else return console.error("Invalid input for count_tokens", input);
        delete body.generationConfig;
        delete body.safetySettings;
        req.body = JSON.stringify(body);
        const resp = await this.model.request_adapter(req);
        return resp?.json?.totalTokens;
      }
      /**
       * Getter for the standard API endpoint with the API key appended.
       * @returns {string} The formatted endpoint URL for non-streaming requests.
       */
      get endpoint() {
        return this.model.config.endpoint.replace("MODEL_NAME", this.model.model_name) + "?key=" + this.model.api_key;
      }
      /**
       * Getter for the streaming API endpoint with the API key appended.
       * @returns {string} The formatted endpoint URL for streaming requests.
       */
      get endpoint_streaming() {
        return this.model.config.endpoint_streaming.replace("MODEL_NAME", this.model.model_name) + "?key=" + this.model.api_key;
      }
    };
    exports2.GeminiAdapter = GeminiAdapter;
    function chatml_to_gemini(opts) {
      const messages = opts.messages.filter((msg) => msg.role !== "system");
      const last_system_idx = opts.messages.findLastIndex((msg) => msg.role === "system" && msg.content.includes("---BEGIN"));
      if (last_system_idx > -1) {
        const system_prompt = "---BEGIN IMPORTANT CONTEXT---\n" + opts.messages[last_system_idx].content + "\n---END IMPORTANT CONTEXT---\n\n";
        messages[messages.length - 1].content = system_prompt + messages[messages.length - 1].content;
      }
      const body = {
        contents: messages.filter((msg) => msg.role !== "system").map((msg) => {
          const content = {};
          content.role = msg.role === "assistant" ? "model" : msg.role;
          content.parts = !Array.isArray(msg.content) ? [{ text: msg.content }] : msg.content.map((c) => {
            if (c.type === "text") {
              return { text: c.text };
            }
            if (c.type === "image_url") {
              const image_url = c.image_url.url;
              let mime_type = image_url.split(":")[1].split(";")[0];
              if (mime_type === "image/jpg") mime_type = "image/jpeg";
              return { inline_data: { mime_type, data: image_url.split(",")[1] } };
            }
          });
          return content;
          ({
            role: msg.role === "assistant" ? "model" : msg.role,
            parts: Array.isArray(msg.content) ? [{ text: msg.content.filter((c) => c.type === "text").map((c) => c.text).join("\n") }] : [{ text: msg.content }]
          });
        }),
        generationConfig: {
          temperature: opts.temperature || 0.9,
          topK: opts.topK || 1,
          topP: opts.topP || 1,
          maxOutputTokens: opts.max_tokens || 2048,
          stopSequences: opts.stopSequences || [],
          candidate_count: opts.n || 1
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_NONE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_NONE"
          }
        ]
      };
      const system_instructions = opts.messages.filter((msg) => msg.role === "system" && !msg.content.includes("---BEGIN"));
      if (system_instructions.length > 0) body.systemInstruction = { parts: system_instructions.map((msg) => ({ text: msg.content })) };
      if (opts.tools) {
        body.tools = [{
          function_declarations: opts.tools.map((tool) => ({
            name: tool.function.name,
            description: tool.function.description,
            parameters: tool.function.parameters
          }))
        }];
        if (opts.tool_choice) {
          if (opts.tool_choice !== "auto") {
            if (opts.model.includes("1.5") || opts.model.includes("flash")) {
              body.tool_config = {
                function_calling_config: {
                  mode: "ANY",
                  allowed_function_names: opts.tools.map((tool) => tool.function.name)
                }
              };
              body.systemInstruction = {
                role: "user",
                parts: [
                  {
                    text: `IMPORTANT: You must use the "${body.tools[0].function_declarations[0].name}" function tool!`
                  }
                ]
              };
            }
            const tool_prompt = `IMPORTANT: You must use the "${body.tools[0].function_declarations[0].name}" function tool!`;
            const last_user_idx = body.contents.findLastIndex((msg) => msg.role === "user");
            body.contents[last_user_idx].parts[0].text += "\n\n" + tool_prompt;
          }
        }
      }
      return body;
    }
    exports2.chatml_to_gemini = chatml_to_gemini;
  }
});

// ../jsbrains/smart-chat-model/adapters/open_router.js
var require_open_router = __commonJS({
  "../jsbrains/smart-chat-model/adapters/open_router.js"(exports2) {
    var OpenRouterAdapter = class {
      constructor(model) {
        this.model = model;
      }
      get_tool_call(json) {
        if (json.choices[0].message.tool_calls) {
          return json.choices[0].message.tool_calls[0].function;
        }
        if (json.choices[0].message.content.includes("function")) {
          const content = JSON.parse(json.choices[0].message.content);
          if (!content.function) return null;
          return content;
        }
        return null;
      }
      get_tool_name(tool_call) {
        if (tool_call.function) return tool_call.function;
        if (tool_call.name) return tool_call.name;
        return null;
      }
      get_tool_call_content(tool_call) {
        if (tool_call.parameters) return tool_call.parameters;
        if (tool_call.arguments) {
          const args = JSON.parse(tool_call.arguments);
          Object.entries(args).forEach(([key, value]) => {
            args[key] = value.replace(/\\n/g, "\n").replace(/\\t/g, "	").replace(/\\r/g, "\r").replace(/\\'/g, "'").replace(/\\"/g, '"');
          });
          return args;
        }
        return null;
      }
    };
    exports2.OpenRouterAdapter = OpenRouterAdapter;
  }
});

// ../jsbrains/smart-chat-model/adapters.js
var require_adapters = __commonJS({
  "../jsbrains/smart-chat-model/adapters.js"(exports2) {
    var { AnthropicAdapter } = require_anthropic();
    var { CohereAdapter } = require_cohere();
    var { GeminiAdapter } = require_gemini();
    var { OpenRouterAdapter } = require_open_router();
    exports2.Anthropic = AnthropicAdapter;
    exports2.Cohere = CohereAdapter;
    exports2.Gemini = GeminiAdapter;
    exports2.OpenRouter = OpenRouterAdapter;
  }
});

// ../jsbrains/smart-chat-model/platforms.json
var require_platforms = __commonJS({
  "../jsbrains/smart-chat-model/platforms.json"(exports2, module2) {
    module2.exports = {
      openai: {
        description: "OpenAI",
        type: "API",
        endpoint: "https://api.openai.com/v1/chat/completions",
        streaming: true,
        actions: true,
        fetch_models: true,
        default_model: "gpt-3.5-turbo",
        signup_url: "https://platform.openai.com/api-keys"
      },
      google_gemini: {
        description: "Google Gemini",
        type: "API",
        api_key_header: "none",
        endpoint: "https://generativelanguage.googleapis.com/v1beta/models/MODEL_NAME:generateContent",
        endpoint_streaming: "https://generativelanguage.googleapis.com/v1beta/models/MODEL_NAME:streamGenerateContent",
        streaming: true,
        actions: true,
        adapter: "Gemini",
        fetch_models: true,
        default_model: "gemini-1.5-pro",
        signup_url: "https://ai.google.dev/"
      },
      open_router: {
        description: "Open Router",
        type: "API",
        endpoint: "https://openrouter.ai/api/v1/chat/completions",
        streaming: true,
        adapter: "OpenRouter",
        fetch_models: true,
        default_model: "mistralai/mistral-7b-instruct:free",
        signup_url: "https://accounts.openrouter.ai/sign-up?redirect_url=https%3A%2F%2Fopenrouter.ai%2Fkeys"
      },
      cohere: {
        description: "Cohere Command-R",
        type: "API",
        endpoint: "https://api.cohere.ai/v1/chat",
        streaming: false,
        adapter: "Cohere",
        fetch_models: true,
        default_model: "command-r",
        signup_url: "https://dashboard.cohere.com/welcome/register?redirect_uri=%2Fapi-keys"
      },
      anthropic: {
        description: "Anthropic Claude",
        type: "API",
        endpoint: "https://api.anthropic.com/v1/messages",
        streaming: false,
        api_key_header: "x-api-key",
        headers: {
          "anthropic-version": "2023-06-01",
          "anthropic-beta": "tools-2024-04-04"
        },
        adapter: "Anthropic",
        actions: true,
        fetch_models: true,
        default_model: "claude-3-sonnet-20240229",
        signup_url: "https://console.anthropic.com/login?returnTo=%2Fsettings%2Fkeys"
      },
      custom_local: {
        description: "Custom Local (OpenAI format)",
        type: "API"
      },
      custom_api: {
        description: "Custom API (OpenAI format)",
        type: "API"
      }
    };
  }
});

// ../jsbrains/smart-chat-model/utils/is_valid_tool_call.js
var require_is_valid_tool_call = __commonJS({
  "../jsbrains/smart-chat-model/utils/is_valid_tool_call.js"(exports2) {
    function is_valid_tool_call(tool, tool_call_content) {
      const props = tool.function.parameters.properties;
      if (typeof props !== "undefined" && Object.keys(tool_call_content).length === 0) {
        console.warn(`Invalid tool call: object is empty`);
        return false;
      }
      Object.entries(tool_call_content).forEach(([key, value]) => {
        if (!props[key]) {
          console.warn(`Invalid tool call: missing key ${key} in tool spec`, props);
          return false;
        }
        if (Array.isArray(value) && props[key].type === "array") {
          const itemType = typeof value[0];
          if (!value.every((item) => typeof item === itemType)) {
            console.warn(`Invalid tool call: array items are not of the same type`);
            return false;
          }
          if (props[key].items.type !== itemType) {
            console.warn(`Invalid tool call: array items are not of the same type as the spec`);
            return false;
          }
        } else if (props[key].type !== typeof value) {
          if (props[key].type === "number" && typeof value === "string") {
            if (isNaN(Number(value))) {
              console.warn(`Invalid tool call: value ${value} is not a valid number`);
              return false;
            }
            tool_call_content[key] = Number(value);
          } else {
            console.warn(`Invalid tool call: value ${value} is not of type ${props[key].type}`);
            return false;
          }
        }
        if (props[key].enum && !props[key].enum.includes(value)) {
          console.warn(`Invalid tool call: value ${value} is not in enum ${props[key].enum}`);
          return false;
        }
      });
      tool.function.parameters.required?.forEach((key) => {
        if (typeof tool_call_content[key] === "undefined") {
          console.warn(`Invalid tool call: missing required key ${key}`);
          return false;
        }
        if (tool_call_content[key] === "") {
          console.warn(`Empty value for required key ${key}`);
          return false;
        }
      });
      return true;
    }
    exports2.is_valid_tool_call = is_valid_tool_call;
  }
});

// ../jsbrains/smart-chat-model/streamer.js
var require_streamer = __commonJS({
  "../jsbrains/smart-chat-model/streamer.js"(exports2) {
    var SmartStreamer = class {
      constructor(url, options = {}) {
        const {
          method = "GET",
          headers = {},
          body = null,
          withCredentials = false
        } = options;
        this.url = url;
        this.method = method;
        this.headers = headers;
        this.body = body;
        this.withCredentials = withCredentials;
        this.listeners = {};
        this.readyState = this.CONNECTING;
        this.progress = 0;
        this.chunk = "";
        this.last_event_id = "";
        this.xhr = null;
        this.FIELD_SEPARATOR = ":";
        this.INITIALIZING = -1;
        this.CONNECTING = 0;
        this.OPEN = 1;
        this.CLOSED = 2;
      }
      /**
       * Adds an event listener for the specified event type.
       *
       * @param {string} type - The type of the event.
       * @param {Function} listener - The listener function to be called when the event is triggered.
       */
      addEventListener(type, listener) {
        if (!this.listeners[type]) this.listeners[type] = [];
        if (!this.listeners[type].includes(listener)) this.listeners[type].push(listener);
      }
      /**
       * Removes an event listener from the SmartStreamer instance.
       *
       * @param {string} type - The type of event to remove the listener from.
       * @param {Function} listener - The listener function to remove.
       */
      removeEventListener(type, listener) {
        if (!this.listeners[type]) return;
        this.listeners[type] = this.listeners[type].filter((callback) => callback !== listener);
        if (this.listeners[type].length === 0) delete this.listeners[type];
      }
      /**
       * Dispatches an event to the appropriate event handlers.
       *
       * @param {Event} event - The event to be dispatched.
       * @returns {boolean} - Returns true if the event was successfully dispatched, false otherwise.
       */
      dispatchEvent(event) {
        if (!event) return true;
        event.source = this;
        const onHandler = "on" + event.type;
        if (Object.prototype.hasOwnProperty.call(this, onHandler)) {
          this[onHandler].call(this, event);
          if (event.defaultPrevented) return false;
        }
        if (this.listeners[event.type]) {
          this.listeners[event.type].forEach((callback) => {
            callback(event);
            return !event.defaultPrevented;
          });
        }
        return true;
      }
      /**
       * Initiates the streaming process.
       */
      stream() {
        this.#setReadyState(this.CONNECTING);
        this.xhr = new XMLHttpRequest();
        this.xhr.addEventListener("progress", this.#onStreamProgress.bind(this));
        this.xhr.addEventListener("load", this.#onStreamLoaded.bind(this));
        this.xhr.addEventListener("readystatechange", this.#checkStreamClosed.bind(this));
        this.xhr.addEventListener("error", this.#onStreamFailure.bind(this));
        this.xhr.addEventListener("abort", this.#onStreamAbort.bind(this));
        this.xhr.open(this.method, this.url);
        for (const header in this.headers) {
          this.xhr.setRequestHeader(header, this.headers[header]);
        }
        if (this.last_event_id) this.xhr.setRequestHeader("Last-Event-ID", this.last_event_id);
        this.xhr.withCredentials = this.withCredentials;
        this.xhr.send(this.body);
      }
      /**
       * Ends the streamer connection.
       * Aborts the current XHR request and sets the ready state to CLOSED.
       */
      end() {
        if (this.readyState === this.CLOSED) return;
        this.xhr.abort();
        this.xhr = null;
        this.#setReadyState(this.CLOSED);
      }
      // private methods
      #setReadyState(state) {
        const event = new CustomEvent("readyStateChange");
        event.readyState = state;
        this.readyState = state;
        this.dispatchEvent(event);
      }
      #onStreamFailure(e) {
        const event = new CustomEvent("error");
        event.data = e.currentTarget.response;
        this.dispatchEvent(event);
        this.end();
      }
      #onStreamAbort(e) {
        const event = new CustomEvent("abort");
        this.end();
      }
      #onStreamProgress(e) {
        if (!this.xhr) return;
        if (this.xhr.status !== 200) {
          this.#onStreamFailure(e);
          return;
        }
        if (this.readyState === this.CONNECTING) {
          this.dispatchEvent(new CustomEvent("open"));
          this.#setReadyState(this.OPEN);
        }
        const data = this.xhr.responseText.substring(this.progress);
        this.progress += data.length;
        data.split(/(\r\n|\r|\n)/g).forEach((part) => {
          if (part.trim().length === 0) {
            this.dispatchEvent(this.#parseEventChunk(this.chunk.trim()));
            this.chunk = "";
          } else {
            this.chunk += part;
          }
        });
      }
      #onStreamLoaded(e) {
        this.#onStreamProgress(e);
        this.dispatchEvent(this.#parseEventChunk(this.chunk));
        this.chunk = "";
      }
      #parseEventChunk(chunk) {
        if (!chunk || chunk.length === 0) return null;
        const e = { id: null, retry: null, data: "", event: "message", text: "" };
        chunk.split(/(\r\n|\r|\n)/).forEach((line) => {
          line = line.trim();
          const index = line.indexOf(this.FIELD_SEPARATOR);
          if (index <= 0) return;
          const field = line.substring(0, index).replace(/^"|"$/g, "");
          if (!["id", "retry", "data", "event", "text"].includes(field)) return;
          const value = line.substring(index + 1).trim().replace(/^"|"$/g, "");
          e.data += value;
        });
        if (e.id) this.last_event_id = e.id;
        const event = new CustomEvent(e.event || "message");
        event.id = e.id;
        event.data = e.data || "";
        event.last_event_id = this.last_event_id;
        return event;
      }
      #checkStreamClosed() {
        if (!this.xhr) return;
        if (this.xhr.readyState === XMLHttpRequest.DONE) this.#setReadyState(this.CLOSED);
      }
    };
    exports2.SmartStreamer = SmartStreamer;
  }
});

// ../jsbrains/smart-chat-model/models/open_router.js
var require_open_router2 = __commonJS({
  "../jsbrains/smart-chat-model/models/open_router.js"(exports2) {
    async function fetch_open_router_models(api_key, request_adapter = null) {
      try {
        let data;
        if (!request_adapter) {
          const response = await fetch("https://openrouter.ai/api/v1/models");
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          data = await response.json();
          console.log("Model data retrieved:", data);
        } else {
          const resp = await request_adapter({
            url: "https://openrouter.ai/api/v1/models"
          });
          data = await resp.json;
        }
        return data.data.map((model) => ({
          model_name: model.id,
          key: model.id,
          max_input_tokens: model.context_length,
          description: model.name,
          actions: model.description.includes("tool use") || model.description.includes("function call"),
          multimodal: model.architecture.modality === "multimodal",
          raw: model
        }));
      } catch (error) {
        console.error("Failed to fetch model data:", error);
        return [];
      }
    }
    exports2.fetch_open_router_models = fetch_open_router_models;
  }
});

// ../jsbrains/smart-chat-model/models/openai.js
var require_openai = __commonJS({
  "../jsbrains/smart-chat-model/models/openai.js"(exports2) {
    var model_context = {
      "gpt-3.5-turbo-0125": {
        "context": 16385,
        "max_out": 4096
      },
      "gpt-3.5-turbo-0301": {
        "context": 4097,
        "max_out": 4097
      },
      "gpt-3.5-turbo-0613": {
        "context": 4097,
        "max_out": 4097
      },
      "gpt-3.5-turbo-1106": {
        "context": 16385,
        "max_out": 4096
      },
      "gpt-3.5-turbo-16k": {
        "context": 16385,
        "max_out": 16385
      },
      "gpt-3.5-turbo-16k-0613": {
        "context": 16385,
        "max_out": 16385
      },
      "gpt-4-0125-preview": {
        "context": 128e3,
        "max_out": 4096
      },
      "gpt-4-0314": {
        "context": 8192,
        "max_out": 8192
      },
      "gpt-4-0613": {
        "context": 8192,
        "max_out": 8192
      },
      "gpt-4-1106-preview": {
        "context": 128e3,
        "max_out": 4096
      },
      "gpt-4-1106-vision-preview": {
        "context": 128e3,
        "max_out": 4096
      },
      "gpt-4-32k-0314": {
        "context": 32768,
        "max_out": 32768
      },
      "gpt-4-32k-0613": {
        "context": 32768,
        "max_out": 32768
      },
      "gpt-4-turbo-2024-04-09": {
        "context": 128e3,
        "max_out": 4096
      },
      "gpt-4-turbo-preview": {
        "context": 128e3,
        "max_out": 4096
      },
      "gpt-4-vision-preview": {
        "context": 128e3,
        "max_out": 4096
      },
      "gpt-3.5-turbo": {
        "context": 16385,
        "max_out": 4096
      },
      "gpt-4-turbo": {
        "context": 128e3,
        "max_out": 4096
      },
      "gpt-4-32k": {
        "context": 32768,
        "max_out": 32768
      },
      "gpt-4o": {
        "context": 128e3,
        "max_out": 4096
      },
      "gpt-4": {
        "context": 8192,
        "max_out": 8192
      }
    };
    async function fetch_openai_models(api_key, request_adapter = null) {
      if (!api_key) {
        console.error("No API key provided");
        return [];
      }
      try {
        let data;
        if (!request_adapter) {
          console.log("Using fetch");
          const response = await fetch("https://api.openai.com/v1/models", {
            headers: {
              "Authorization": `Bearer ${api_key}`
            }
          });
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          data = await response.json();
          console.log("Model data retrieved:", data);
        } else {
          console.log("Using request adapter");
          const resp = await request_adapter({
            url: "https://api.openai.com/v1/models",
            headers: {
              "Authorization": `Bearer ${api_key}`
            }
          });
          data = await resp.json;
        }
        return data.data.filter((model) => model.id.startsWith("gpt-") && !model.id.includes("-instruct")).map((model) => {
          const out = {
            model_name: model.id,
            key: model.id,
            multimodal: model.id.includes("vision") || model.id.includes("gpt-4-turbo")
          };
          const m = Object.entries(model_context).find((m2) => m2[0] === model.id || model.id.startsWith(m2[0] + "-"));
          if (m) {
            out.max_input_tokens = m[1].context;
            out.description = `context: ${m[1].context}, output: ${m[1].max_out}`;
          }
          return out;
        });
      } catch (error) {
        console.error("Failed to fetch model data:", error);
        return [];
      }
    }
    exports2.fetch_openai_models = fetch_openai_models;
  }
});

// ../jsbrains/smart-chat-model/models/google_gemini.js
var require_google_gemini = __commonJS({
  "../jsbrains/smart-chat-model/models/google_gemini.js"(exports2) {
    async function fetch_google_gemini_models(api_key, request_adapter = null) {
      if (!api_key) {
        console.error("No API key provided");
        return [];
      }
      try {
        let data;
        if (!request_adapter) {
          const response = await fetch("https://generativelanguage.googleapis.com/v1beta/models?key=" + api_key);
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          data = await response.json();
          console.log("Model data retrieved:", data);
        } else {
          const resp = await request_adapter({
            url: "https://generativelanguage.googleapis.com/v1beta/models?key=" + api_key
          });
          console.log(JSON.stringify(resp));
          data = await resp.json;
        }
        return data.models.filter((model) => model.name.startsWith("models/gemini")).map((model) => {
          const out = {
            model_name: model.name.split("/").pop(),
            key: model.name.split("/").pop(),
            max_input_tokens: model.inputTokenLimit,
            max_output_tokens: model.maxOutputTokens,
            description: model.description,
            multimodal: model.name.includes("vision") || model.description.includes("multimodal"),
            raw: model
          };
          return out;
        });
      } catch (error) {
        console.error("Failed to fetch model data:", error);
        return [];
      }
    }
    exports2.fetch_google_gemini_models = fetch_google_gemini_models;
  }
});

// ../jsbrains/smart-chat-model/models/cohere.js
var require_cohere2 = __commonJS({
  "../jsbrains/smart-chat-model/models/cohere.js"(exports2) {
    async function fetch_cohere_models(api_key, request_adapter = null) {
      if (!api_key) {
        console.error("No API key provided");
        return [];
      }
      try {
        let data;
        if (!request_adapter) {
          const response = await fetch("https://api.cohere.ai/v1/models", {
            headers: {
              "Authorization": `Bearer ${api_key}`
            }
          });
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          data = await response.json();
          console.log("Model data retrieved:", data);
        } else {
          const resp = await request_adapter({
            url: "https://api.cohere.ai/v1/models",
            headers: {
              "Authorization": `Bearer ${api_key}`
            }
          });
          data = await resp.json;
        }
        console.log("Model data retrieved:", data);
        return data.models.filter((model) => model.name.startsWith("command-")).map((model) => {
          const out = {
            model_name: model.name,
            key: model.name,
            max_input_tokens: model.context_length,
            tokenizer_url: model.tokenizer_url,
            finetuned: model.finetuned,
            description: `Max input tokens: ${model.context_length}, Finetuned: ${model.finetuned}`
          };
          return out;
        });
      } catch (error) {
        console.error("Failed to fetch model data:", error);
        return [];
      }
    }
    exports2.fetch_cohere_models = fetch_cohere_models;
  }
});

// ../jsbrains/smart-chat-model/models/anthropic.js
var require_anthropic2 = __commonJS({
  "../jsbrains/smart-chat-model/models/anthropic.js"(exports2) {
    async function fetch_anthropic_models() {
      return [
        {
          "key": "claude-3-opus-20240229",
          "model_name": "claude-3-opus-20240229",
          "description": "Anthropic's Claude Opus",
          "max_input_tokens": 2e5,
          "max_output_tokens": 4e3,
          "multimodal": true
        },
        {
          key: "claude-3-5-sonnet-20240620",
          "model_name": "claude-3.5-sonnet-20240620",
          "description": "Anthropic's Claude Sonnet",
          "max_input_tokens": 2e5,
          "max_output_tokens": 4e3,
          "multimodal": true
        },
        {
          key: "claude-3-haiku-20240307",
          "model_name": "claude-3-haiku-20240307",
          "description": "Anthropic's Claude Haiku",
          "max_input_tokens": 2e5,
          "max_output_tokens": 4e3,
          "multimodal": true
        },
        {
          key: "claude-3-sonnet-20240229",
          "model_name": "claude-3-sonnet-20240229",
          "description": "Anthropic's Claude Sonnet",
          "max_input_tokens": 2e5,
          "max_output_tokens": 4e3,
          "multimodal": true
        }
      ];
    }
    exports2.fetch_anthropic_models = fetch_anthropic_models;
  }
});

// ../jsbrains/smart-chat-model/models/fetch.js
var require_fetch = __commonJS({
  "../jsbrains/smart-chat-model/models/fetch.js"(exports2) {
    var { fetch_open_router_models } = require_open_router2();
    var { fetch_openai_models } = require_openai();
    var { fetch_google_gemini_models } = require_google_gemini();
    var { fetch_cohere_models } = require_cohere2();
    var { fetch_anthropic_models } = require_anthropic2();
    exports2.open_router = fetch_open_router_models;
    exports2.openai = fetch_openai_models;
    exports2.google_gemini = fetch_google_gemini_models;
    exports2.cohere = fetch_cohere_models;
    exports2.anthropic = fetch_anthropic_models;
  }
});

// ../jsbrains/smart-chat-model/smart_chat_model.js
var require_smart_chat_model = __commonJS({
  "../jsbrains/smart-chat-model/smart_chat_model.js"(exports2) {
    var adapters = require_adapters();
    var platforms = require_platforms();
    var { is_valid_tool_call } = require_is_valid_tool_call();
    var { SmartStreamer } = require_streamer();
    var fetch_models = require_fetch();
    var SmartChatModel3 = class {
      /**
       * Constructs an instance of SmartChatModel with specified environment, model key, and options.
       * @param {Object} main - The main environment context, typically containing configurations and state.
       * @param {string} platform_key - Key to select the specific model configuration from models.json.
       * @param {Object} model_config - Optional parameters to override model configurations.
       */
      constructor(main, platform_key, model_config = {}) {
        this.env = main;
        this.main = this.env;
        this.config = {
          ...platforms[platform_key] || {},
          ...model_config
          // override default platform config
        };
        console.log(JSON.stringify(this.config));
        this.platform_key = platform_key;
        this.active_stream = null;
        this._request_adapter = null;
        this.platforms = platforms;
        if (this.config.adapter) this.adapter = new adapters[this.config.adapter](this);
        if (this.adapter) console.log("has chat model adapter");
      }
      static get models() {
        return platforms;
      }
      // DEPRECATED (confusing name)
      // 
      static get platforms() {
        return Object.keys(platforms).map((key) => ({
          key,
          ...platforms[key]
        }));
      }
      get platform() {
        return platforms[this.platform_key];
      }
      get default_opts() {
        return {
          temperature: 0.3,
          top_p: 1,
          presence_penalty: 0,
          frequency_penalty: 0,
          n: 1,
          model: this.model_name,
          max_tokens: this.max_output_tokens
        };
      }
      async request_middlewares(opts) {
        return opts;
      }
      /**
       * Completes the chat interaction by processing the provided options, making an API request, and handling the response.
       * This method supports both streaming and non-streaming responses, and can handle tool calls if specified in the response.
       *
       * @param {Object} opts - The options for the chat completion which may include settings like temperature, max tokens, etc.
       * @param {boolean} render - Flag to determine if the response should be rendered in the UI.
       * @returns {Promise<string|void>} - Returns the chat response content or handles tool outputs recursively. In case of errors, it may return an error message.
       */
      async complete(opts = {}, render = true) {
        const prepared_opts = await this.prepare_options(opts);
        const request2 = this.create_request(prepared_opts);
        try {
          if (prepared_opts.stream) {
            return await this.handle_streaming_request(request2, render);
          }
          return await this.handle_non_streaming_request(request2, prepared_opts, render);
        } catch (err) {
          return this.handle_error(err, render);
        }
      }
      async prepare_options(opts) {
        if (!this.base_model_config) {
          this.base_model_config = await this.get_base_model_config();
          this.config = {
            ...this.base_model_config,
            ...this.config
          };
        }
        const prepared_opts = {
          ...this.default_opts,
          messages: (await this.current?.get_chat_ml())?.messages || [],
          ...opts
        };
        if (prepared_opts.stream !== false && this.config.streaming && !this.current?.tool_choice) {
          prepared_opts.stream = true;
        } else {
          prepared_opts.stream = false;
        }
        return this.request_middlewares(JSON.parse(JSON.stringify(prepared_opts)));
      }
      create_request(opts) {
        const req = {
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${this.api_key}`
          },
          method: "POST"
        };
        if (this.config.headers) {
          req.headers = { ...req.headers, ...this.config.headers };
        }
        if (this.config.api_key_header) {
          if (this.config.api_key_header !== "none") {
            req.headers[this.config.api_key_header] = this.api_key;
          }
          delete req.headers.Authorization;
        }
        const body = typeof this.env.actions?.prepare_request_body === "function" ? this.env.actions.prepare_request_body(opts) : { ...opts };
        req.body = JSON.stringify(typeof this.adapter?.prepare_request_body === "function" ? this.adapter.prepare_request_body(body) : body);
        return req;
      }
      async handle_streaming_request(request2, render) {
        return this.stream(request2);
      }
      async handle_non_streaming_request(request2, opts, render) {
        const resp_json = await this.request(request2);
        if (resp_json.error) {
          return this.handle_api_error(resp_json.error, render);
        }
        const tool_call = this.get_tool_call(resp_json);
        if (tool_call) {
          return this.handle_tool_call(tool_call, opts, render);
        }
        const message_content = this.get_message_content(resp_json);
        if (render) {
          this.done_handler(message_content);
        }
        return message_content;
      }
      handle_api_error(error, render) {
        console.error(error);
        if (render) {
          this.done_handler("*API Error. See console logs for details.*");
        }
        return "*API Error. See console logs for details.*";
      }
      async handle_tool_call(tool_call, opts, render) {
        if (this.env.chats?.current?.tool_choice) {
          this.env.chats.current.tool_choice = null;
        }
        const tool_name = this.get_tool_name(tool_call);
        const tool_call_content = this.get_tool_call_content(tool_call);
        const tools = opts.tools || [];
        const tool = tools.find((t) => t.function.name === tool_name);
        const tool_handler = this.get_tool_handler(tool_name);
        if (!tool_handler || !is_valid_tool_call(tool, tool_call_content)) {
          return this.handle_invalid_tool_call(tool_name, tool_call_content);
        }
        await this.add_tool_call_to_chat(tool_name, tool_call_content);
        const tool_output = await tool_handler(this.env, tool_call_content);
        if (tool_output) {
          await this.current.add_tool_output(tool_name, tool_output);
          this.current.tool_choice = "none";
          return this.complete({});
        }
      }
      handle_invalid_tool_call(tool_name, tool_call_content) {
        console.warn(`Tool ${tool_name} not found or invalid, returning tool_call_content`);
        console.log({ tool_call_content });
        return tool_call_content;
      }
      async add_tool_call_to_chat(tool_name, tool_call_content) {
        if (typeof this.current?.add_message === "function") {
          await this.current.add_message({
            role: "assistant",
            tool_calls: [{
              function: {
                name: tool_name,
                arguments: JSON.stringify(tool_call_content)
              }
            }]
          });
        }
      }
      handle_error(err, render) {
        console.error(err);
        if (render) {
          this.done_handler("*An error occurred. See console logs for details.*");
        }
        return "*An error occurred. See console logs for details.*";
      }
      // HANDLE TOOLS
      /**
       * Retrieves the tool handler function based on the tool name from the environment's actions.
       * This method can be overridden to use custom logic for handling tools.
       * 
       * @param {string} tool_name - The name of the tool for which the handler is to be retrieved.
       * @returns {Function} The handler function for the specified tool.
       */
      get_tool_handler(tool_name) {
        return this.env.actions?.actions?.[tool_name]?.handler;
      }
      /**
       * Extracts the tool call information from a JSON response. This method supports adapter-specific logic.
       * If no adapter method is provided, it defaults to the expected OpenAI JSON format.
       * 
       * @param {Object} json - The JSON response from which to extract the tool call.
       * @returns {Object} The first tool call found in the response.
       */
      get_tool_call(json) {
        if (typeof this.adapter?.get_tool_call === "function") return this.adapter.get_tool_call(json);
        return json.choices?.[0].message.tool_calls?.[0];
      }
      /**
       * Determines the tool name from a tool call object. Supports adapter-specific implementations.
       * Defaults to extracting the name directly from the tool call structure.
       * 
       * @param {Object} tool_call - The tool call object from which to extract the tool name.
       * @returns {string} The name of the tool.
       */
      get_tool_name(tool_call) {
        if (typeof this.adapter?.get_tool_name === "function") return this.adapter.get_tool_name(tool_call);
        return tool_call.function.name;
      }
      /**
       * Extracts the tool call content from a tool call object. Supports adapter-specific logic.
       * Defaults to parsing the 'arguments' field of the tool call function as JSON.
       * 
       * @param {Object} tool_call - The tool call object from which to extract the content.
       * @returns {Object} The parsed arguments of the tool call.
       */
      get_tool_call_content(tool_call) {
        if (typeof this.adapter?.get_tool_call_content === "function") return this.adapter.get_tool_call_content(tool_call);
        return JSON.parse(tool_call.function.arguments);
      }
      // HANDLE MESSAGES
      /**
       * Retrieves the message object from a JSON response. Supports adapter-specific implementations.
       * Defaults to handling both OpenAI and Ollama formats by checking for message structures in 'choices'.
       * 
       * @param {Object} json - The JSON response from which to extract the message.
       * @returns {Object} The message object extracted from the response.
       */
      get_message(json) {
        if (typeof this.adapter?.get_message === "function") return this.adapter.get_message(json);
        return json.choices?.[0].message || json.message;
      }
      /**
       * Extracts the content of a message from a JSON response. Supports adapter-specific implementations.
       * This method relies on `get_message` to first retrieve the message object.
       * 
       * @param {Object} json - The JSON response from which to extract the message content.
       * @returns {string} The content of the message.
       */
      get_message_content(json) {
        if (typeof this.adapter?.get_message_content === "function") return this.adapter.get_message_content(json);
        return this.get_message(json).content;
      }
      async request(req) {
        req.url = this.endpoint;
        req.throw = false;
        const resp = this._request_adapter ? await this._request_adapter(req) : await fetch(this.endpoint, req);
        console.log(resp);
        const resp_json = await this.get_resp_json(resp);
        console.log(resp_json);
        return resp_json;
      }
      async get_resp_json(resp) {
        return typeof resp.json === "function" ? await resp.json() : await resp.json;
      }
      get request_adapter() {
        return this._request_adapter;
      }
      async stream(req) {
        console.log("Streaming Request: ");
        console.log(req);
        const full_text = await new Promise((resolve, reject) => {
          try {
            this.active_stream = new SmartStreamer(this.endpoint_streaming, req);
            let curr_text = "";
            this.active_stream.addEventListener("message", (e) => {
              if (this.is_end_of_stream(e)) {
                this.stop_stream();
                return resolve(curr_text);
              }
              let text_chunk = this.get_text_chunk_from_stream(e);
              if (!text_chunk) return;
              curr_text += text_chunk;
              this.chunk_handler(text_chunk);
            });
            this.active_stream.addEventListener("readystatechange", (e) => {
              if (e.readyState >= 2) console.log("ReadyState: " + e.readyState);
            });
            this.active_stream.addEventListener("error", (e) => {
              console.error(e);
              this.done_handler("*API Error. See console logs for details.*");
              this.stop_stream();
              reject(e);
            });
            this.active_stream.stream();
          } catch (err) {
            console.error(err);
            this.stop_stream();
            reject(err);
          }
        });
        this.done_handler(full_text);
        return full_text;
      }
      get_text_chunk_from_stream(event) {
        if (typeof this.adapter?.get_text_chunk_from_stream === "function") return this.adapter.get_text_chunk_from_stream(event);
        let resp = null;
        let text_chunk = "";
        try {
          resp = JSON.parse(event.data);
          text_chunk = resp.choices[0].delta.content;
        } catch (err) {
          console.log(err);
          console.log(event.data);
          if (event.data.indexOf("}{") > -1) event.data = event.data.replace(/}{/g, "},{");
          resp = JSON.parse(`[${event.data}]`);
          resp.forEach((r) => {
            if (r.choices) text_chunk += r.choices[0].delta.content;
          });
        }
        return text_chunk;
      }
      is_end_of_stream(event) {
        if (typeof this.adapter?.is_end_of_stream === "function") return this.adapter.is_end_of_stream(event);
        return event.data === "[DONE]";
      }
      stop_stream() {
        if (this.active_stream) {
          this.active_stream.end();
          this.active_stream = null;
        }
      }
      done_handler(full_str) {
        if (typeof this.main.done_handler === "function") this.main.done_handler(full_str);
      }
      chunk_handler(text_chunk) {
        if (typeof this.main.chunk_handler === "function") this.main.chunk_handler(text_chunk);
      }
      async count_tokens(input) {
        if (typeof this.adapter?.count_tokens === "function") return await this.adapter.count_tokens(input);
        return this.estimate_tokens(input);
      }
      estimate_tokens(input) {
        if (typeof this.adapter?.estimate_tokens === "function") return this.adapter.estimate_tokens(input);
        if (typeof input === "object") input = JSON.stringify(input);
        return input.length / 4;
      }
      async test_api_key() {
        console.log(this.api_key);
        try {
          const request2 = {
            messages: [
              { role: "user", content: "Hello" }
            ],
            temperature: 0,
            max_tokens: 100,
            stream: false,
            n: 1
          };
          if (this.config.fetch_models) {
            request2.model = this.config.default_model;
          }
          const resp = await this.complete(request2, false);
          console.log(resp);
          if (!resp) return false;
          return true;
        } catch (err) {
          console.error(err);
          return false;
        }
      }
      async get_models() {
        if (!this.api_key) {
          console.warn(`No API key found for ${this.platform_key}. Cannot retrieve models.`);
          return [];
        }
        if (this.platforms[this.platform_key]?.fetch_models && typeof fetch_models[this.platform_key] === "function") {
          const models = await fetch_models[this.platform_key](this.api_key, this._request_adapter);
          if (models) {
            models.sort((a, b) => a.model_name.localeCompare(b.model_name));
            return models;
          } else console.error(`No models found for ${this.platform_key}`, models);
        }
        return [];
      }
      async get_base_model_config() {
        const models = await this.get_models();
        return models.find((m) => m.key === this.model_name);
      }
      // getters
      get api_key() {
        return this.config.api_key;
      }
      get current() {
        return this.env.chats?.current;
      }
      // use endpoint of combine protocol, hostname, port, and path
      get endpoint() {
        if (typeof this.adapter?.endpoint !== "undefined") return this.adapter.endpoint.replace("MODEL_NAME", this.model_name);
        return this.config.endpoint || this.config.protocol + "://" + this.config.hostname + (this.config.port ? ":" + this.config.port : "") + this.endpoint_path;
      }
      get endpoint_streaming() {
        if (typeof this.adapter?.endpoint_streaming !== "undefined") return this.adapter.endpoint_streaming.replace("MODEL_NAME", this.model_name);
        return this.config.endpoint_streaming || this.endpoint;
      }
      get endpoint_path() {
        return this.config.path.startsWith("/") ? this.config.path : "/" + this.config.path;
      }
      get max_input_tokens() {
        return this.config.max_input_tokens;
      }
      get max_output_tokens() {
        return this.config.max_output_tokens;
      }
      get model_name() {
        return this.config.model_name || this.config.default_model;
      }
      get multimodal() {
        return typeof this.adapter?.multimodal !== "undefined" ? this.adapter.multimodal : this.config.multimodal;
      }
    };
    exports2.SmartChatModel = SmartChatModel3;
  }
});

// ../jsbrains/smart-setting/ejs.min.cjs
var require_ejs_min2 = __commonJS({
  "../jsbrains/smart-setting/ejs.min.cjs"(exports2, module2) {
    (function(f) {
      if (typeof exports2 === "object" && typeof module2 !== "undefined") {
        module2.exports = f();
      } else if (typeof define === "function" && define.amd) {
        define([], f);
      } else {
        var g;
        if (typeof window !== "undefined") {
          g = window;
        } else if (typeof global !== "undefined") {
          g = global;
        } else if (typeof self !== "undefined") {
          g = self;
        } else {
          g = this;
        }
        g.ejs = f();
      }
    })(function() {
      var define2, module3, exports3;
      return (/* @__PURE__ */ function() {
        function r(e, n, t) {
          function o(i2, f) {
            if (!n[i2]) {
              if (!e[i2]) {
                var c = "function" == typeof require && require;
                if (!f && c) return c(i2, true);
                if (u) return u(i2, true);
                var a = new Error("Cannot find module '" + i2 + "'");
                throw a.code = "MODULE_NOT_FOUND", a;
              }
              var p = n[i2] = { exports: {} };
              e[i2][0].call(p.exports, function(r2) {
                var n2 = e[i2][1][r2];
                return o(n2 || r2);
              }, p, p.exports, r, e, n, t);
            }
            return n[i2].exports;
          }
          for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
          return o;
        }
        return r;
      }())({ 1: [function(require2, module4, exports4) {
        "use strict";
        var fs = require2("fs");
        var path = require2("path");
        var utils = require2("./utils");
        var scopeOptionWarned = false;
        var _VERSION_STRING = require2("../package.json").version;
        var _DEFAULT_OPEN_DELIMITER = "<";
        var _DEFAULT_CLOSE_DELIMITER = ">";
        var _DEFAULT_DELIMITER = "%";
        var _DEFAULT_LOCALS_NAME = "locals";
        var _NAME = "ejs";
        var _REGEX_STRING = "(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)";
        var _OPTS_PASSABLE_WITH_DATA = ["delimiter", "scope", "context", "debug", "compileDebug", "client", "_with", "rmWhitespace", "strict", "filename", "async"];
        var _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat("cache");
        var _BOM = /^\uFEFF/;
        var _JS_IDENTIFIER = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;
        exports4.cache = utils.cache;
        exports4.fileLoader = fs.readFileSync;
        exports4.localsName = _DEFAULT_LOCALS_NAME;
        exports4.promiseImpl = new Function("return this;")().Promise;
        exports4.resolveInclude = function(name, filename, isDir) {
          var dirname = path.dirname;
          var extname = path.extname;
          var resolve = path.resolve;
          var includePath = resolve(isDir ? filename : dirname(filename), name);
          var ext = extname(name);
          if (!ext) {
            includePath += ".ejs";
          }
          return includePath;
        };
        function resolvePaths(name, paths) {
          var filePath;
          if (paths.some(function(v) {
            filePath = exports4.resolveInclude(name, v, true);
            return fs.existsSync(filePath);
          })) {
            return filePath;
          }
        }
        function getIncludePath(path2, options) {
          var includePath;
          var filePath;
          var views = options.views;
          var match = /^[A-Za-z]+:\\|^\//.exec(path2);
          if (match && match.length) {
            path2 = path2.replace(/^\/*/, "");
            if (Array.isArray(options.root)) {
              includePath = resolvePaths(path2, options.root);
            } else {
              includePath = exports4.resolveInclude(path2, options.root || "/", true);
            }
          } else {
            if (options.filename) {
              filePath = exports4.resolveInclude(path2, options.filename);
              if (fs.existsSync(filePath)) {
                includePath = filePath;
              }
            }
            if (!includePath && Array.isArray(views)) {
              includePath = resolvePaths(path2, views);
            }
            if (!includePath && typeof options.includer !== "function") {
              throw new Error('Could not find the include file "' + options.escapeFunction(path2) + '"');
            }
          }
          return includePath;
        }
        function handleCache(options, template) {
          var func;
          var filename = options.filename;
          var hasTemplate = arguments.length > 1;
          if (options.cache) {
            if (!filename) {
              throw new Error("cache option requires a filename");
            }
            func = exports4.cache.get(filename);
            if (func) {
              return func;
            }
            if (!hasTemplate) {
              template = fileLoader(filename).toString().replace(_BOM, "");
            }
          } else if (!hasTemplate) {
            if (!filename) {
              throw new Error("Internal EJS error: no file name or template provided");
            }
            template = fileLoader(filename).toString().replace(_BOM, "");
          }
          func = exports4.compile(template, options);
          if (options.cache) {
            exports4.cache.set(filename, func);
          }
          return func;
        }
        function tryHandleCache(options, data, cb) {
          var result;
          if (!cb) {
            if (typeof exports4.promiseImpl == "function") {
              return new exports4.promiseImpl(function(resolve, reject) {
                try {
                  result = handleCache(options)(data);
                  resolve(result);
                } catch (err) {
                  reject(err);
                }
              });
            } else {
              throw new Error("Please provide a callback function");
            }
          } else {
            try {
              result = handleCache(options)(data);
            } catch (err) {
              return cb(err);
            }
            cb(null, result);
          }
        }
        function fileLoader(filePath) {
          return exports4.fileLoader(filePath);
        }
        function includeFile(path2, options) {
          var opts = utils.shallowCopy(utils.createNullProtoObjWherePossible(), options);
          opts.filename = getIncludePath(path2, opts);
          if (typeof options.includer === "function") {
            var includerResult = options.includer(path2, opts.filename);
            if (includerResult) {
              if (includerResult.filename) {
                opts.filename = includerResult.filename;
              }
              if (includerResult.template) {
                return handleCache(opts, includerResult.template);
              }
            }
          }
          return handleCache(opts);
        }
        function rethrow(err, str, flnm, lineno, esc) {
          var lines = str.split("\n");
          var start = Math.max(lineno - 3, 0);
          var end = Math.min(lines.length, lineno + 3);
          var filename = esc(flnm);
          var context = lines.slice(start, end).map(function(line, i) {
            var curr = i + start + 1;
            return (curr == lineno ? " >> " : "    ") + curr + "| " + line;
          }).join("\n");
          err.path = filename;
          err.message = (filename || "ejs") + ":" + lineno + "\n" + context + "\n\n" + err.message;
          throw err;
        }
        function stripSemi(str) {
          return str.replace(/;(\s*$)/, "$1");
        }
        exports4.compile = function compile(template, opts) {
          var templ;
          if (opts && opts.scope) {
            if (!scopeOptionWarned) {
              console.warn("`scope` option is deprecated and will be removed in EJS 3");
              scopeOptionWarned = true;
            }
            if (!opts.context) {
              opts.context = opts.scope;
            }
            delete opts.scope;
          }
          templ = new Template(template, opts);
          return templ.compile();
        };
        exports4.render = function(template, d, o) {
          var data = d || utils.createNullProtoObjWherePossible();
          var opts = o || utils.createNullProtoObjWherePossible();
          if (arguments.length == 2) {
            utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);
          }
          return handleCache(opts, template)(data);
        };
        exports4.renderFile = function() {
          var args = Array.prototype.slice.call(arguments);
          var filename = args.shift();
          var cb;
          var opts = { filename };
          var data;
          var viewOpts;
          if (typeof arguments[arguments.length - 1] == "function") {
            cb = args.pop();
          }
          if (args.length) {
            data = args.shift();
            if (args.length) {
              utils.shallowCopy(opts, args.pop());
            } else {
              if (data.settings) {
                if (data.settings.views) {
                  opts.views = data.settings.views;
                }
                if (data.settings["view cache"]) {
                  opts.cache = true;
                }
                viewOpts = data.settings["view options"];
                if (viewOpts) {
                  utils.shallowCopy(opts, viewOpts);
                }
              }
              utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS);
            }
            opts.filename = filename;
          } else {
            data = utils.createNullProtoObjWherePossible();
          }
          return tryHandleCache(opts, data, cb);
        };
        exports4.Template = Template;
        exports4.clearCache = function() {
          exports4.cache.reset();
        };
        function Template(text, opts) {
          opts = opts || utils.createNullProtoObjWherePossible();
          var options = utils.createNullProtoObjWherePossible();
          this.templateText = text;
          this.mode = null;
          this.truncate = false;
          this.currentLine = 1;
          this.source = "";
          options.client = opts.client || false;
          options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;
          options.compileDebug = opts.compileDebug !== false;
          options.debug = !!opts.debug;
          options.filename = opts.filename;
          options.openDelimiter = opts.openDelimiter || exports4.openDelimiter || _DEFAULT_OPEN_DELIMITER;
          options.closeDelimiter = opts.closeDelimiter || exports4.closeDelimiter || _DEFAULT_CLOSE_DELIMITER;
          options.delimiter = opts.delimiter || exports4.delimiter || _DEFAULT_DELIMITER;
          options.strict = opts.strict || false;
          options.context = opts.context;
          options.cache = opts.cache || false;
          options.rmWhitespace = opts.rmWhitespace;
          options.root = opts.root;
          options.includer = opts.includer;
          options.outputFunctionName = opts.outputFunctionName;
          options.localsName = opts.localsName || exports4.localsName || _DEFAULT_LOCALS_NAME;
          options.views = opts.views;
          options.async = opts.async;
          options.destructuredLocals = opts.destructuredLocals;
          options.legacyInclude = typeof opts.legacyInclude != "undefined" ? !!opts.legacyInclude : true;
          if (options.strict) {
            options._with = false;
          } else {
            options._with = typeof opts._with != "undefined" ? opts._with : true;
          }
          this.opts = options;
          this.regex = this.createRegex();
        }
        Template.modes = { EVAL: "eval", ESCAPED: "escaped", RAW: "raw", COMMENT: "comment", LITERAL: "literal" };
        Template.prototype = { createRegex: function() {
          var str = _REGEX_STRING;
          var delim = utils.escapeRegExpChars(this.opts.delimiter);
          var open = utils.escapeRegExpChars(this.opts.openDelimiter);
          var close = utils.escapeRegExpChars(this.opts.closeDelimiter);
          str = str.replace(/%/g, delim).replace(/</g, open).replace(/>/g, close);
          return new RegExp(str);
        }, compile: function() {
          var src;
          var fn;
          var opts = this.opts;
          var prepended = "";
          var appended = "";
          var escapeFn = opts.escapeFunction;
          var ctor;
          var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : "undefined";
          if (!this.source) {
            this.generateSource();
            prepended += '  var __output = "";\n  function __append(s) { if (s !== undefined && s !== null) __output += s }\n';
            if (opts.outputFunctionName) {
              if (!_JS_IDENTIFIER.test(opts.outputFunctionName)) {
                throw new Error("outputFunctionName is not a valid JS identifier.");
              }
              prepended += "  var " + opts.outputFunctionName + " = __append;\n";
            }
            if (opts.localsName && !_JS_IDENTIFIER.test(opts.localsName)) {
              throw new Error("localsName is not a valid JS identifier.");
            }
            if (opts.destructuredLocals && opts.destructuredLocals.length) {
              var destructuring = "  var __locals = (" + opts.localsName + " || {}),\n";
              for (var i = 0; i < opts.destructuredLocals.length; i++) {
                var name = opts.destructuredLocals[i];
                if (!_JS_IDENTIFIER.test(name)) {
                  throw new Error("destructuredLocals[" + i + "] is not a valid JS identifier.");
                }
                if (i > 0) {
                  destructuring += ",\n  ";
                }
                destructuring += name + " = __locals." + name;
              }
              prepended += destructuring + ";\n";
            }
            if (opts._with !== false) {
              prepended += "  with (" + opts.localsName + " || {}) {\n";
              appended += "  }\n";
            }
            appended += "  return __output;\n";
            this.source = prepended + this.source + appended;
          }
          if (opts.compileDebug) {
            src = "var __line = 1\n  , __lines = " + JSON.stringify(this.templateText) + "\n  , __filename = " + sanitizedFilename + ";\ntry {\n" + this.source + "} catch (e) {\n  rethrow(e, __lines, __filename, __line, escapeFn);\n}\n";
          } else {
            src = this.source;
          }
          if (opts.client) {
            src = "escapeFn = escapeFn || " + escapeFn.toString() + ";\n" + src;
            if (opts.compileDebug) {
              src = "rethrow = rethrow || " + rethrow.toString() + ";\n" + src;
            }
          }
          if (opts.strict) {
            src = '"use strict";\n' + src;
          }
          if (opts.debug) {
            console.log(src);
          }
          if (opts.compileDebug && opts.filename) {
            src = src + "\n//# sourceURL=" + sanitizedFilename + "\n";
          }
          try {
            if (opts.async) {
              try {
                ctor = new Function("return (async function(){}).constructor;")();
              } catch (e) {
                if (e instanceof SyntaxError) {
                  throw new Error("This environment does not support async/await");
                } else {
                  throw e;
                }
              }
            } else {
              ctor = Function;
            }
            fn = new ctor(opts.localsName + ", escapeFn, include, rethrow", src);
          } catch (e) {
            if (e instanceof SyntaxError) {
              if (opts.filename) {
                e.message += " in " + opts.filename;
              }
              e.message += " while compiling ejs\n\n";
              e.message += "If the above error is not helpful, you may want to try EJS-Lint:\n";
              e.message += "https://github.com/RyanZim/EJS-Lint";
              if (!opts.async) {
                e.message += "\n";
                e.message += "Or, if you meant to create an async function, pass `async: true` as an option.";
              }
            }
            throw e;
          }
          var returnedFn = opts.client ? fn : function anonymous(data) {
            var include = function(path2, includeData) {
              var d = utils.shallowCopy(utils.createNullProtoObjWherePossible(), data);
              if (includeData) {
                d = utils.shallowCopy(d, includeData);
              }
              return includeFile(path2, opts)(d);
            };
            return fn.apply(opts.context, [data || utils.createNullProtoObjWherePossible(), escapeFn, include, rethrow]);
          };
          if (opts.filename && typeof Object.defineProperty === "function") {
            var filename = opts.filename;
            var basename = path.basename(filename, path.extname(filename));
            try {
              Object.defineProperty(returnedFn, "name", { value: basename, writable: false, enumerable: false, configurable: true });
            } catch (e) {
            }
          }
          return returnedFn;
        }, generateSource: function() {
          var opts = this.opts;
          if (opts.rmWhitespace) {
            this.templateText = this.templateText.replace(/[\r\n]+/g, "\n").replace(/^\s+|\s+$/gm, "");
          }
          this.templateText = this.templateText.replace(/[ \t]*<%_/gm, "<%_").replace(/_%>[ \t]*/gm, "_%>");
          var self2 = this;
          var matches = this.parseTemplateText();
          var d = this.opts.delimiter;
          var o = this.opts.openDelimiter;
          var c = this.opts.closeDelimiter;
          if (matches && matches.length) {
            matches.forEach(function(line, index) {
              var closing;
              if (line.indexOf(o + d) === 0 && line.indexOf(o + d + d) !== 0) {
                closing = matches[index + 2];
                if (!(closing == d + c || closing == "-" + d + c || closing == "_" + d + c)) {
                  throw new Error('Could not find matching close tag for "' + line + '".');
                }
              }
              self2.scanLine(line);
            });
          }
        }, parseTemplateText: function() {
          var str = this.templateText;
          var pat = this.regex;
          var result = pat.exec(str);
          var arr = [];
          var firstPos;
          while (result) {
            firstPos = result.index;
            if (firstPos !== 0) {
              arr.push(str.substring(0, firstPos));
              str = str.slice(firstPos);
            }
            arr.push(result[0]);
            str = str.slice(result[0].length);
            result = pat.exec(str);
          }
          if (str) {
            arr.push(str);
          }
          return arr;
        }, _addOutput: function(line) {
          if (this.truncate) {
            line = line.replace(/^(?:\r\n|\r|\n)/, "");
            this.truncate = false;
          }
          if (!line) {
            return line;
          }
          line = line.replace(/\\/g, "\\\\");
          line = line.replace(/\n/g, "\\n");
          line = line.replace(/\r/g, "\\r");
          line = line.replace(/"/g, '\\"');
          this.source += '    ; __append("' + line + '")\n';
        }, scanLine: function(line) {
          var self2 = this;
          var d = this.opts.delimiter;
          var o = this.opts.openDelimiter;
          var c = this.opts.closeDelimiter;
          var newLineCount = 0;
          newLineCount = line.split("\n").length - 1;
          switch (line) {
            case o + d:
            case o + d + "_":
              this.mode = Template.modes.EVAL;
              break;
            case o + d + "=":
              this.mode = Template.modes.ESCAPED;
              break;
            case o + d + "-":
              this.mode = Template.modes.RAW;
              break;
            case o + d + "#":
              this.mode = Template.modes.COMMENT;
              break;
            case o + d + d:
              this.mode = Template.modes.LITERAL;
              this.source += '    ; __append("' + line.replace(o + d + d, o + d) + '")\n';
              break;
            case d + d + c:
              this.mode = Template.modes.LITERAL;
              this.source += '    ; __append("' + line.replace(d + d + c, d + c) + '")\n';
              break;
            case d + c:
            case "-" + d + c:
            case "_" + d + c:
              if (this.mode == Template.modes.LITERAL) {
                this._addOutput(line);
              }
              this.mode = null;
              this.truncate = line.indexOf("-") === 0 || line.indexOf("_") === 0;
              break;
            default:
              if (this.mode) {
                switch (this.mode) {
                  case Template.modes.EVAL:
                  case Template.modes.ESCAPED:
                  case Template.modes.RAW:
                    if (line.lastIndexOf("//") > line.lastIndexOf("\n")) {
                      line += "\n";
                    }
                }
                switch (this.mode) {
                  case Template.modes.EVAL:
                    this.source += "    ; " + line + "\n";
                    break;
                  case Template.modes.ESCAPED:
                    this.source += "    ; __append(escapeFn(" + stripSemi(line) + "))\n";
                    break;
                  case Template.modes.RAW:
                    this.source += "    ; __append(" + stripSemi(line) + ")\n";
                    break;
                  case Template.modes.COMMENT:
                    break;
                  case Template.modes.LITERAL:
                    this._addOutput(line);
                    break;
                }
              } else {
                this._addOutput(line);
              }
          }
          if (self2.opts.compileDebug && newLineCount) {
            this.currentLine += newLineCount;
            this.source += "    ; __line = " + this.currentLine + "\n";
          }
        } };
        exports4.escapeXML = utils.escapeXML;
        exports4.__express = exports4.renderFile;
        exports4.VERSION = _VERSION_STRING;
        exports4.name = _NAME;
        if (typeof window != "undefined") {
          window.ejs = exports4;
        }
      }, { "../package.json": 6, "./utils": 2, fs: 3, path: 4 }], 2: [function(require2, module4, exports4) {
        "use strict";
        var regExpChars = /[|\\{}()[\]^$+*?.]/g;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var hasOwn = function(obj, key) {
          return hasOwnProperty.apply(obj, [key]);
        };
        exports4.escapeRegExpChars = function(string) {
          if (!string) {
            return "";
          }
          return String(string).replace(regExpChars, "\\$&");
        };
        var _ENCODE_HTML_RULES = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&#34;", "'": "&#39;" };
        var _MATCH_HTML = /[&<>'"]/g;
        function encode_char(c) {
          return _ENCODE_HTML_RULES[c] || c;
        }
        var escapeFuncStr = `var _ENCODE_HTML_RULES = {
      "&": "&amp;"
    , "<": "&lt;"
    , ">": "&gt;"
    , '"': "&#34;"
    , "'": "&#39;"
    }
  , _MATCH_HTML = /[&<>'"]/g;
function encode_char(c) {
  return _ENCODE_HTML_RULES[c] || c;
};
`;
        exports4.escapeXML = function(markup) {
          return markup == void 0 ? "" : String(markup).replace(_MATCH_HTML, encode_char);
        };
        function escapeXMLToString() {
          return Function.prototype.toString.call(this) + ";\n" + escapeFuncStr;
        }
        try {
          if (typeof Object.defineProperty === "function") {
            Object.defineProperty(exports4.escapeXML, "toString", { value: escapeXMLToString });
          } else {
            exports4.escapeXML.toString = escapeXMLToString;
          }
        } catch (err) {
          console.warn("Unable to set escapeXML.toString (is the Function prototype frozen?)");
        }
        exports4.shallowCopy = function(to, from) {
          from = from || {};
          if (to !== null && to !== void 0) {
            for (var p in from) {
              if (!hasOwn(from, p)) {
                continue;
              }
              if (p === "__proto__" || p === "constructor") {
                continue;
              }
              to[p] = from[p];
            }
          }
          return to;
        };
        exports4.shallowCopyFromList = function(to, from, list) {
          list = list || [];
          from = from || {};
          if (to !== null && to !== void 0) {
            for (var i = 0; i < list.length; i++) {
              var p = list[i];
              if (typeof from[p] != "undefined") {
                if (!hasOwn(from, p)) {
                  continue;
                }
                if (p === "__proto__" || p === "constructor") {
                  continue;
                }
                to[p] = from[p];
              }
            }
          }
          return to;
        };
        exports4.cache = { _data: {}, set: function(key, val) {
          this._data[key] = val;
        }, get: function(key) {
          return this._data[key];
        }, remove: function(key) {
          delete this._data[key];
        }, reset: function() {
          this._data = {};
        } };
        exports4.hyphenToCamel = function(str) {
          return str.replace(/-[a-z]/g, function(match) {
            return match[1].toUpperCase();
          });
        };
        exports4.createNullProtoObjWherePossible = function() {
          if (typeof Object.create == "function") {
            return function() {
              return /* @__PURE__ */ Object.create(null);
            };
          }
          if (!({ __proto__: null } instanceof Object)) {
            return function() {
              return { __proto__: null };
            };
          }
          return function() {
            return {};
          };
        }();
      }, {}], 3: [function(require2, module4, exports4) {
      }, {}], 4: [function(require2, module4, exports4) {
        (function(process) {
          function normalizeArray(parts, allowAboveRoot) {
            var up = 0;
            for (var i = parts.length - 1; i >= 0; i--) {
              var last = parts[i];
              if (last === ".") {
                parts.splice(i, 1);
              } else if (last === "..") {
                parts.splice(i, 1);
                up++;
              } else if (up) {
                parts.splice(i, 1);
                up--;
              }
            }
            if (allowAboveRoot) {
              for (; up--; up) {
                parts.unshift("..");
              }
            }
            return parts;
          }
          exports4.resolve = function() {
            var resolvedPath = "", resolvedAbsolute = false;
            for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
              var path = i >= 0 ? arguments[i] : process.cwd();
              if (typeof path !== "string") {
                throw new TypeError("Arguments to path.resolve must be strings");
              } else if (!path) {
                continue;
              }
              resolvedPath = path + "/" + resolvedPath;
              resolvedAbsolute = path.charAt(0) === "/";
            }
            resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p) {
              return !!p;
            }), !resolvedAbsolute).join("/");
            return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
          };
          exports4.normalize = function(path) {
            var isAbsolute = exports4.isAbsolute(path), trailingSlash = substr(path, -1) === "/";
            path = normalizeArray(filter(path.split("/"), function(p) {
              return !!p;
            }), !isAbsolute).join("/");
            if (!path && !isAbsolute) {
              path = ".";
            }
            if (path && trailingSlash) {
              path += "/";
            }
            return (isAbsolute ? "/" : "") + path;
          };
          exports4.isAbsolute = function(path) {
            return path.charAt(0) === "/";
          };
          exports4.join = function() {
            var paths = Array.prototype.slice.call(arguments, 0);
            return exports4.normalize(filter(paths, function(p, index) {
              if (typeof p !== "string") {
                throw new TypeError("Arguments to path.join must be strings");
              }
              return p;
            }).join("/"));
          };
          exports4.relative = function(from, to) {
            from = exports4.resolve(from).substr(1);
            to = exports4.resolve(to).substr(1);
            function trim(arr) {
              var start = 0;
              for (; start < arr.length; start++) {
                if (arr[start] !== "") break;
              }
              var end = arr.length - 1;
              for (; end >= 0; end--) {
                if (arr[end] !== "") break;
              }
              if (start > end) return [];
              return arr.slice(start, end - start + 1);
            }
            var fromParts = trim(from.split("/"));
            var toParts = trim(to.split("/"));
            var length = Math.min(fromParts.length, toParts.length);
            var samePartsLength = length;
            for (var i = 0; i < length; i++) {
              if (fromParts[i] !== toParts[i]) {
                samePartsLength = i;
                break;
              }
            }
            var outputParts = [];
            for (var i = samePartsLength; i < fromParts.length; i++) {
              outputParts.push("..");
            }
            outputParts = outputParts.concat(toParts.slice(samePartsLength));
            return outputParts.join("/");
          };
          exports4.sep = "/";
          exports4.delimiter = ":";
          exports4.dirname = function(path) {
            if (typeof path !== "string") path = path + "";
            if (path.length === 0) return ".";
            var code = path.charCodeAt(0);
            var hasRoot = code === 47;
            var end = -1;
            var matchedSlash = true;
            for (var i = path.length - 1; i >= 1; --i) {
              code = path.charCodeAt(i);
              if (code === 47) {
                if (!matchedSlash) {
                  end = i;
                  break;
                }
              } else {
                matchedSlash = false;
              }
            }
            if (end === -1) return hasRoot ? "/" : ".";
            if (hasRoot && end === 1) {
              return "/";
            }
            return path.slice(0, end);
          };
          function basename(path) {
            if (typeof path !== "string") path = path + "";
            var start = 0;
            var end = -1;
            var matchedSlash = true;
            var i;
            for (i = path.length - 1; i >= 0; --i) {
              if (path.charCodeAt(i) === 47) {
                if (!matchedSlash) {
                  start = i + 1;
                  break;
                }
              } else if (end === -1) {
                matchedSlash = false;
                end = i + 1;
              }
            }
            if (end === -1) return "";
            return path.slice(start, end);
          }
          exports4.basename = function(path, ext) {
            var f = basename(path);
            if (ext && f.substr(-1 * ext.length) === ext) {
              f = f.substr(0, f.length - ext.length);
            }
            return f;
          };
          exports4.extname = function(path) {
            if (typeof path !== "string") path = path + "";
            var startDot = -1;
            var startPart = 0;
            var end = -1;
            var matchedSlash = true;
            var preDotState = 0;
            for (var i = path.length - 1; i >= 0; --i) {
              var code = path.charCodeAt(i);
              if (code === 47) {
                if (!matchedSlash) {
                  startPart = i + 1;
                  break;
                }
                continue;
              }
              if (end === -1) {
                matchedSlash = false;
                end = i + 1;
              }
              if (code === 46) {
                if (startDot === -1) startDot = i;
                else if (preDotState !== 1) preDotState = 1;
              } else if (startDot !== -1) {
                preDotState = -1;
              }
            }
            if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
              return "";
            }
            return path.slice(startDot, end);
          };
          function filter(xs, f) {
            if (xs.filter) return xs.filter(f);
            var res = [];
            for (var i = 0; i < xs.length; i++) {
              if (f(xs[i], i, xs)) res.push(xs[i]);
            }
            return res;
          }
          var substr = "ab".substr(-1) === "b" ? function(str, start, len) {
            return str.substr(start, len);
          } : function(str, start, len) {
            if (start < 0) start = str.length + start;
            return str.substr(start, len);
          };
        }).call(this, require2("_process"));
      }, { _process: 5 }], 5: [function(require2, module4, exports4) {
        var process = module4.exports = {};
        var cachedSetTimeout;
        var cachedClearTimeout;
        function defaultSetTimout() {
          throw new Error("setTimeout has not been defined");
        }
        function defaultClearTimeout() {
          throw new Error("clearTimeout has not been defined");
        }
        (function() {
          try {
            if (typeof setTimeout === "function") {
              cachedSetTimeout = setTimeout;
            } else {
              cachedSetTimeout = defaultSetTimout;
            }
          } catch (e) {
            cachedSetTimeout = defaultSetTimout;
          }
          try {
            if (typeof clearTimeout === "function") {
              cachedClearTimeout = clearTimeout;
            } else {
              cachedClearTimeout = defaultClearTimeout;
            }
          } catch (e) {
            cachedClearTimeout = defaultClearTimeout;
          }
        })();
        function runTimeout(fun) {
          if (cachedSetTimeout === setTimeout) {
            return setTimeout(fun, 0);
          }
          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
          }
          try {
            return cachedSetTimeout(fun, 0);
          } catch (e) {
            try {
              return cachedSetTimeout.call(null, fun, 0);
            } catch (e2) {
              return cachedSetTimeout.call(this, fun, 0);
            }
          }
        }
        function runClearTimeout(marker) {
          if (cachedClearTimeout === clearTimeout) {
            return clearTimeout(marker);
          }
          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
          }
          try {
            return cachedClearTimeout(marker);
          } catch (e) {
            try {
              return cachedClearTimeout.call(null, marker);
            } catch (e2) {
              return cachedClearTimeout.call(this, marker);
            }
          }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;
        function cleanUpNextTick() {
          if (!draining || !currentQueue) {
            return;
          }
          draining = false;
          if (currentQueue.length) {
            queue = currentQueue.concat(queue);
          } else {
            queueIndex = -1;
          }
          if (queue.length) {
            drainQueue();
          }
        }
        function drainQueue() {
          if (draining) {
            return;
          }
          var timeout = runTimeout(cleanUpNextTick);
          draining = true;
          var len = queue.length;
          while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
              if (currentQueue) {
                currentQueue[queueIndex].run();
              }
            }
            queueIndex = -1;
            len = queue.length;
          }
          currentQueue = null;
          draining = false;
          runClearTimeout(timeout);
        }
        process.nextTick = function(fun) {
          var args = new Array(arguments.length - 1);
          if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
            }
          }
          queue.push(new Item(fun, args));
          if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
          }
        };
        function Item(fun, array) {
          this.fun = fun;
          this.array = array;
        }
        Item.prototype.run = function() {
          this.fun.apply(null, this.array);
        };
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = "";
        process.versions = {};
        function noop() {
        }
        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;
        process.listeners = function(name) {
          return [];
        };
        process.binding = function(name) {
          throw new Error("process.binding is not supported");
        };
        process.cwd = function() {
          return "/";
        };
        process.chdir = function(dir) {
          throw new Error("process.chdir is not supported");
        };
        process.umask = function() {
          return 0;
        };
      }, {}], 6: [function(require2, module4, exports4) {
        module4.exports = { name: "ejs", description: "Embedded JavaScript templates", keywords: ["template", "engine", "ejs"], version: "3.1.9", author: "Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)", license: "Apache-2.0", bin: { ejs: "./bin/cli.js" }, main: "./lib/ejs.js", jsdelivr: "ejs.min.js", unpkg: "ejs.min.js", repository: { type: "git", url: "git://github.com/mde/ejs.git" }, bugs: "https://github.com/mde/ejs/issues", homepage: "https://github.com/mde/ejs", dependencies: { jake: "^10.8.5" }, devDependencies: { browserify: "^16.5.1", eslint: "^6.8.0", "git-directory-deploy": "^1.5.1", jsdoc: "^4.0.2", "lru-cache": "^4.0.1", mocha: "^10.2.0", "uglify-js": "^3.3.16" }, engines: { node: ">=0.10.0" }, scripts: { test: "mocha -u tdd" } };
      }, {}] }, {}, [1])(1);
    });
  }
});

// main.js
var main_exports = {};
__export(main_exports, {
  default: () => SmartTemplatesPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = __toESM(require("obsidian"), 1);

// ../jsbrains/smart-templates/smart_templates.js
var import_ejs_min = __toESM(require_ejs_min(), 1);
var import_smart_chat_model = __toESM(require_smart_chat_model(), 1);
var SmartTemplates = class _SmartTemplates {
  constructor(env = {}, opts = {}) {
    this.env = env;
    this.opts = opts;
    this.adapter = opts.adapter || null;
    this.file_type_adapters = {};
    if (opts.file_type_adapters) {
      for (const adapter_class of opts.file_type_adapters) {
        const adapter = new adapter_class(this);
        for (const file_type of adapter.file_types) {
          this.file_type_adapters[file_type] = adapter;
        }
      }
    }
    if (opts.read_adapter) this.read_adapter = opts.read_adapter;
    else throw new Error("opts.read_adapter is required (ex. async (path) => await fs.promises.readFile(path, 'utf8'))");
    this._templates = {};
  }
  static async load(env, opts = {}) {
    env.smart_templates = new _SmartTemplates(env, opts);
    await env.smart_templates.init();
    return env.smart_templates;
  }
  async init() {
  }
  get request_adapter() {
    return this.opts.request_adapter || null;
  }
  get settings() {
    return this.env.settings;
  }
  get var_prompts() {
    return this.settings.smart_templates?.var_prompts || {};
  }
  get api_key() {
    return this.settings.smart_templates?.api_key;
  }
  get file_types() {
    return [
      ...Object.keys(this.file_type_adapters),
      "ejs"
    ];
  }
  get_adapter_by(file_type) {
    return this.file_type_adapters[file_type];
  }
  // EJS template base syntax engine
  async get_template(template, opts = {}) {
    if (typeof template !== "string") throw new Error("Template must be a string");
    if (this._templates[template]) template = this._templates[template];
    const adapter = this.get_adapter_by(opts.file_type || template.split(".").pop());
    if (typeof adapter?.get_template === "function") return await adapter.get_template(template);
    if (!template.includes("\n") && this.file_types.includes(template.split(".").pop())) {
      template = await this.load_template(template);
    }
    if (typeof adapter?.convert_to_ejs === "function") {
      template = adapter.convert_to_ejs(template);
    }
    return template;
  }
  async load_template(pointer) {
    try {
      let template = await this.read_adapter(pointer);
      return template;
    } catch (error) {
      console.error(`Error loading template from ${pointer}:`, error.message, error.stack);
      return "";
    }
  }
  // Get variables from EJS template
  async get_variables(pointer, opts = {}) {
    let variables = [];
    const file_type = opts.file_type || pointer.split(".").pop();
    const adapter = this.get_adapter_by(file_type);
    if (adapter && typeof adapter.get_variables === "function") {
      return await adapter.get_variables(pointer, opts);
    }
    const template = await this.get_template(pointer, opts);
    const regex = /<%[-_=]?\s*=?\s*([\w.]+(\[\w+])?)\s*[-_]?%>/g;
    let match;
    while ((match = regex.exec(template)) !== null) {
      const variable = match[1];
      const mainVariable = variable.split(/\[|\./)[0].trim();
      const prompt = this.var_prompts[mainVariable]?.prompt || null;
      variables.push({ name: mainVariable, prompt });
    }
    return variables;
  }
  async get_chatml_tools(variables, opts = {}) {
    const properties = variables.reduce((acc, variable) => {
      acc[variable.name] = { type: "string", description: variable.prompt || "TODO" };
      return acc;
    }, {});
    return {
      type: "function",
      function: {
        name: "generate_content",
        description: "Generate arguments based on the CONTEXT." + (opts.system_prompt ? ` ${opts.system_prompt}` : ""),
        parameters: {
          type: "object",
          properties,
          required: variables.map((variable) => variable.name)
        }
      }
    };
  }
  // Get view data using the function call output
  async get_view_data(output) {
    if (this.adapter && typeof this.adapter.get_view_data === "function") {
      return this.adapter.get_view_data(output);
    }
    return output;
  }
  // Render template with context and options
  async render(template, context, opts = {}) {
    const template_content = await this.get_template(template, opts);
    const variables = await this.get_variables(template, opts);
    const mergedContext = { context, ...opts };
    variables.forEach((variable) => {
      mergedContext[variable.name] = "EMPTY";
    });
    const functionCallRequest = {
      messages: [
        {
          role: "user",
          content: `---CONTEXT---
${context}
---END CONTEXT---`
        }
      ],
      tools: [
        await this.get_chatml_tools(variables, opts)
      ],
      tool_choice: {
        type: "function",
        function: {
          name: "generate_content"
        }
      },
      stream: false
    };
    if (opts.system_prompt) {
      functionCallRequest.messages[0].content += `
---IMPORTANT---
${opts.system_prompt}
---END IMPORTANT---`;
      functionCallRequest.messages.unshift({ role: "system", content: opts.system_prompt });
    }
    const chatModel = new import_smart_chat_model.SmartChatModel(this.env, this.chat_model_platform_key, this.model_config);
    if (this.request_adapter) chatModel._request_adapter = this.request_adapter;
    const replacementValues = await chatModel.complete(functionCallRequest);
    Object.entries(replacementValues).forEach(([key, value]) => {
      if (typeof value !== "string" && typeof value !== "number") {
        console.warn(`Replacement value is not a string or number: `, JSON.stringify(value, null, 2));
        if (Array.isArray(value)) {
          replacementValues[key] = value.join("\n");
        } else {
          replacementValues[key] = value ? JSON.stringify(value) : "";
        }
      }
    });
    Object.assign(mergedContext, replacementValues);
    return import_ejs_min.default.render(template_content, mergedContext);
  }
  get model_config() {
    if (this.env.smart_templates_plugin?.settings?.[this.chat_model_platform_key]) return this.env.smart_templates_plugin.settings[this.chat_model_platform_key];
    if (this.env.settings?.[this.chat_model_platform_key]) return this.env.settings[this.chat_model_platform_key];
    return { api_key: this.api_key };
  }
  get chat_model_platform_key() {
    if (this.env.smart_templates_plugin?.settings?.chat_model_platform_key) return this.env.smart_templates_plugin.settings.chat_model_platform_key;
    if (this.env.settings?.smart_templates?.chat_model_platform_key) return this.env.settings.smart_templates.chat_model_platform_key;
    return this.env.settings?.chat_model_platform_key || "openai";
  }
  add_template(path) {
    const file_name = path.split("/").pop().split(".").shift();
    this._templates[file_name] = path;
  }
  get templates() {
    return Object.keys(this._templates);
  }
};

// ../jsbrains/smart-templates/adapters/markdown.js
var MarkdownAdapter = class {
  constructor(main) {
    this.main = main;
  }
  get file_types() {
    return ["md"];
  }
  convert_to_ejs(template) {
    return convert_to_ejs(template);
  }
  async get_variables(template) {
    if (!template.includes("\n") && this.file_types.includes(template.split(".").pop())) {
      template = await this.main.load_template(template);
    }
    const variables = [];
    const regex = /{{\s*([^}]+)\s*}}/gi;
    const matches = template.match(regex);
    var i = 1;
    matches?.forEach((match, index) => {
      if (match.includes('"')) {
        variables.push({
          name: `var_${i++}`,
          prompt: match.replace(/{{\s*"([^"]+)"\s*}}/g, "$1").trim(),
          inline: true
        });
      } else {
        let name = match.replace(/{{\s*=?\s*([\w\s.-]+(\[\w+])?)\s*}}/g, "$1").trim();
        const prompt_key = name.replace(/[-\s]/g, "_");
        const prompt = (this.main.var_prompts[prompt_key]?.prompt || name + " prompt").trim();
        variables.push({ name: prompt_key, prompt });
      }
    });
    return variables;
  }
};
function convert_to_ejs(content) {
  const regex = /{{\s*"([^"]+)"\s*}}/g;
  const matches = content.match(regex);
  matches?.forEach((match, index) => {
    content = content.replace(match, `<%- var_${index + 1} %>`);
  });
  content = content.replace(/{{\s*([\w\s-]+)\s*}}/g, (match, p1) => `<%- ${p1.trim().replace(/[\s-]+/g, "_")} %>`);
  return content;
}

// main.js
var import_smart_chat_model2 = __toESM(require_smart_chat_model(), 1);

// dist/views.json
var views_default = {
  README: '# Smart Templates for Obsidian\n\nSmart Templates allows you to create and use configurable templates utilizing Smart Environments.\n\nSmart Templates is a companion plugin to [Smart Connections](https://github.com/brianpetro/obsidian-smart-connections/), a plugin for Obsidian that implements a Smart Environment for utilizing AI to enhance your notes.\n\n## Features\n\nCreate and use customizable templates with dynamic variables.\n\n- **AI-Powered**: Leverage AI models to generate content based on your templates, variable prompts, and current context (note or highlighted text).\n- **Variable Prompts**: Define prompts for each variable for more control over content generation.\n- **Flexible Configuration**: Choose your preferred AI model platform.\n- **Manual Prompt Input**: Use `{{ "Your prompt here" }}` syntax for on-the-fly custom prompts within templates.\n- **EJS Syntax Support**: Utilize EJS syntax for more advanced template logic and formatting.\n\n*More features coming soon...*:\n- Integration with [Smart Memos](https://github.com/Mossy1022/Smart-Memos)\n- Integration with Smart Connections to retrieve additional context\n- Integration with [Smart Connections Visualizer](https://github.com/Mossy1022/Smart-Connections-Visualizer) for visual selection of nodes to use as context\n\n## Installation\n\nCurrently in beta. Requires installing manually or via BRAT.\n\n**Smart Connections Supporters**: install using the "Easy Install" button in the early-release (version `2.2`) plugin settings.\n\n## Usage\n\n1. Set up your preferred AI model platform in the plugin settings.\n2. Create smart templates in the designated templates folder.\n3. Use the command palette to run your smart templates on your notes or selections.\n\n## Using Templates\n- A command is created for each template in the templates folder.\n- The command is run on the current note or highlighted selection (if any).\n- The template is rendered and the resulting content is inserted at the current cursor location.\n\n## Creating Templates\n\n1. Navigate to your designated templates folder.\n2. Create a new Markdown file for your template.\n3. Use special syntax to define dynamic parts of your template:\n   - `{{ variable_name }}`: Simple bracket syntax for predefined variables\n   - `{{ "Your custom prompt here" }}`: Manual prompt input syntax\n   - `<%- ... %>`: EJS syntax for advanced logic and formatting\n\nExample template:\n```markdown\n# Default Smart Template\n\n### Summary\n{{ summary }} <- Simple bracket syntax\n\n### Notes\n{{ notes }}\n\n### Chart\n<%- \'```mermaid\' %> <- EJS syntax is also available\n{{ mermaid }}\n<%- \'```\' %>\n```\n\n### Custom Prompt\n{{ "Your custom prompt here" }} <- Manual prompt input syntax\n\n## Settings\n![](./assets/Smart%20Templates%20Settings.png)\n\n### Model Platform\n\nChoose your preferred AI model platform (e.g., OpenAI) and enter your API key in the settings.\n\n### Templates Folder\n\nSpecify the folder where your smart templates will be stored.\n\n### Variable Prompts\n\nCustomize the prompts for template variables like summary, notes, and mermaid charts.\n\n## How it Works\n\n```mermaid\ngraph TD\n  A[Smart Template] -->|Contains| B(Variable Placeholders)\n  C[var_prompts] -->|Defines| D(Variable Prompts)\n  E[Current Context] -->|Provides| F(Content for Processing)\n  B --> G{Smart Templates Plugin}\n  D --> G\n  F --> G\n  G -->|Processes| H(AI Model)\n  H -->|Generates| I(Variable Content)\n  I --> J{Template Rendering}\n  A --> J\n  J -->|Produces| K[Final Output]\n```\n\n## About\n\nCreated by [\u{1F334} Brian](https://x.com/wfhbrian) as a companion plugin to [Smart Connections](https://github.com/brianpetro/obsidian-smart-connections/), a plugin for Obsidian that implements a Smart Environment for utilizing AI to enhance your notes.\n\n### Development\n\nUses [JSBrains](https://jsbrains.org/) to minimize dependencies and provide an easily adaptable architecture that supports new models and platforms.\n\n- [Smart Templates](https://github.com/brianpetro/jsbrains/tree/main/smart-templates)\n- [Smart Chat Model](https://github.com/brianpetro/jsbrains/tree/main/smart-chat-model)\n\n',
  smart_templates_model_settings: '  <div class="setting-component"\n    data-name="Model platform"\n    data-setting="chat_model_platform_key"\n    data-type="dropdown"\n    data-description="Select a model platform to use with Smart Chat."\n    data-callback="changed_smart_chat_platform"\n    <%- chat_platforms.map((platform, i) => `data-option-${i + 1}="${platform.key}|${platform.description}"`).join(\'\\n\') %>\n  ></div>\n  <% if(chat_platform?.fetch_models) { %>\n    <% if(settings[settings.chat_model_platform_key]?.api_key) { %>\n      <div class="setting-component"\n        data-name="Model name"\n        data-type="dropdown"\n        data-setting="<%= settings.chat_model_platform_key %>.model_name"\n        <%- platform_chat_models.map((model, i) => `data-option-${i}="${model.key}|${model.model_name} (${model.description})"`).join(\'\\n\') %>\n      ></div>\n    <% } %>\n    <% if(!platform_chat_models.length) { %>\n      <div class="setting-component"\n        data-name="Refresh models list"\n        data-type="button"\n        data-callback="changed_smart_chat_platform"\n      ></div>\n    <% } %>\n    <% if(can_import_from_smart_connections) { %>\n      <div class="setting-component"\n        data-name="Import model config from Smart Connections"\n        data-type="button"\n        data-callback="import_model_config_from_smart_connections"\n      ></div>\n    <% } %>\n    <div class="setting-component"\n      data-name="<%= chat_platform.description %> API key"\n      data-type="password"\n      data-setting="<%= settings.chat_model_platform_key %>.api_key"\n      <% if(chat_platform.signup_url) { %>\n        data-description="<a href=\'<%= chat_platform.signup_url %>\'>Get API Key</a> for <%= chat_platform.description %>."\n      <% } else { %>\n        data-description="API Key for <%= chat_platform.description %>."\n      <% } %>\n      data-placeholder="Enter an API key"\n      data-button="Save"\n      data-callback="changed_smart_chat_platform"\n    ></div>\n  <% } %>',
  smart_templates_settings: '<div id="smart-templates-settings">\n  <h2>AI model settings</h2>\n  <div class="smart-templates-model-settings">\n    <% if(model_settings) { %>\n      <%- model_settings %>\n    <% } else { %>\n      Loading model settings...\n    <% } %>\n  </div>\n  <h2>Smart Templates folder</h2>\n  <div class="setting-component"\n    data-name="Templates Folder"\n    data-setting="templates_folder"\n    data-type="text"\n  ></div>\n  <h2>Configure variable prompts</h2>\n  <div id="smart-templates-var-prompts">\n    <% var_prompts.forEach((var_prompt, i) => { %>\n      <% if(i === 0) { %>\n        <h3>Active</h3>\n      <% } else if(i > 0 && var_prompts[i-1].active !== var_prompt.active) { %>\n        <h3>Inactive</h3>\n      <% } %>\n      <div class="setting-component"\n        data-name="<%= var_prompt.name %>"\n        data-type="textarea"\n        data-setting="var_prompts.<%= var_prompt.name %>.prompt"\n        data-max-length="300"\n      ></div>\n      <% // if !var_prompt.active, add a button to remove it %>\n      <% if(!var_prompt.active) { %>\n        <div class="setting-component"\n          data-name="Remove"\n          data-value="<%= var_prompt.name %>"\n          data-type="button"\n          data-callback="remove_var_prompt"\n        ></div>\n      <% } %>\n    <% }) %>\n  </div>\n</div>'
};

// dist/templates.json
var templates_default = {
  overview: "### Summary\n{{ summary }}\n\n### Key Points\n{{ key points }}\n\n### Chart\n<%- '```mermaid' %>\n{{ mermaid }}\n<%- '```' %>\n",
  tags: '---\ntags_as_context: "true"\nsystem_prompt: Tags should be output in markdown bullet list format. Include the reason for each tag in parentheses.\n---\n##### recommended existing tags\n{{ TAGS EXISTING }}\n\n##### recommended new tags\n{{ TAGS NEW }}\n'
};

// templates/var_prompts.json
var var_prompts_default = {
  var_prompts: {
    summary: {
      prompt: "A summary paragraph about the content."
    },
    key_points: {
      prompt: "Concise notes about the content."
    },
    mermaid: {
      prompt: "Mermaid chart representation of the content. Ex. graph TD\nA --> B\nB --> C"
    },
    TAGS_EXISTING: {
      prompt: "List 3 existing tags that might be most relevant to the content."
    },
    TAGS_NEW: {
      prompt: "List 3 new tags that might be most relevant to the content."
    }
  }
};

// ../jsbrains/smart-environment/smart_env.js
var SmartEnv = class {
  constructor(main, opts = {}) {
    const main_name = camel_case_to_snake_case(main.constructor.name);
    this[main_name] = main;
    this.mains = [main_name];
    this.main = main;
    this.plugin = this.main;
    Object.assign(this, opts);
  }
  static create(main, opts = {}) {
    const global_ref = opts.global_ref || window || global;
    const existing_smart_env = global_ref.smart_env;
    if (existing_smart_env) {
      const main_name = camel_case_to_snake_case(main.constructor.name);
      existing_smart_env[main_name] = main;
      existing_smart_env.mains.push(main_name);
      Object.keys(opts).forEach((key) => {
        if (typeof opts[key] === "object") {
          if (Array.isArray(opts[key])) {
            existing_smart_env[key] = [
              ...existing_smart_env[key] || [],
              ...opts[key]
            ];
          } else if (opts[key] !== null) {
            existing_smart_env[key] = {
              ...existing_smart_env[key] || {},
              ...opts[key]
            };
          }
        } else {
          if (existing_smart_env[key]) console.warn(`SmartEnv: Overwriting existing property ${key} with ${opts[key]}`);
          existing_smart_env[key] = opts[key];
        }
      });
      global_ref.smart_env = existing_smart_env;
    } else {
      global_ref.smart_env = new this(main, opts);
    }
    main.env = global_ref.smart_env;
    return global_ref.smart_env;
  }
  get settings() {
    const settings = {};
    this.mains.forEach((main) => {
      if (!settings[main]) settings[main] = {};
      Object.keys(this[main].settings || {}).forEach((setting) => {
        settings[main][setting] = this[main].settings[setting];
      });
    });
    return settings;
  }
};
function camel_case_to_snake_case(str) {
  const result = str.replace(/([A-Z])/g, (match) => `_${match.toLowerCase()}`).replace(/^_/, "");
  return result;
}

// ../jsbrains/smart-setting/smart_settings.js
var import_ejs_min2 = __toESM(require_ejs_min2(), 1);
var SmartSettings = class {
  constructor(env, container, opts = { template_name: "smart_settings" }) {
    this.env = env;
    this.main = opts.main || this.env.plugin;
    this.plugin = this.main;
    this.container = container;
    if (typeof opts === "string") opts = { template_name: opts };
    this.template_name = opts.template_name;
    this.ejs = this.env.ejs || import_ejs_min2.default;
    this.views = opts.views || this.env.views;
    this.templates = this.env.templates;
  }
  get settings() {
    return this.main.settings;
  }
  set settings(settings) {
    this.main.settings = settings;
  }
  async render() {
    const view_data = typeof this.get_view_data === "function" ? await this.get_view_data() : this.view_data;
    this.render_template(view_data);
    this.render_components();
  }
  render_template(view_data = null) {
    if (!this.template) throw new Error(`Settings template not found.`);
    this.container.empty();
    this.container.innerHTML = this.ejs.render(this.template, view_data || this.view_data, { context: this });
  }
  async update(setting, value) {
    console.log("saving setting: " + setting);
    let settings = { ...this.settings };
    if (setting.includes(".")) {
      let parts = setting.split(".");
      let obj = settings;
      for (let i = 0; i < parts.length - 1; i++) {
        if (!obj[parts[i]]) obj[parts[i]] = {};
        obj = obj[parts[i]];
      }
      obj[parts[parts.length - 1]] = typeof value === "string" ? value.trim() : value;
    } else {
      settings[setting] = typeof value === "string" ? value.trim() : value;
    }
    this.settings = settings;
    await this.main.save_settings(true);
    console.log("saved settings");
  }
  render_components() {
    if (!this.main.obsidian.Setting) console.log("missing Obsidian");
    this.container.querySelectorAll(".setting-component").forEach((elm) => {
      const setting_elm = new this.main.obsidian.Setting(elm);
      if (elm.dataset.name) setting_elm.setName(elm.dataset.name);
      if (elm.dataset.description) setting_elm.descEl.innerHTML = elm.dataset.description;
      const setting = elm.dataset.setting;
      if (elm.dataset.type === "text") {
        setting_elm.addText((text) => {
          text.setPlaceholder(elm.dataset.placeholder || "");
          text.setValue(this.get_setting(setting));
          let debounceTimer;
          if (elm.dataset.button) {
            setting_elm.addButton((button) => {
              button.setButtonText(elm.dataset.button);
              button.onClick(async () => this.handle_on_change(setting, text.getValue(), elm));
            });
          } else {
            text.onChange(async (value) => {
              clearTimeout(debounceTimer);
              debounceTimer = setTimeout(() => this.handle_on_change(setting, value, elm), 2e3);
            });
          }
        });
      } else if (elm.dataset.type === "password") {
        setting_elm.addText((text) => {
          text.inputEl.type = "password";
          text.setPlaceholder(elm.dataset.placeholder || "");
          const setting_value = this.get_setting(setting);
          if (setting_value) text.setValue(setting_value);
          text.onChange(async (value) => this.handle_on_change(setting, value, elm));
        });
      } else if (elm.dataset.type === "number") {
        setting_elm.addText((number) => {
          number.inputEl.type = "number";
          number.setPlaceholder(elm.dataset.placeholder || "");
          number.inputEl.value = parseInt(this.get_setting(setting));
          number.inputEl.min = elm.dataset.min || 0;
          if (elm.dataset.max) number.inputEl.max = elm.dataset.max;
          let debounceTimer;
          number.onChange(async (value) => {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => this.handle_on_change(setting, parseInt(value), elm), 2e3);
          });
        });
      } else if (elm.dataset.type === "dropdown") {
        setting_elm.addDropdown((dropdown) => {
          Object.entries(elm.dataset).filter(([k, v]) => k.startsWith("option")).forEach(([k, v]) => {
            const [value, name] = v.split("|");
            dropdown.addOption(value, name || value);
          });
          dropdown.onChange(async (value) => this.handle_on_change(setting, value, elm));
          dropdown.setValue(this.get_setting(setting));
        });
      } else if (elm.dataset.type === "button") {
        setting_elm.addButton((button) => {
          button.setButtonText(elm.dataset.btnText || elm.dataset.name);
          button.onClick(async () => {
            if (elm.dataset.confirm) {
              const confirmation_message = elm.dataset.confirm;
              if (!confirm(confirmation_message)) return;
            }
            if (elm.dataset.href) window.open(elm.dataset.href);
            if (elm.dataset.callback) this[elm.dataset.callback](setting, null, elm);
          });
        });
      } else if (elm.dataset.type === "toggle") {
        setting_elm.addToggle((toggle) => {
          toggle.setValue(this.get_setting(setting));
          toggle.onChange(async (value) => this.handle_on_change(setting, value, elm));
        });
      } else if (elm.dataset.type === "textarea") {
        setting_elm.addTextArea((textarea) => {
          textarea.setValue(this.get_setting(setting));
          textarea.onChange(async (value) => this.handle_on_change(setting, value, elm));
          if (elm.dataset.maxLength) textarea.inputEl.maxLength = elm.dataset.maxLength;
        });
      }
      if (elm.dataset.disabled) setting_elm.setDisabled(true);
    });
    console.log("rendered components");
  }
  async handle_on_change(setting, value, elm) {
    await this.update(setting, value);
    if (elm.dataset.callback) this[elm.dataset.callback](setting, value, elm);
  }
  get_setting(setting) {
    if (setting.includes(".")) {
      let parts = setting.split(".");
      let obj = this.settings;
      for (let part of parts.slice(0, -1)) {
        if (obj[part] === void 0) return this.plugin.constructor.defaults[setting];
        obj = obj[part];
      }
      return obj[parts[parts.length - 1]] ?? this.plugin.constructor.defaults[setting];
    } else {
      return this.settings[setting] ?? this.plugin.constructor.defaults[setting];
    }
  }
  // override in subclass (required)
  get template() {
    return "";
  }
  // ejs template string
  get view_data() {
    return {};
  }
  // object properties available in template
};

// main.js
var {
  addIcon,
  Keymap,
  MarkdownRenderer,
  Notice,
  Plugin,
  PluginSettingTab,
  request,
  requestUrl,
  Setting,
  TAbstractFile,
  TFile
} = import_obsidian.default;
var SmartTemplatesPlugin = class extends Plugin {
  async onload() {
    this.app.workspace.onLayoutReady(this.initialize.bind(this));
  }
  // initialize when layout is ready
  static get defaults() {
    return {
      openai: {},
      chat_model_platform_key: "openai",
      templates_folder: "smart-templates",
      var_prompts: {
        "summary": { prompt: "A brief summary paragraph." },
        "notes": { prompt: "Concise notes in list format." },
        "mermaid": { prompt: "A mermaid chart representing the content. Ex. graph TD\nA --> B\nB --> C" }
      }
    };
  }
  async initialize() {
    this.obsidian = import_obsidian.default;
    await this.load_settings();
    await this.ensure_templates_folder();
    await this.include_default_templates();
    SmartEnv.create(this, {
      global_ref: window
    });
    await this.load_smart_templates();
    this.addSettingTab(new SmartTemplatesSettingsTab(this.app, this));
    this.add_commands();
  }
  async load_smart_templates() {
    await SmartTemplates.load(this.env, {
      request_adapter: requestUrl,
      // use obsidian's requestUrl for requests
      read_adapter: this.app.vault.adapter.read.bind(this.app.vault.adapter),
      file_type_adapters: [
        MarkdownAdapter
      ]
    });
    await this.get_var_prompts_settings();
  }
  async load_settings() {
    this.settings = {
      ...this.constructor.defaults,
      ...await this.loadData()
    };
    this.settings = {
      ...this.settings,
      ...await this.load_var_prompts()
    };
  }
  async load_var_prompts() {
    const var_prompts_path = `${this.settings.templates_folder}/var_prompts.json`;
    try {
      if (await this.app.vault.adapter.exists(var_prompts_path)) {
        const var_prompts_file = await this.app.vault.adapter.read(var_prompts_path);
        if (var_prompts_file) {
          return JSON.parse(var_prompts_file);
        }
      }
    } catch (error) {
      console.error(`Error loading var_prompts from ${var_prompts_path}:`, error);
    }
    return {};
  }
  async save_settings(rerender = false) {
    await this.saveData(this.settings);
    await this.app.vault.adapter.write(
      `${this.settings.templates_folder}/var_prompts.json`,
      JSON.stringify({ var_prompts: this.settings.var_prompts }, null, 2)
    );
    await this.load_settings();
  }
  get_templates_from_folder(templates_folder_path) {
    const templates = [];
    const folder = this.app.vault.getFolderByPath(templates_folder_path);
    if (!folder) return templates;
    folder.children.forEach((file_or_folder) => {
      if (file_or_folder instanceof this.obsidian.TFile) {
        this.env.smart_templates.add_template(file_or_folder.path);
        templates.push(file_or_folder);
      } else if (file_or_folder instanceof this.obsidian.TFolder) {
        templates.push(...this.get_templates_from_folder(file_or_folder.path));
      }
    });
    return templates;
  }
  async get_var_prompts_settings() {
    this.active_template_vars = [];
    const templates = this.get_templates_from_folder(this.settings.templates_folder);
    for (const template of templates) {
      const template_vars = await this.env.smart_templates.get_variables(template.path);
      template_vars.filter(({ inline }) => !inline).forEach(({ name, prompt }) => {
        if (!this.settings.var_prompts) this.settings.var_prompts = {};
        if (!this.settings.var_prompts[name]) {
          this.settings.var_prompts[name] = { prompt };
        }
        this.active_template_vars.push(name);
      });
    }
  }
  // check if templates folder exists
  // if not, create it
  async ensure_templates_folder() {
    const templates_folder = this.app.vault.getFolderByPath(this.settings.templates_folder);
    if (!templates_folder) {
      await this.app.vault.createFolder(this.settings.templates_folder);
    }
  }
  async include_default_templates() {
    const default_templates_folder = this.app.vault.getFolderByPath(`${this.settings.templates_folder}/default`);
    if (!default_templates_folder) {
      await this.app.vault.createFolder(`${this.settings.templates_folder}/default`);
    }
    for (const [name, content] of Object.entries(templates_default)) {
      const default_template = this.app.vault.getFileByPath(`${this.settings.templates_folder}/default/${name}.md`);
      if (!default_template) {
        await this.app.vault.create(
          `${this.settings.templates_folder}/default/${name}.md`,
          content
        );
      }
    }
    const var_prompts_path = `${this.settings.templates_folder}/var_prompts.json`;
    if (!await this.app.vault.adapter.exists(var_prompts_path)) {
      await this.app.vault.adapter.write(var_prompts_path, "{}");
    }
    for (const [name, prompt] of Object.entries(var_prompts_default.var_prompts)) {
      if (!this.settings.var_prompts[name]) {
        this.settings.var_prompts[name] = prompt;
      }
    }
    await this.save_settings();
  }
  add_commands() {
    this.add_template_commands();
    this.addCommand({
      id: "update-commands",
      name: "Refresh commands (adds/removes templates from commands)",
      icon: "pencil_icon",
      editorCallback: this.add_template_commands.bind(this)
    });
  }
  add_template_commands() {
    const templates = this.get_templates_from_folder(this.settings.templates_folder);
    for (const template of templates) {
      if (template.name.endsWith(".json")) continue;
      this.addCommand({
        id: `${format_command_name(template.name)}`,
        name: `Generate: ${template.name.split(".md")?.[0] || template.name}`,
        icon: "pencil_icon",
        hotkeys: [],
        editorCallback: this.run_smart_template.bind(this, template.path)
      });
    }
  }
  async run_smart_template(template_path, editor, ctx) {
    const file = this.app.workspace.getActiveFile();
    const file_path = file.path;
    let context = file_path + "\n";
    if (editor.somethingSelected()) context = editor.getSelection();
    else context = editor.getValue();
    if (!context) return new Notice("[Smart Commands] No file or selection found");
    const template_tfile = this.app.vault.getFileByPath(template_path);
    const template_content = await this.app.vault.cachedRead(template_tfile);
    const template_frontmatter = parse_frontmatter(template_content);
    if (template_frontmatter?.tags_as_context) {
      context = `${this.tags_as_context}
${context}`;
    }
    const opts = {
      file_type: template_tfile.extension
    };
    if (template_frontmatter?.system_prompt) {
      opts.system_prompt = template_frontmatter.system_prompt;
    }
    const resp = await this.env.smart_templates.render(this.strip_frontmatter_context_config(template_content), context, opts);
    const lines = editor.getValue().split("\n");
    const last_line = lines[lines.length - 1];
    editor.setValue(editor.getValue() + "\n" + resp);
    const output_pos = { line: last_line, ch: 0 };
    editor.setCursor(output_pos);
    editor.scrollIntoView({ to: output_pos, from: output_pos }, true);
  }
  get context_frontmatter_index() {
    return ["tags_as_context", "system_prompt"];
  }
  get all_tags() {
    return Object.entries(this.app.metadataCache.getTags()).filter(([name]) => !this.context_frontmatter_index.includes(name)).map(([name, count]) => ({ name, count })).sort((a, b) => b.count - a.count);
  }
  get tags_as_context() {
    return `Existing tags in format "tag (frequency)":
` + this.all_tags.map((tag) => `${tag.name}${tag.count > 1 ? ` (${tag.count})` : ""}`).join("\n");
  }
  strip_frontmatter_context_config(template_content) {
    const regex_pattern = this.context_frontmatter_index.map((tag) => `^${tag}:.*\\n`).join("|");
    const dynamic_regex = new RegExp(regex_pattern, "gm");
    return template_content.replace(dynamic_regex, "").replace(/^---\n---/gm, "");
  }
};
var SmartTemplatesSettingsTab = class extends PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.config = plugin.settings;
  }
  display() {
    this.smart_settings = new SmartTemplatesSettings(
      this.plugin.env,
      this.containerEl,
      {
        main: this.plugin,
        // fixes not saving
        template_name: "smart_templates_settings",
        views: views_default
      }
    );
    return this.smart_settings.render();
  }
};
var SmartTemplatesSettings = class extends SmartSettings {
  get settings() {
    return this.env.smart_templates_plugin.settings;
  }
  set settings(settings) {
    this.env.smart_templates_plugin.settings = settings;
  }
  get model_config() {
    return this.settings[this.settings.chat_model_platform_key];
  }
  async get_view_data() {
    await this.env.smart_templates_plugin.get_var_prompts_settings();
    if (!this._model_settings) this.load_model_settings();
    const var_prompts = Object.entries(this.settings.var_prompts).map(([name, prompt]) => ({ name, prompt, active: this.env.smart_templates_plugin.active_template_vars.includes(name) })).sort((a, b) => a.name.localeCompare(b.name)).sort((a, b) => b.active - a.active);
    return {
      model_settings: this._model_settings || null,
      settings: this.settings,
      var_prompts
    };
  }
  async can_import_from_smart_connections() {
    if (!await this.main.app.vault.adapter.exists(`${this.main.app.vault.configDir}/plugins/smart-connections/data.json`)) return false;
    const config_file = await this.main.app.vault.adapter.read(`${this.main.app.vault.configDir}/plugins/smart-connections/data.json`);
    if (!config_file) return false;
    const config = JSON.parse(config_file);
    if (config[this.settings.chat_model_platform_key]?.api_key?.length && !this.settings[this.settings.chat_model_platform_key]?.api_key?.length) return true;
    return false;
  }
  async load_model_settings() {
    const chat_platforms = import_smart_chat_model2.SmartChatModel.platforms;
    const smart_chat_model = new import_smart_chat_model2.SmartChatModel(
      this.env,
      this.settings.chat_model_platform_key || "openai",
      this.model_config
    );
    smart_chat_model._request_adapter = requestUrl;
    const platform_chat_models = await smart_chat_model.get_models();
    this._model_settings = await this.ejs.render(
      this.views["smart_templates_model_settings"],
      {
        settings: this.settings,
        chat_platforms,
        platform_chat_models,
        chat_platform: smart_chat_model.platform,
        can_import_from_smart_connections: await this.can_import_from_smart_connections()
      }
    );
    this.render();
  }
  get template() {
    return this.views[this.template_name];
  }
  async changed_smart_chat_platform(render = true) {
    this._model_settings = null;
    this.env.smart_templates_plugin.load_smart_templates();
    if (render) this.render();
  }
  // import model config from smart-connections
  async import_model_config_from_smart_connections() {
    const config_file = await this.main.app.vault.adapter.read(`${this.main.app.vault.configDir}/plugins/smart-connections/data.json`);
    if (!config_file) return new Notice("[Smart Templates] No model config found in smart-connections");
    const config = JSON.parse(config_file);
    const settings = this.settings;
    if (config[this.settings.chat_model_platform_key]) settings[this.settings.chat_model_platform_key] = { ...config[this.settings.chat_model_platform_key] };
    this.settings = settings;
    await this.env.smart_templates_plugin.save_settings();
    this._model_settings = null;
    this.render();
  }
  async update(setting, value) {
    await super.update(setting, value);
  }
  async remove_var_prompt(setting, value, elm) {
    const var_prompt_name = elm.dataset.value;
    delete this.settings.var_prompts[var_prompt_name];
    await this.update("var_prompts", this.settings.var_prompts);
    this.render();
  }
};
function format_command_name(name) {
  return name.toLowerCase().replace(/[^a-z0-9]/ig, "-");
}
function parse_frontmatter(content) {
  const match = content.match(/^---\n([\s\S]+?)\n---/);
  if (match) {
    const frontmatter = match[1];
    const yaml_object = {};
    const lines = frontmatter.split("\n");
    for (const line of lines) {
      const [key, ...value_parts] = line.split(":");
      if (key && value_parts.length > 0) {
        const value = value_parts.join(":").trim();
        yaml_object[key.trim()] = value;
      }
    }
    return yaml_object;
  }
  return null;
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vanNicmFpbnMvc21hcnQtdGVtcGxhdGVzL2Vqcy5taW4uY2pzIiwgIi4uLy4uL2pzYnJhaW5zL3NtYXJ0LWNoYXQtbW9kZWwvYWRhcHRlcnMvYW50aHJvcGljLmpzIiwgIi4uLy4uL2pzYnJhaW5zL3NtYXJ0LWNoYXQtbW9kZWwvYWRhcHRlcnMvY29oZXJlLmpzIiwgIi4uLy4uL2pzYnJhaW5zL3NtYXJ0LWNoYXQtbW9kZWwvYWRhcHRlcnMvZ2VtaW5pLmpzIiwgIi4uLy4uL2pzYnJhaW5zL3NtYXJ0LWNoYXQtbW9kZWwvYWRhcHRlcnMvb3Blbl9yb3V0ZXIuanMiLCAiLi4vLi4vanNicmFpbnMvc21hcnQtY2hhdC1tb2RlbC9hZGFwdGVycy5qcyIsICIuLi8uLi9qc2JyYWlucy9zbWFydC1jaGF0LW1vZGVsL3BsYXRmb3Jtcy5qc29uIiwgIi4uLy4uL2pzYnJhaW5zL3NtYXJ0LWNoYXQtbW9kZWwvdXRpbHMvaXNfdmFsaWRfdG9vbF9jYWxsLmpzIiwgIi4uLy4uL2pzYnJhaW5zL3NtYXJ0LWNoYXQtbW9kZWwvc3RyZWFtZXIuanMiLCAiLi4vLi4vanNicmFpbnMvc21hcnQtY2hhdC1tb2RlbC9tb2RlbHMvb3Blbl9yb3V0ZXIuanMiLCAiLi4vLi4vanNicmFpbnMvc21hcnQtY2hhdC1tb2RlbC9tb2RlbHMvb3BlbmFpLmpzIiwgIi4uLy4uL2pzYnJhaW5zL3NtYXJ0LWNoYXQtbW9kZWwvbW9kZWxzL2dvb2dsZV9nZW1pbmkuanMiLCAiLi4vLi4vanNicmFpbnMvc21hcnQtY2hhdC1tb2RlbC9tb2RlbHMvY29oZXJlLmpzIiwgIi4uLy4uL2pzYnJhaW5zL3NtYXJ0LWNoYXQtbW9kZWwvbW9kZWxzL2FudGhyb3BpYy5qcyIsICIuLi8uLi9qc2JyYWlucy9zbWFydC1jaGF0LW1vZGVsL21vZGVscy9mZXRjaC5qcyIsICIuLi8uLi9qc2JyYWlucy9zbWFydC1jaGF0LW1vZGVsL3NtYXJ0X2NoYXRfbW9kZWwuanMiLCAiLi4vLi4vanNicmFpbnMvc21hcnQtc2V0dGluZy9lanMubWluLmNqcyIsICIuLi9tYWluLmpzIiwgIi4uLy4uL2pzYnJhaW5zL3NtYXJ0LXRlbXBsYXRlcy9zbWFydF90ZW1wbGF0ZXMuanMiLCAiLi4vLi4vanNicmFpbnMvc21hcnQtdGVtcGxhdGVzL2FkYXB0ZXJzL21hcmtkb3duLmpzIiwgInZpZXdzLmpzb24iLCAidGVtcGxhdGVzLmpzb24iLCAiLi4vdGVtcGxhdGVzL3Zhcl9wcm9tcHRzLmpzb24iLCAiLi4vLi4vanNicmFpbnMvc21hcnQtZW52aXJvbm1lbnQvc21hcnRfZW52LmpzIiwgIi4uLy4uL2pzYnJhaW5zL3NtYXJ0LXNldHRpbmcvc21hcnRfc2V0dGluZ3MuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIihmdW5jdGlvbihmKXtpZih0eXBlb2YgZXhwb3J0cz09PVwib2JqZWN0XCImJnR5cGVvZiBtb2R1bGUhPT1cInVuZGVmaW5lZFwiKXttb2R1bGUuZXhwb3J0cz1mKCl9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09XCJmdW5jdGlvblwiJiZkZWZpbmUuYW1kKXtkZWZpbmUoW10sZil9ZWxzZXt2YXIgZztpZih0eXBlb2Ygd2luZG93IT09XCJ1bmRlZmluZWRcIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09XCJ1bmRlZmluZWRcIil7Zz1nbG9iYWx9ZWxzZSBpZih0eXBlb2Ygc2VsZiE9PVwidW5kZWZpbmVkXCIpe2c9c2VsZn1lbHNle2c9dGhpc31nLmVqcz1mKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiBmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0oKSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGZzPXJlcXVpcmUoXCJmc1wiKTt2YXIgcGF0aD1yZXF1aXJlKFwicGF0aFwiKTt2YXIgdXRpbHM9cmVxdWlyZShcIi4vdXRpbHNcIik7dmFyIHNjb3BlT3B0aW9uV2FybmVkPWZhbHNlO3ZhciBfVkVSU0lPTl9TVFJJTkc9cmVxdWlyZShcIi4uL3BhY2thZ2UuanNvblwiKS52ZXJzaW9uO3ZhciBfREVGQVVMVF9PUEVOX0RFTElNSVRFUj1cIjxcIjt2YXIgX0RFRkFVTFRfQ0xPU0VfREVMSU1JVEVSPVwiPlwiO3ZhciBfREVGQVVMVF9ERUxJTUlURVI9XCIlXCI7dmFyIF9ERUZBVUxUX0xPQ0FMU19OQU1FPVwibG9jYWxzXCI7dmFyIF9OQU1FPVwiZWpzXCI7dmFyIF9SRUdFWF9TVFJJTkc9XCIoPCUlfCUlPnw8JT18PCUtfDwlX3w8JSN8PCV8JT58LSU+fF8lPilcIjt2YXIgX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBPVtcImRlbGltaXRlclwiLFwic2NvcGVcIixcImNvbnRleHRcIixcImRlYnVnXCIsXCJjb21waWxlRGVidWdcIixcImNsaWVudFwiLFwiX3dpdGhcIixcInJtV2hpdGVzcGFjZVwiLFwic3RyaWN0XCIsXCJmaWxlbmFtZVwiLFwiYXN5bmNcIl07dmFyIF9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQV9FWFBSRVNTPV9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQS5jb25jYXQoXCJjYWNoZVwiKTt2YXIgX0JPTT0vXlxcdUZFRkYvO3ZhciBfSlNfSURFTlRJRklFUj0vXlthLXpBLVpfJF1bMC05YS16QS1aXyRdKiQvO2V4cG9ydHMuY2FjaGU9dXRpbHMuY2FjaGU7ZXhwb3J0cy5maWxlTG9hZGVyPWZzLnJlYWRGaWxlU3luYztleHBvcnRzLmxvY2Fsc05hbWU9X0RFRkFVTFRfTE9DQUxTX05BTUU7ZXhwb3J0cy5wcm9taXNlSW1wbD1uZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpcztcIikoKS5Qcm9taXNlO2V4cG9ydHMucmVzb2x2ZUluY2x1ZGU9ZnVuY3Rpb24obmFtZSxmaWxlbmFtZSxpc0Rpcil7dmFyIGRpcm5hbWU9cGF0aC5kaXJuYW1lO3ZhciBleHRuYW1lPXBhdGguZXh0bmFtZTt2YXIgcmVzb2x2ZT1wYXRoLnJlc29sdmU7dmFyIGluY2x1ZGVQYXRoPXJlc29sdmUoaXNEaXI/ZmlsZW5hbWU6ZGlybmFtZShmaWxlbmFtZSksbmFtZSk7dmFyIGV4dD1leHRuYW1lKG5hbWUpO2lmKCFleHQpe2luY2x1ZGVQYXRoKz1cIi5lanNcIn1yZXR1cm4gaW5jbHVkZVBhdGh9O2Z1bmN0aW9uIHJlc29sdmVQYXRocyhuYW1lLHBhdGhzKXt2YXIgZmlsZVBhdGg7aWYocGF0aHMuc29tZShmdW5jdGlvbih2KXtmaWxlUGF0aD1leHBvcnRzLnJlc29sdmVJbmNsdWRlKG5hbWUsdix0cnVlKTtyZXR1cm4gZnMuZXhpc3RzU3luYyhmaWxlUGF0aCl9KSl7cmV0dXJuIGZpbGVQYXRofX1mdW5jdGlvbiBnZXRJbmNsdWRlUGF0aChwYXRoLG9wdGlvbnMpe3ZhciBpbmNsdWRlUGF0aDt2YXIgZmlsZVBhdGg7dmFyIHZpZXdzPW9wdGlvbnMudmlld3M7dmFyIG1hdGNoPS9eW0EtWmEtel0rOlxcXFx8XlxcLy8uZXhlYyhwYXRoKTtpZihtYXRjaCYmbWF0Y2gubGVuZ3RoKXtwYXRoPXBhdGgucmVwbGFjZSgvXlxcLyovLFwiXCIpO2lmKEFycmF5LmlzQXJyYXkob3B0aW9ucy5yb290KSl7aW5jbHVkZVBhdGg9cmVzb2x2ZVBhdGhzKHBhdGgsb3B0aW9ucy5yb290KX1lbHNle2luY2x1ZGVQYXRoPWV4cG9ydHMucmVzb2x2ZUluY2x1ZGUocGF0aCxvcHRpb25zLnJvb3R8fFwiL1wiLHRydWUpfX1lbHNle2lmKG9wdGlvbnMuZmlsZW5hbWUpe2ZpbGVQYXRoPWV4cG9ydHMucmVzb2x2ZUluY2x1ZGUocGF0aCxvcHRpb25zLmZpbGVuYW1lKTtpZihmcy5leGlzdHNTeW5jKGZpbGVQYXRoKSl7aW5jbHVkZVBhdGg9ZmlsZVBhdGh9fWlmKCFpbmNsdWRlUGF0aCYmQXJyYXkuaXNBcnJheSh2aWV3cykpe2luY2x1ZGVQYXRoPXJlc29sdmVQYXRocyhwYXRoLHZpZXdzKX1pZighaW5jbHVkZVBhdGgmJnR5cGVvZiBvcHRpb25zLmluY2x1ZGVyIT09XCJmdW5jdGlvblwiKXt0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHRoZSBpbmNsdWRlIGZpbGUgXCInK29wdGlvbnMuZXNjYXBlRnVuY3Rpb24ocGF0aCkrJ1wiJyl9fXJldHVybiBpbmNsdWRlUGF0aH1mdW5jdGlvbiBoYW5kbGVDYWNoZShvcHRpb25zLHRlbXBsYXRlKXt2YXIgZnVuYzt2YXIgZmlsZW5hbWU9b3B0aW9ucy5maWxlbmFtZTt2YXIgaGFzVGVtcGxhdGU9YXJndW1lbnRzLmxlbmd0aD4xO2lmKG9wdGlvbnMuY2FjaGUpe2lmKCFmaWxlbmFtZSl7dGhyb3cgbmV3IEVycm9yKFwiY2FjaGUgb3B0aW9uIHJlcXVpcmVzIGEgZmlsZW5hbWVcIil9ZnVuYz1leHBvcnRzLmNhY2hlLmdldChmaWxlbmFtZSk7aWYoZnVuYyl7cmV0dXJuIGZ1bmN9aWYoIWhhc1RlbXBsYXRlKXt0ZW1wbGF0ZT1maWxlTG9hZGVyKGZpbGVuYW1lKS50b1N0cmluZygpLnJlcGxhY2UoX0JPTSxcIlwiKX19ZWxzZSBpZighaGFzVGVtcGxhdGUpe2lmKCFmaWxlbmFtZSl7dGhyb3cgbmV3IEVycm9yKFwiSW50ZXJuYWwgRUpTIGVycm9yOiBubyBmaWxlIG5hbWUgb3IgdGVtcGxhdGUgXCIrXCJwcm92aWRlZFwiKX10ZW1wbGF0ZT1maWxlTG9hZGVyKGZpbGVuYW1lKS50b1N0cmluZygpLnJlcGxhY2UoX0JPTSxcIlwiKX1mdW5jPWV4cG9ydHMuY29tcGlsZSh0ZW1wbGF0ZSxvcHRpb25zKTtpZihvcHRpb25zLmNhY2hlKXtleHBvcnRzLmNhY2hlLnNldChmaWxlbmFtZSxmdW5jKX1yZXR1cm4gZnVuY31mdW5jdGlvbiB0cnlIYW5kbGVDYWNoZShvcHRpb25zLGRhdGEsY2Ipe3ZhciByZXN1bHQ7aWYoIWNiKXtpZih0eXBlb2YgZXhwb3J0cy5wcm9taXNlSW1wbD09XCJmdW5jdGlvblwiKXtyZXR1cm4gbmV3IGV4cG9ydHMucHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3Qpe3RyeXtyZXN1bHQ9aGFuZGxlQ2FjaGUob3B0aW9ucykoZGF0YSk7cmVzb2x2ZShyZXN1bHQpfWNhdGNoKGVycil7cmVqZWN0KGVycil9fSl9ZWxzZXt0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgcHJvdmlkZSBhIGNhbGxiYWNrIGZ1bmN0aW9uXCIpfX1lbHNle3RyeXtyZXN1bHQ9aGFuZGxlQ2FjaGUob3B0aW9ucykoZGF0YSl9Y2F0Y2goZXJyKXtyZXR1cm4gY2IoZXJyKX1jYihudWxsLHJlc3VsdCl9fWZ1bmN0aW9uIGZpbGVMb2FkZXIoZmlsZVBhdGgpe3JldHVybiBleHBvcnRzLmZpbGVMb2FkZXIoZmlsZVBhdGgpfWZ1bmN0aW9uIGluY2x1ZGVGaWxlKHBhdGgsb3B0aW9ucyl7dmFyIG9wdHM9dXRpbHMuc2hhbGxvd0NvcHkodXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpLG9wdGlvbnMpO29wdHMuZmlsZW5hbWU9Z2V0SW5jbHVkZVBhdGgocGF0aCxvcHRzKTtpZih0eXBlb2Ygb3B0aW9ucy5pbmNsdWRlcj09PVwiZnVuY3Rpb25cIil7dmFyIGluY2x1ZGVyUmVzdWx0PW9wdGlvbnMuaW5jbHVkZXIocGF0aCxvcHRzLmZpbGVuYW1lKTtpZihpbmNsdWRlclJlc3VsdCl7aWYoaW5jbHVkZXJSZXN1bHQuZmlsZW5hbWUpe29wdHMuZmlsZW5hbWU9aW5jbHVkZXJSZXN1bHQuZmlsZW5hbWV9aWYoaW5jbHVkZXJSZXN1bHQudGVtcGxhdGUpe3JldHVybiBoYW5kbGVDYWNoZShvcHRzLGluY2x1ZGVyUmVzdWx0LnRlbXBsYXRlKX19fXJldHVybiBoYW5kbGVDYWNoZShvcHRzKX1mdW5jdGlvbiByZXRocm93KGVycixzdHIsZmxubSxsaW5lbm8sZXNjKXt2YXIgbGluZXM9c3RyLnNwbGl0KFwiXFxuXCIpO3ZhciBzdGFydD1NYXRoLm1heChsaW5lbm8tMywwKTt2YXIgZW5kPU1hdGgubWluKGxpbmVzLmxlbmd0aCxsaW5lbm8rMyk7dmFyIGZpbGVuYW1lPWVzYyhmbG5tKTt2YXIgY29udGV4dD1saW5lcy5zbGljZShzdGFydCxlbmQpLm1hcChmdW5jdGlvbihsaW5lLGkpe3ZhciBjdXJyPWkrc3RhcnQrMTtyZXR1cm4oY3Vycj09bGluZW5vP1wiID4+IFwiOlwiICAgIFwiKStjdXJyK1wifCBcIitsaW5lfSkuam9pbihcIlxcblwiKTtlcnIucGF0aD1maWxlbmFtZTtlcnIubWVzc2FnZT0oZmlsZW5hbWV8fFwiZWpzXCIpK1wiOlwiK2xpbmVubytcIlxcblwiK2NvbnRleHQrXCJcXG5cXG5cIitlcnIubWVzc2FnZTt0aHJvdyBlcnJ9ZnVuY3Rpb24gc3RyaXBTZW1pKHN0cil7cmV0dXJuIHN0ci5yZXBsYWNlKC87KFxccyokKS8sXCIkMVwiKX1leHBvcnRzLmNvbXBpbGU9ZnVuY3Rpb24gY29tcGlsZSh0ZW1wbGF0ZSxvcHRzKXt2YXIgdGVtcGw7aWYob3B0cyYmb3B0cy5zY29wZSl7aWYoIXNjb3BlT3B0aW9uV2FybmVkKXtjb25zb2xlLndhcm4oXCJgc2NvcGVgIG9wdGlvbiBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gRUpTIDNcIik7c2NvcGVPcHRpb25XYXJuZWQ9dHJ1ZX1pZighb3B0cy5jb250ZXh0KXtvcHRzLmNvbnRleHQ9b3B0cy5zY29wZX1kZWxldGUgb3B0cy5zY29wZX10ZW1wbD1uZXcgVGVtcGxhdGUodGVtcGxhdGUsb3B0cyk7cmV0dXJuIHRlbXBsLmNvbXBpbGUoKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24odGVtcGxhdGUsZCxvKXt2YXIgZGF0YT1kfHx1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCk7dmFyIG9wdHM9b3x8dXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpO2lmKGFyZ3VtZW50cy5sZW5ndGg9PTIpe3V0aWxzLnNoYWxsb3dDb3B5RnJvbUxpc3Qob3B0cyxkYXRhLF9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQSl9cmV0dXJuIGhhbmRsZUNhY2hlKG9wdHMsdGVtcGxhdGUpKGRhdGEpfTtleHBvcnRzLnJlbmRlckZpbGU9ZnVuY3Rpb24oKXt2YXIgYXJncz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO3ZhciBmaWxlbmFtZT1hcmdzLnNoaWZ0KCk7dmFyIGNiO3ZhciBvcHRzPXtmaWxlbmFtZTpmaWxlbmFtZX07dmFyIGRhdGE7dmFyIHZpZXdPcHRzO2lmKHR5cGVvZiBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXT09XCJmdW5jdGlvblwiKXtjYj1hcmdzLnBvcCgpfWlmKGFyZ3MubGVuZ3RoKXtkYXRhPWFyZ3Muc2hpZnQoKTtpZihhcmdzLmxlbmd0aCl7dXRpbHMuc2hhbGxvd0NvcHkob3B0cyxhcmdzLnBvcCgpKX1lbHNle2lmKGRhdGEuc2V0dGluZ3Mpe2lmKGRhdGEuc2V0dGluZ3Mudmlld3Mpe29wdHMudmlld3M9ZGF0YS5zZXR0aW5ncy52aWV3c31pZihkYXRhLnNldHRpbmdzW1widmlldyBjYWNoZVwiXSl7b3B0cy5jYWNoZT10cnVlfXZpZXdPcHRzPWRhdGEuc2V0dGluZ3NbXCJ2aWV3IG9wdGlvbnNcIl07aWYodmlld09wdHMpe3V0aWxzLnNoYWxsb3dDb3B5KG9wdHMsdmlld09wdHMpfX11dGlscy5zaGFsbG93Q29weUZyb21MaXN0KG9wdHMsZGF0YSxfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEFfRVhQUkVTUyl9b3B0cy5maWxlbmFtZT1maWxlbmFtZX1lbHNle2RhdGE9dXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpfXJldHVybiB0cnlIYW5kbGVDYWNoZShvcHRzLGRhdGEsY2IpfTtleHBvcnRzLlRlbXBsYXRlPVRlbXBsYXRlO2V4cG9ydHMuY2xlYXJDYWNoZT1mdW5jdGlvbigpe2V4cG9ydHMuY2FjaGUucmVzZXQoKX07ZnVuY3Rpb24gVGVtcGxhdGUodGV4dCxvcHRzKXtvcHRzPW9wdHN8fHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKTt2YXIgb3B0aW9ucz11dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCk7dGhpcy50ZW1wbGF0ZVRleHQ9dGV4dDt0aGlzLm1vZGU9bnVsbDt0aGlzLnRydW5jYXRlPWZhbHNlO3RoaXMuY3VycmVudExpbmU9MTt0aGlzLnNvdXJjZT1cIlwiO29wdGlvbnMuY2xpZW50PW9wdHMuY2xpZW50fHxmYWxzZTtvcHRpb25zLmVzY2FwZUZ1bmN0aW9uPW9wdHMuZXNjYXBlfHxvcHRzLmVzY2FwZUZ1bmN0aW9ufHx1dGlscy5lc2NhcGVYTUw7b3B0aW9ucy5jb21waWxlRGVidWc9b3B0cy5jb21waWxlRGVidWchPT1mYWxzZTtvcHRpb25zLmRlYnVnPSEhb3B0cy5kZWJ1ZztvcHRpb25zLmZpbGVuYW1lPW9wdHMuZmlsZW5hbWU7b3B0aW9ucy5vcGVuRGVsaW1pdGVyPW9wdHMub3BlbkRlbGltaXRlcnx8ZXhwb3J0cy5vcGVuRGVsaW1pdGVyfHxfREVGQVVMVF9PUEVOX0RFTElNSVRFUjtvcHRpb25zLmNsb3NlRGVsaW1pdGVyPW9wdHMuY2xvc2VEZWxpbWl0ZXJ8fGV4cG9ydHMuY2xvc2VEZWxpbWl0ZXJ8fF9ERUZBVUxUX0NMT1NFX0RFTElNSVRFUjtvcHRpb25zLmRlbGltaXRlcj1vcHRzLmRlbGltaXRlcnx8ZXhwb3J0cy5kZWxpbWl0ZXJ8fF9ERUZBVUxUX0RFTElNSVRFUjtvcHRpb25zLnN0cmljdD1vcHRzLnN0cmljdHx8ZmFsc2U7b3B0aW9ucy5jb250ZXh0PW9wdHMuY29udGV4dDtvcHRpb25zLmNhY2hlPW9wdHMuY2FjaGV8fGZhbHNlO29wdGlvbnMucm1XaGl0ZXNwYWNlPW9wdHMucm1XaGl0ZXNwYWNlO29wdGlvbnMucm9vdD1vcHRzLnJvb3Q7b3B0aW9ucy5pbmNsdWRlcj1vcHRzLmluY2x1ZGVyO29wdGlvbnMub3V0cHV0RnVuY3Rpb25OYW1lPW9wdHMub3V0cHV0RnVuY3Rpb25OYW1lO29wdGlvbnMubG9jYWxzTmFtZT1vcHRzLmxvY2Fsc05hbWV8fGV4cG9ydHMubG9jYWxzTmFtZXx8X0RFRkFVTFRfTE9DQUxTX05BTUU7b3B0aW9ucy52aWV3cz1vcHRzLnZpZXdzO29wdGlvbnMuYXN5bmM9b3B0cy5hc3luYztvcHRpb25zLmRlc3RydWN0dXJlZExvY2Fscz1vcHRzLmRlc3RydWN0dXJlZExvY2FscztvcHRpb25zLmxlZ2FjeUluY2x1ZGU9dHlwZW9mIG9wdHMubGVnYWN5SW5jbHVkZSE9XCJ1bmRlZmluZWRcIj8hIW9wdHMubGVnYWN5SW5jbHVkZTp0cnVlO2lmKG9wdGlvbnMuc3RyaWN0KXtvcHRpb25zLl93aXRoPWZhbHNlfWVsc2V7b3B0aW9ucy5fd2l0aD10eXBlb2Ygb3B0cy5fd2l0aCE9XCJ1bmRlZmluZWRcIj9vcHRzLl93aXRoOnRydWV9dGhpcy5vcHRzPW9wdGlvbnM7dGhpcy5yZWdleD10aGlzLmNyZWF0ZVJlZ2V4KCl9VGVtcGxhdGUubW9kZXM9e0VWQUw6XCJldmFsXCIsRVNDQVBFRDpcImVzY2FwZWRcIixSQVc6XCJyYXdcIixDT01NRU5UOlwiY29tbWVudFwiLExJVEVSQUw6XCJsaXRlcmFsXCJ9O1RlbXBsYXRlLnByb3RvdHlwZT17Y3JlYXRlUmVnZXg6ZnVuY3Rpb24oKXt2YXIgc3RyPV9SRUdFWF9TVFJJTkc7dmFyIGRlbGltPXV0aWxzLmVzY2FwZVJlZ0V4cENoYXJzKHRoaXMub3B0cy5kZWxpbWl0ZXIpO3ZhciBvcGVuPXV0aWxzLmVzY2FwZVJlZ0V4cENoYXJzKHRoaXMub3B0cy5vcGVuRGVsaW1pdGVyKTt2YXIgY2xvc2U9dXRpbHMuZXNjYXBlUmVnRXhwQ2hhcnModGhpcy5vcHRzLmNsb3NlRGVsaW1pdGVyKTtzdHI9c3RyLnJlcGxhY2UoLyUvZyxkZWxpbSkucmVwbGFjZSgvPC9nLG9wZW4pLnJlcGxhY2UoLz4vZyxjbG9zZSk7cmV0dXJuIG5ldyBSZWdFeHAoc3RyKX0sY29tcGlsZTpmdW5jdGlvbigpe3ZhciBzcmM7dmFyIGZuO3ZhciBvcHRzPXRoaXMub3B0czt2YXIgcHJlcGVuZGVkPVwiXCI7dmFyIGFwcGVuZGVkPVwiXCI7dmFyIGVzY2FwZUZuPW9wdHMuZXNjYXBlRnVuY3Rpb247dmFyIGN0b3I7dmFyIHNhbml0aXplZEZpbGVuYW1lPW9wdHMuZmlsZW5hbWU/SlNPTi5zdHJpbmdpZnkob3B0cy5maWxlbmFtZSk6XCJ1bmRlZmluZWRcIjtpZighdGhpcy5zb3VyY2Upe3RoaXMuZ2VuZXJhdGVTb3VyY2UoKTtwcmVwZW5kZWQrPScgIHZhciBfX291dHB1dCA9IFwiXCI7XFxuJytcIiAgZnVuY3Rpb24gX19hcHBlbmQocykgeyBpZiAocyAhPT0gdW5kZWZpbmVkICYmIHMgIT09IG51bGwpIF9fb3V0cHV0ICs9IHMgfVxcblwiO2lmKG9wdHMub3V0cHV0RnVuY3Rpb25OYW1lKXtpZighX0pTX0lERU5USUZJRVIudGVzdChvcHRzLm91dHB1dEZ1bmN0aW9uTmFtZSkpe3Rocm93IG5ldyBFcnJvcihcIm91dHB1dEZ1bmN0aW9uTmFtZSBpcyBub3QgYSB2YWxpZCBKUyBpZGVudGlmaWVyLlwiKX1wcmVwZW5kZWQrPVwiICB2YXIgXCIrb3B0cy5vdXRwdXRGdW5jdGlvbk5hbWUrXCIgPSBfX2FwcGVuZDtcIitcIlxcblwifWlmKG9wdHMubG9jYWxzTmFtZSYmIV9KU19JREVOVElGSUVSLnRlc3Qob3B0cy5sb2NhbHNOYW1lKSl7dGhyb3cgbmV3IEVycm9yKFwibG9jYWxzTmFtZSBpcyBub3QgYSB2YWxpZCBKUyBpZGVudGlmaWVyLlwiKX1pZihvcHRzLmRlc3RydWN0dXJlZExvY2FscyYmb3B0cy5kZXN0cnVjdHVyZWRMb2NhbHMubGVuZ3RoKXt2YXIgZGVzdHJ1Y3R1cmluZz1cIiAgdmFyIF9fbG9jYWxzID0gKFwiK29wdHMubG9jYWxzTmFtZStcIiB8fCB7fSksXFxuXCI7Zm9yKHZhciBpPTA7aTxvcHRzLmRlc3RydWN0dXJlZExvY2Fscy5sZW5ndGg7aSsrKXt2YXIgbmFtZT1vcHRzLmRlc3RydWN0dXJlZExvY2Fsc1tpXTtpZighX0pTX0lERU5USUZJRVIudGVzdChuYW1lKSl7dGhyb3cgbmV3IEVycm9yKFwiZGVzdHJ1Y3R1cmVkTG9jYWxzW1wiK2krXCJdIGlzIG5vdCBhIHZhbGlkIEpTIGlkZW50aWZpZXIuXCIpfWlmKGk+MCl7ZGVzdHJ1Y3R1cmluZys9XCIsXFxuICBcIn1kZXN0cnVjdHVyaW5nKz1uYW1lK1wiID0gX19sb2NhbHMuXCIrbmFtZX1wcmVwZW5kZWQrPWRlc3RydWN0dXJpbmcrXCI7XFxuXCJ9aWYob3B0cy5fd2l0aCE9PWZhbHNlKXtwcmVwZW5kZWQrPVwiICB3aXRoIChcIitvcHRzLmxvY2Fsc05hbWUrXCIgfHwge30pIHtcIitcIlxcblwiO2FwcGVuZGVkKz1cIiAgfVwiK1wiXFxuXCJ9YXBwZW5kZWQrPVwiICByZXR1cm4gX19vdXRwdXQ7XCIrXCJcXG5cIjt0aGlzLnNvdXJjZT1wcmVwZW5kZWQrdGhpcy5zb3VyY2UrYXBwZW5kZWR9aWYob3B0cy5jb21waWxlRGVidWcpe3NyYz1cInZhciBfX2xpbmUgPSAxXCIrXCJcXG5cIitcIiAgLCBfX2xpbmVzID0gXCIrSlNPTi5zdHJpbmdpZnkodGhpcy50ZW1wbGF0ZVRleHQpK1wiXFxuXCIrXCIgICwgX19maWxlbmFtZSA9IFwiK3Nhbml0aXplZEZpbGVuYW1lK1wiO1wiK1wiXFxuXCIrXCJ0cnkge1wiK1wiXFxuXCIrdGhpcy5zb3VyY2UrXCJ9IGNhdGNoIChlKSB7XCIrXCJcXG5cIitcIiAgcmV0aHJvdyhlLCBfX2xpbmVzLCBfX2ZpbGVuYW1lLCBfX2xpbmUsIGVzY2FwZUZuKTtcIitcIlxcblwiK1wifVwiK1wiXFxuXCJ9ZWxzZXtzcmM9dGhpcy5zb3VyY2V9aWYob3B0cy5jbGllbnQpe3NyYz1cImVzY2FwZUZuID0gZXNjYXBlRm4gfHwgXCIrZXNjYXBlRm4udG9TdHJpbmcoKStcIjtcIitcIlxcblwiK3NyYztpZihvcHRzLmNvbXBpbGVEZWJ1Zyl7c3JjPVwicmV0aHJvdyA9IHJldGhyb3cgfHwgXCIrcmV0aHJvdy50b1N0cmluZygpK1wiO1wiK1wiXFxuXCIrc3JjfX1pZihvcHRzLnN0cmljdCl7c3JjPSdcInVzZSBzdHJpY3RcIjtcXG4nK3NyY31pZihvcHRzLmRlYnVnKXtjb25zb2xlLmxvZyhzcmMpfWlmKG9wdHMuY29tcGlsZURlYnVnJiZvcHRzLmZpbGVuYW1lKXtzcmM9c3JjK1wiXFxuXCIrXCIvLyMgc291cmNlVVJMPVwiK3Nhbml0aXplZEZpbGVuYW1lK1wiXFxuXCJ9dHJ5e2lmKG9wdHMuYXN5bmMpe3RyeXtjdG9yPW5ldyBGdW5jdGlvbihcInJldHVybiAoYXN5bmMgZnVuY3Rpb24oKXt9KS5jb25zdHJ1Y3RvcjtcIikoKX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2YgU3ludGF4RXJyb3Ipe3Rocm93IG5ldyBFcnJvcihcIlRoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBhc3luYy9hd2FpdFwiKX1lbHNle3Rocm93IGV9fX1lbHNle2N0b3I9RnVuY3Rpb259Zm49bmV3IGN0b3Iob3B0cy5sb2NhbHNOYW1lK1wiLCBlc2NhcGVGbiwgaW5jbHVkZSwgcmV0aHJvd1wiLHNyYyl9Y2F0Y2goZSl7aWYoZSBpbnN0YW5jZW9mIFN5bnRheEVycm9yKXtpZihvcHRzLmZpbGVuYW1lKXtlLm1lc3NhZ2UrPVwiIGluIFwiK29wdHMuZmlsZW5hbWV9ZS5tZXNzYWdlKz1cIiB3aGlsZSBjb21waWxpbmcgZWpzXFxuXFxuXCI7ZS5tZXNzYWdlKz1cIklmIHRoZSBhYm92ZSBlcnJvciBpcyBub3QgaGVscGZ1bCwgeW91IG1heSB3YW50IHRvIHRyeSBFSlMtTGludDpcXG5cIjtlLm1lc3NhZ2UrPVwiaHR0cHM6Ly9naXRodWIuY29tL1J5YW5aaW0vRUpTLUxpbnRcIjtpZighb3B0cy5hc3luYyl7ZS5tZXNzYWdlKz1cIlxcblwiO2UubWVzc2FnZSs9XCJPciwgaWYgeW91IG1lYW50IHRvIGNyZWF0ZSBhbiBhc3luYyBmdW5jdGlvbiwgcGFzcyBgYXN5bmM6IHRydWVgIGFzIGFuIG9wdGlvbi5cIn19dGhyb3cgZX12YXIgcmV0dXJuZWRGbj1vcHRzLmNsaWVudD9mbjpmdW5jdGlvbiBhbm9ueW1vdXMoZGF0YSl7dmFyIGluY2x1ZGU9ZnVuY3Rpb24ocGF0aCxpbmNsdWRlRGF0YSl7dmFyIGQ9dXRpbHMuc2hhbGxvd0NvcHkodXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpLGRhdGEpO2lmKGluY2x1ZGVEYXRhKXtkPXV0aWxzLnNoYWxsb3dDb3B5KGQsaW5jbHVkZURhdGEpfXJldHVybiBpbmNsdWRlRmlsZShwYXRoLG9wdHMpKGQpfTtyZXR1cm4gZm4uYXBwbHkob3B0cy5jb250ZXh0LFtkYXRhfHx1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCksZXNjYXBlRm4saW5jbHVkZSxyZXRocm93XSl9O2lmKG9wdHMuZmlsZW5hbWUmJnR5cGVvZiBPYmplY3QuZGVmaW5lUHJvcGVydHk9PT1cImZ1bmN0aW9uXCIpe3ZhciBmaWxlbmFtZT1vcHRzLmZpbGVuYW1lO3ZhciBiYXNlbmFtZT1wYXRoLmJhc2VuYW1lKGZpbGVuYW1lLHBhdGguZXh0bmFtZShmaWxlbmFtZSkpO3RyeXtPYmplY3QuZGVmaW5lUHJvcGVydHkocmV0dXJuZWRGbixcIm5hbWVcIix7dmFsdWU6YmFzZW5hbWUsd3JpdGFibGU6ZmFsc2UsZW51bWVyYWJsZTpmYWxzZSxjb25maWd1cmFibGU6dHJ1ZX0pfWNhdGNoKGUpe319cmV0dXJuIHJldHVybmVkRm59LGdlbmVyYXRlU291cmNlOmZ1bmN0aW9uKCl7dmFyIG9wdHM9dGhpcy5vcHRzO2lmKG9wdHMucm1XaGl0ZXNwYWNlKXt0aGlzLnRlbXBsYXRlVGV4dD10aGlzLnRlbXBsYXRlVGV4dC5yZXBsYWNlKC9bXFxyXFxuXSsvZyxcIlxcblwiKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nbSxcIlwiKX10aGlzLnRlbXBsYXRlVGV4dD10aGlzLnRlbXBsYXRlVGV4dC5yZXBsYWNlKC9bIFxcdF0qPCVfL2dtLFwiPCVfXCIpLnJlcGxhY2UoL18lPlsgXFx0XSovZ20sXCJfJT5cIik7dmFyIHNlbGY9dGhpczt2YXIgbWF0Y2hlcz10aGlzLnBhcnNlVGVtcGxhdGVUZXh0KCk7dmFyIGQ9dGhpcy5vcHRzLmRlbGltaXRlcjt2YXIgbz10aGlzLm9wdHMub3BlbkRlbGltaXRlcjt2YXIgYz10aGlzLm9wdHMuY2xvc2VEZWxpbWl0ZXI7aWYobWF0Y2hlcyYmbWF0Y2hlcy5sZW5ndGgpe21hdGNoZXMuZm9yRWFjaChmdW5jdGlvbihsaW5lLGluZGV4KXt2YXIgY2xvc2luZztpZihsaW5lLmluZGV4T2YobytkKT09PTAmJmxpbmUuaW5kZXhPZihvK2QrZCkhPT0wKXtjbG9zaW5nPW1hdGNoZXNbaW5kZXgrMl07aWYoIShjbG9zaW5nPT1kK2N8fGNsb3Npbmc9PVwiLVwiK2QrY3x8Y2xvc2luZz09XCJfXCIrZCtjKSl7dGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBtYXRjaGluZyBjbG9zZSB0YWcgZm9yIFwiJytsaW5lKydcIi4nKX19c2VsZi5zY2FuTGluZShsaW5lKX0pfX0scGFyc2VUZW1wbGF0ZVRleHQ6ZnVuY3Rpb24oKXt2YXIgc3RyPXRoaXMudGVtcGxhdGVUZXh0O3ZhciBwYXQ9dGhpcy5yZWdleDt2YXIgcmVzdWx0PXBhdC5leGVjKHN0cik7dmFyIGFycj1bXTt2YXIgZmlyc3RQb3M7d2hpbGUocmVzdWx0KXtmaXJzdFBvcz1yZXN1bHQuaW5kZXg7aWYoZmlyc3RQb3MhPT0wKXthcnIucHVzaChzdHIuc3Vic3RyaW5nKDAsZmlyc3RQb3MpKTtzdHI9c3RyLnNsaWNlKGZpcnN0UG9zKX1hcnIucHVzaChyZXN1bHRbMF0pO3N0cj1zdHIuc2xpY2UocmVzdWx0WzBdLmxlbmd0aCk7cmVzdWx0PXBhdC5leGVjKHN0cil9aWYoc3RyKXthcnIucHVzaChzdHIpfXJldHVybiBhcnJ9LF9hZGRPdXRwdXQ6ZnVuY3Rpb24obGluZSl7aWYodGhpcy50cnVuY2F0ZSl7bGluZT1saW5lLnJlcGxhY2UoL14oPzpcXHJcXG58XFxyfFxcbikvLFwiXCIpO3RoaXMudHJ1bmNhdGU9ZmFsc2V9aWYoIWxpbmUpe3JldHVybiBsaW5lfWxpbmU9bGluZS5yZXBsYWNlKC9cXFxcL2csXCJcXFxcXFxcXFwiKTtsaW5lPWxpbmUucmVwbGFjZSgvXFxuL2csXCJcXFxcblwiKTtsaW5lPWxpbmUucmVwbGFjZSgvXFxyL2csXCJcXFxcclwiKTtsaW5lPWxpbmUucmVwbGFjZSgvXCIvZywnXFxcXFwiJyk7dGhpcy5zb3VyY2UrPScgICAgOyBfX2FwcGVuZChcIicrbGluZSsnXCIpJytcIlxcblwifSxzY2FuTGluZTpmdW5jdGlvbihsaW5lKXt2YXIgc2VsZj10aGlzO3ZhciBkPXRoaXMub3B0cy5kZWxpbWl0ZXI7dmFyIG89dGhpcy5vcHRzLm9wZW5EZWxpbWl0ZXI7dmFyIGM9dGhpcy5vcHRzLmNsb3NlRGVsaW1pdGVyO3ZhciBuZXdMaW5lQ291bnQ9MDtuZXdMaW5lQ291bnQ9bGluZS5zcGxpdChcIlxcblwiKS5sZW5ndGgtMTtzd2l0Y2gobGluZSl7Y2FzZSBvK2Q6Y2FzZSBvK2QrXCJfXCI6dGhpcy5tb2RlPVRlbXBsYXRlLm1vZGVzLkVWQUw7YnJlYWs7Y2FzZSBvK2QrXCI9XCI6dGhpcy5tb2RlPVRlbXBsYXRlLm1vZGVzLkVTQ0FQRUQ7YnJlYWs7Y2FzZSBvK2QrXCItXCI6dGhpcy5tb2RlPVRlbXBsYXRlLm1vZGVzLlJBVzticmVhaztjYXNlIG8rZCtcIiNcIjp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuQ09NTUVOVDticmVhaztjYXNlIG8rZCtkOnRoaXMubW9kZT1UZW1wbGF0ZS5tb2Rlcy5MSVRFUkFMO3RoaXMuc291cmNlKz0nICAgIDsgX19hcHBlbmQoXCInK2xpbmUucmVwbGFjZShvK2QrZCxvK2QpKydcIiknK1wiXFxuXCI7YnJlYWs7Y2FzZSBkK2QrYzp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuTElURVJBTDt0aGlzLnNvdXJjZSs9JyAgICA7IF9fYXBwZW5kKFwiJytsaW5lLnJlcGxhY2UoZCtkK2MsZCtjKSsnXCIpJytcIlxcblwiO2JyZWFrO2Nhc2UgZCtjOmNhc2VcIi1cIitkK2M6Y2FzZVwiX1wiK2QrYzppZih0aGlzLm1vZGU9PVRlbXBsYXRlLm1vZGVzLkxJVEVSQUwpe3RoaXMuX2FkZE91dHB1dChsaW5lKX10aGlzLm1vZGU9bnVsbDt0aGlzLnRydW5jYXRlPWxpbmUuaW5kZXhPZihcIi1cIik9PT0wfHxsaW5lLmluZGV4T2YoXCJfXCIpPT09MDticmVhaztkZWZhdWx0OmlmKHRoaXMubW9kZSl7c3dpdGNoKHRoaXMubW9kZSl7Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5FVkFMOmNhc2UgVGVtcGxhdGUubW9kZXMuRVNDQVBFRDpjYXNlIFRlbXBsYXRlLm1vZGVzLlJBVzppZihsaW5lLmxhc3RJbmRleE9mKFwiLy9cIik+bGluZS5sYXN0SW5kZXhPZihcIlxcblwiKSl7bGluZSs9XCJcXG5cIn19c3dpdGNoKHRoaXMubW9kZSl7Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5FVkFMOnRoaXMuc291cmNlKz1cIiAgICA7IFwiK2xpbmUrXCJcXG5cIjticmVhaztjYXNlIFRlbXBsYXRlLm1vZGVzLkVTQ0FQRUQ6dGhpcy5zb3VyY2UrPVwiICAgIDsgX19hcHBlbmQoZXNjYXBlRm4oXCIrc3RyaXBTZW1pKGxpbmUpK1wiKSlcIitcIlxcblwiO2JyZWFrO2Nhc2UgVGVtcGxhdGUubW9kZXMuUkFXOnRoaXMuc291cmNlKz1cIiAgICA7IF9fYXBwZW5kKFwiK3N0cmlwU2VtaShsaW5lKStcIilcIitcIlxcblwiO2JyZWFrO2Nhc2UgVGVtcGxhdGUubW9kZXMuQ09NTUVOVDpicmVhaztjYXNlIFRlbXBsYXRlLm1vZGVzLkxJVEVSQUw6dGhpcy5fYWRkT3V0cHV0KGxpbmUpO2JyZWFrfX1lbHNle3RoaXMuX2FkZE91dHB1dChsaW5lKX19aWYoc2VsZi5vcHRzLmNvbXBpbGVEZWJ1ZyYmbmV3TGluZUNvdW50KXt0aGlzLmN1cnJlbnRMaW5lKz1uZXdMaW5lQ291bnQ7dGhpcy5zb3VyY2UrPVwiICAgIDsgX19saW5lID0gXCIrdGhpcy5jdXJyZW50TGluZStcIlxcblwifX19O2V4cG9ydHMuZXNjYXBlWE1MPXV0aWxzLmVzY2FwZVhNTDtleHBvcnRzLl9fZXhwcmVzcz1leHBvcnRzLnJlbmRlckZpbGU7ZXhwb3J0cy5WRVJTSU9OPV9WRVJTSU9OX1NUUklORztleHBvcnRzLm5hbWU9X05BTUU7aWYodHlwZW9mIHdpbmRvdyE9XCJ1bmRlZmluZWRcIil7d2luZG93LmVqcz1leHBvcnRzfX0se1wiLi4vcGFja2FnZS5qc29uXCI6NixcIi4vdXRpbHNcIjoyLGZzOjMscGF0aDo0fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XCJ1c2Ugc3RyaWN0XCI7dmFyIHJlZ0V4cENoYXJzPS9bfFxcXFx7fSgpW1xcXV4kKyo/Ll0vZzt2YXIgaGFzT3duUHJvcGVydHk9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTt2YXIgaGFzT3duPWZ1bmN0aW9uKG9iaixrZXkpe3JldHVybiBoYXNPd25Qcm9wZXJ0eS5hcHBseShvYmosW2tleV0pfTtleHBvcnRzLmVzY2FwZVJlZ0V4cENoYXJzPWZ1bmN0aW9uKHN0cmluZyl7aWYoIXN0cmluZyl7cmV0dXJuXCJcIn1yZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZWdFeHBDaGFycyxcIlxcXFwkJlwiKX07dmFyIF9FTkNPREVfSFRNTF9SVUxFUz17XCImXCI6XCImYW1wO1wiLFwiPFwiOlwiJmx0O1wiLFwiPlwiOlwiJmd0O1wiLCdcIic6XCImIzM0O1wiLFwiJ1wiOlwiJiMzOTtcIn07dmFyIF9NQVRDSF9IVE1MPS9bJjw+J1wiXS9nO2Z1bmN0aW9uIGVuY29kZV9jaGFyKGMpe3JldHVybiBfRU5DT0RFX0hUTUxfUlVMRVNbY118fGN9dmFyIGVzY2FwZUZ1bmNTdHI9XCJ2YXIgX0VOQ09ERV9IVE1MX1JVTEVTID0ge1xcblwiKycgICAgICBcIiZcIjogXCImYW1wO1wiXFxuJysnICAgICwgXCI8XCI6IFwiJmx0O1wiXFxuJysnICAgICwgXCI+XCI6IFwiJmd0O1wiXFxuJysnICAgICwgXFwnXCJcXCc6IFwiJiMzNDtcIlxcbicrJyAgICAsIFwiXFwnXCI6IFwiJiMzOTtcIlxcbicrXCIgICAgfVxcblwiK1wiICAsIF9NQVRDSF9IVE1MID0gL1smPD4nXFxcIl0vZztcXG5cIitcImZ1bmN0aW9uIGVuY29kZV9jaGFyKGMpIHtcXG5cIitcIiAgcmV0dXJuIF9FTkNPREVfSFRNTF9SVUxFU1tjXSB8fCBjO1xcblwiK1wifTtcXG5cIjtleHBvcnRzLmVzY2FwZVhNTD1mdW5jdGlvbihtYXJrdXApe3JldHVybiBtYXJrdXA9PXVuZGVmaW5lZD9cIlwiOlN0cmluZyhtYXJrdXApLnJlcGxhY2UoX01BVENIX0hUTUwsZW5jb2RlX2NoYXIpfTtmdW5jdGlvbiBlc2NhcGVYTUxUb1N0cmluZygpe3JldHVybiBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0aGlzKStcIjtcXG5cIitlc2NhcGVGdW5jU3RyfXRyeXtpZih0eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnR5PT09XCJmdW5jdGlvblwiKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5lc2NhcGVYTUwsXCJ0b1N0cmluZ1wiLHt2YWx1ZTplc2NhcGVYTUxUb1N0cmluZ30pfWVsc2V7ZXhwb3J0cy5lc2NhcGVYTUwudG9TdHJpbmc9ZXNjYXBlWE1MVG9TdHJpbmd9fWNhdGNoKGVycil7Y29uc29sZS53YXJuKFwiVW5hYmxlIHRvIHNldCBlc2NhcGVYTUwudG9TdHJpbmcgKGlzIHRoZSBGdW5jdGlvbiBwcm90b3R5cGUgZnJvemVuPylcIil9ZXhwb3J0cy5zaGFsbG93Q29weT1mdW5jdGlvbih0byxmcm9tKXtmcm9tPWZyb218fHt9O2lmKHRvIT09bnVsbCYmdG8hPT11bmRlZmluZWQpe2Zvcih2YXIgcCBpbiBmcm9tKXtpZighaGFzT3duKGZyb20scCkpe2NvbnRpbnVlfWlmKHA9PT1cIl9fcHJvdG9fX1wifHxwPT09XCJjb25zdHJ1Y3RvclwiKXtjb250aW51ZX10b1twXT1mcm9tW3BdfX1yZXR1cm4gdG99O2V4cG9ydHMuc2hhbGxvd0NvcHlGcm9tTGlzdD1mdW5jdGlvbih0byxmcm9tLGxpc3Qpe2xpc3Q9bGlzdHx8W107ZnJvbT1mcm9tfHx7fTtpZih0byE9PW51bGwmJnRvIT09dW5kZWZpbmVkKXtmb3IodmFyIGk9MDtpPGxpc3QubGVuZ3RoO2krKyl7dmFyIHA9bGlzdFtpXTtpZih0eXBlb2YgZnJvbVtwXSE9XCJ1bmRlZmluZWRcIil7aWYoIWhhc093bihmcm9tLHApKXtjb250aW51ZX1pZihwPT09XCJfX3Byb3RvX19cInx8cD09PVwiY29uc3RydWN0b3JcIil7Y29udGludWV9dG9bcF09ZnJvbVtwXX19fXJldHVybiB0b307ZXhwb3J0cy5jYWNoZT17X2RhdGE6e30sc2V0OmZ1bmN0aW9uKGtleSx2YWwpe3RoaXMuX2RhdGFba2V5XT12YWx9LGdldDpmdW5jdGlvbihrZXkpe3JldHVybiB0aGlzLl9kYXRhW2tleV19LHJlbW92ZTpmdW5jdGlvbihrZXkpe2RlbGV0ZSB0aGlzLl9kYXRhW2tleV19LHJlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT17fX19O2V4cG9ydHMuaHlwaGVuVG9DYW1lbD1mdW5jdGlvbihzdHIpe3JldHVybiBzdHIucmVwbGFjZSgvLVthLXpdL2csZnVuY3Rpb24obWF0Y2gpe3JldHVybiBtYXRjaFsxXS50b1VwcGVyQ2FzZSgpfSl9O2V4cG9ydHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZT1mdW5jdGlvbigpe2lmKHR5cGVvZiBPYmplY3QuY3JlYXRlPT1cImZ1bmN0aW9uXCIpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBPYmplY3QuY3JlYXRlKG51bGwpfX1pZighKHtfX3Byb3RvX186bnVsbH1pbnN0YW5jZW9mIE9iamVjdCkpe3JldHVybiBmdW5jdGlvbigpe3JldHVybntfX3Byb3RvX186bnVsbH19fXJldHVybiBmdW5jdGlvbigpe3JldHVybnt9fX0oKX0se31dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe30se31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpeyhmdW5jdGlvbihwcm9jZXNzKXtmdW5jdGlvbiBub3JtYWxpemVBcnJheShwYXJ0cyxhbGxvd0Fib3ZlUm9vdCl7dmFyIHVwPTA7Zm9yKHZhciBpPXBhcnRzLmxlbmd0aC0xO2k+PTA7aS0tKXt2YXIgbGFzdD1wYXJ0c1tpXTtpZihsYXN0PT09XCIuXCIpe3BhcnRzLnNwbGljZShpLDEpfWVsc2UgaWYobGFzdD09PVwiLi5cIil7cGFydHMuc3BsaWNlKGksMSk7dXArK31lbHNlIGlmKHVwKXtwYXJ0cy5zcGxpY2UoaSwxKTt1cC0tfX1pZihhbGxvd0Fib3ZlUm9vdCl7Zm9yKDt1cC0tO3VwKXtwYXJ0cy51bnNoaWZ0KFwiLi5cIil9fXJldHVybiBwYXJ0c31leHBvcnRzLnJlc29sdmU9ZnVuY3Rpb24oKXt2YXIgcmVzb2x2ZWRQYXRoPVwiXCIscmVzb2x2ZWRBYnNvbHV0ZT1mYWxzZTtmb3IodmFyIGk9YXJndW1lbnRzLmxlbmd0aC0xO2k+PS0xJiYhcmVzb2x2ZWRBYnNvbHV0ZTtpLS0pe3ZhciBwYXRoPWk+PTA/YXJndW1lbnRzW2ldOnByb2Nlc3MuY3dkKCk7aWYodHlwZW9mIHBhdGghPT1cInN0cmluZ1wiKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnRzIHRvIHBhdGgucmVzb2x2ZSBtdXN0IGJlIHN0cmluZ3NcIil9ZWxzZSBpZighcGF0aCl7Y29udGludWV9cmVzb2x2ZWRQYXRoPXBhdGgrXCIvXCIrcmVzb2x2ZWRQYXRoO3Jlc29sdmVkQWJzb2x1dGU9cGF0aC5jaGFyQXQoMCk9PT1cIi9cIn1yZXNvbHZlZFBhdGg9bm9ybWFsaXplQXJyYXkoZmlsdGVyKHJlc29sdmVkUGF0aC5zcGxpdChcIi9cIiksZnVuY3Rpb24ocCl7cmV0dXJuISFwfSksIXJlc29sdmVkQWJzb2x1dGUpLmpvaW4oXCIvXCIpO3JldHVybihyZXNvbHZlZEFic29sdXRlP1wiL1wiOlwiXCIpK3Jlc29sdmVkUGF0aHx8XCIuXCJ9O2V4cG9ydHMubm9ybWFsaXplPWZ1bmN0aW9uKHBhdGgpe3ZhciBpc0Fic29sdXRlPWV4cG9ydHMuaXNBYnNvbHV0ZShwYXRoKSx0cmFpbGluZ1NsYXNoPXN1YnN0cihwYXRoLC0xKT09PVwiL1wiO3BhdGg9bm9ybWFsaXplQXJyYXkoZmlsdGVyKHBhdGguc3BsaXQoXCIvXCIpLGZ1bmN0aW9uKHApe3JldHVybiEhcH0pLCFpc0Fic29sdXRlKS5qb2luKFwiL1wiKTtpZighcGF0aCYmIWlzQWJzb2x1dGUpe3BhdGg9XCIuXCJ9aWYocGF0aCYmdHJhaWxpbmdTbGFzaCl7cGF0aCs9XCIvXCJ9cmV0dXJuKGlzQWJzb2x1dGU/XCIvXCI6XCJcIikrcGF0aH07ZXhwb3J0cy5pc0Fic29sdXRlPWZ1bmN0aW9uKHBhdGgpe3JldHVybiBwYXRoLmNoYXJBdCgwKT09PVwiL1wifTtleHBvcnRzLmpvaW49ZnVuY3Rpb24oKXt2YXIgcGF0aHM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApO3JldHVybiBleHBvcnRzLm5vcm1hbGl6ZShmaWx0ZXIocGF0aHMsZnVuY3Rpb24ocCxpbmRleCl7aWYodHlwZW9mIHAhPT1cInN0cmluZ1wiKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnRzIHRvIHBhdGguam9pbiBtdXN0IGJlIHN0cmluZ3NcIil9cmV0dXJuIHB9KS5qb2luKFwiL1wiKSl9O2V4cG9ydHMucmVsYXRpdmU9ZnVuY3Rpb24oZnJvbSx0byl7ZnJvbT1leHBvcnRzLnJlc29sdmUoZnJvbSkuc3Vic3RyKDEpO3RvPWV4cG9ydHMucmVzb2x2ZSh0bykuc3Vic3RyKDEpO2Z1bmN0aW9uIHRyaW0oYXJyKXt2YXIgc3RhcnQ9MDtmb3IoO3N0YXJ0PGFyci5sZW5ndGg7c3RhcnQrKyl7aWYoYXJyW3N0YXJ0XSE9PVwiXCIpYnJlYWt9dmFyIGVuZD1hcnIubGVuZ3RoLTE7Zm9yKDtlbmQ+PTA7ZW5kLS0pe2lmKGFycltlbmRdIT09XCJcIilicmVha31pZihzdGFydD5lbmQpcmV0dXJuW107cmV0dXJuIGFyci5zbGljZShzdGFydCxlbmQtc3RhcnQrMSl9dmFyIGZyb21QYXJ0cz10cmltKGZyb20uc3BsaXQoXCIvXCIpKTt2YXIgdG9QYXJ0cz10cmltKHRvLnNwbGl0KFwiL1wiKSk7dmFyIGxlbmd0aD1NYXRoLm1pbihmcm9tUGFydHMubGVuZ3RoLHRvUGFydHMubGVuZ3RoKTt2YXIgc2FtZVBhcnRzTGVuZ3RoPWxlbmd0aDtmb3IodmFyIGk9MDtpPGxlbmd0aDtpKyspe2lmKGZyb21QYXJ0c1tpXSE9PXRvUGFydHNbaV0pe3NhbWVQYXJ0c0xlbmd0aD1pO2JyZWFrfX12YXIgb3V0cHV0UGFydHM9W107Zm9yKHZhciBpPXNhbWVQYXJ0c0xlbmd0aDtpPGZyb21QYXJ0cy5sZW5ndGg7aSsrKXtvdXRwdXRQYXJ0cy5wdXNoKFwiLi5cIil9b3V0cHV0UGFydHM9b3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuZ3RoKSk7cmV0dXJuIG91dHB1dFBhcnRzLmpvaW4oXCIvXCIpfTtleHBvcnRzLnNlcD1cIi9cIjtleHBvcnRzLmRlbGltaXRlcj1cIjpcIjtleHBvcnRzLmRpcm5hbWU9ZnVuY3Rpb24ocGF0aCl7aWYodHlwZW9mIHBhdGghPT1cInN0cmluZ1wiKXBhdGg9cGF0aCtcIlwiO2lmKHBhdGgubGVuZ3RoPT09MClyZXR1cm5cIi5cIjt2YXIgY29kZT1wYXRoLmNoYXJDb2RlQXQoMCk7dmFyIGhhc1Jvb3Q9Y29kZT09PTQ3O3ZhciBlbmQ9LTE7dmFyIG1hdGNoZWRTbGFzaD10cnVlO2Zvcih2YXIgaT1wYXRoLmxlbmd0aC0xO2k+PTE7LS1pKXtjb2RlPXBhdGguY2hhckNvZGVBdChpKTtpZihjb2RlPT09NDcpe2lmKCFtYXRjaGVkU2xhc2gpe2VuZD1pO2JyZWFrfX1lbHNle21hdGNoZWRTbGFzaD1mYWxzZX19aWYoZW5kPT09LTEpcmV0dXJuIGhhc1Jvb3Q/XCIvXCI6XCIuXCI7aWYoaGFzUm9vdCYmZW5kPT09MSl7cmV0dXJuXCIvXCJ9cmV0dXJuIHBhdGguc2xpY2UoMCxlbmQpfTtmdW5jdGlvbiBiYXNlbmFtZShwYXRoKXtpZih0eXBlb2YgcGF0aCE9PVwic3RyaW5nXCIpcGF0aD1wYXRoK1wiXCI7dmFyIHN0YXJ0PTA7dmFyIGVuZD0tMTt2YXIgbWF0Y2hlZFNsYXNoPXRydWU7dmFyIGk7Zm9yKGk9cGF0aC5sZW5ndGgtMTtpPj0wOy0taSl7aWYocGF0aC5jaGFyQ29kZUF0KGkpPT09NDcpe2lmKCFtYXRjaGVkU2xhc2gpe3N0YXJ0PWkrMTticmVha319ZWxzZSBpZihlbmQ9PT0tMSl7bWF0Y2hlZFNsYXNoPWZhbHNlO2VuZD1pKzF9fWlmKGVuZD09PS0xKXJldHVyblwiXCI7cmV0dXJuIHBhdGguc2xpY2Uoc3RhcnQsZW5kKX1leHBvcnRzLmJhc2VuYW1lPWZ1bmN0aW9uKHBhdGgsZXh0KXt2YXIgZj1iYXNlbmFtZShwYXRoKTtpZihleHQmJmYuc3Vic3RyKC0xKmV4dC5sZW5ndGgpPT09ZXh0KXtmPWYuc3Vic3RyKDAsZi5sZW5ndGgtZXh0Lmxlbmd0aCl9cmV0dXJuIGZ9O2V4cG9ydHMuZXh0bmFtZT1mdW5jdGlvbihwYXRoKXtpZih0eXBlb2YgcGF0aCE9PVwic3RyaW5nXCIpcGF0aD1wYXRoK1wiXCI7dmFyIHN0YXJ0RG90PS0xO3ZhciBzdGFydFBhcnQ9MDt2YXIgZW5kPS0xO3ZhciBtYXRjaGVkU2xhc2g9dHJ1ZTt2YXIgcHJlRG90U3RhdGU9MDtmb3IodmFyIGk9cGF0aC5sZW5ndGgtMTtpPj0wOy0taSl7dmFyIGNvZGU9cGF0aC5jaGFyQ29kZUF0KGkpO2lmKGNvZGU9PT00Nyl7aWYoIW1hdGNoZWRTbGFzaCl7c3RhcnRQYXJ0PWkrMTticmVha31jb250aW51ZX1pZihlbmQ9PT0tMSl7bWF0Y2hlZFNsYXNoPWZhbHNlO2VuZD1pKzF9aWYoY29kZT09PTQ2KXtpZihzdGFydERvdD09PS0xKXN0YXJ0RG90PWk7ZWxzZSBpZihwcmVEb3RTdGF0ZSE9PTEpcHJlRG90U3RhdGU9MX1lbHNlIGlmKHN0YXJ0RG90IT09LTEpe3ByZURvdFN0YXRlPS0xfX1pZihzdGFydERvdD09PS0xfHxlbmQ9PT0tMXx8cHJlRG90U3RhdGU9PT0wfHxwcmVEb3RTdGF0ZT09PTEmJnN0YXJ0RG90PT09ZW5kLTEmJnN0YXJ0RG90PT09c3RhcnRQYXJ0KzEpe3JldHVyblwiXCJ9cmV0dXJuIHBhdGguc2xpY2Uoc3RhcnREb3QsZW5kKX07ZnVuY3Rpb24gZmlsdGVyKHhzLGYpe2lmKHhzLmZpbHRlcilyZXR1cm4geHMuZmlsdGVyKGYpO3ZhciByZXM9W107Zm9yKHZhciBpPTA7aTx4cy5sZW5ndGg7aSsrKXtpZihmKHhzW2ldLGkseHMpKXJlcy5wdXNoKHhzW2ldKX1yZXR1cm4gcmVzfXZhciBzdWJzdHI9XCJhYlwiLnN1YnN0cigtMSk9PT1cImJcIj9mdW5jdGlvbihzdHIsc3RhcnQsbGVuKXtyZXR1cm4gc3RyLnN1YnN0cihzdGFydCxsZW4pfTpmdW5jdGlvbihzdHIsc3RhcnQsbGVuKXtpZihzdGFydDwwKXN0YXJ0PXN0ci5sZW5ndGgrc3RhcnQ7cmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsbGVuKX19KS5jYWxsKHRoaXMscmVxdWlyZShcIl9wcm9jZXNzXCIpKX0se19wcm9jZXNzOjV9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgcHJvY2Vzcz1tb2R1bGUuZXhwb3J0cz17fTt2YXIgY2FjaGVkU2V0VGltZW91dDt2YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O2Z1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQoKXt0aHJvdyBuZXcgRXJyb3IoXCJjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9KGZ1bmN0aW9uKCl7dHJ5e2lmKHR5cGVvZiBzZXRUaW1lb3V0PT09XCJmdW5jdGlvblwiKXtjYWNoZWRTZXRUaW1lb3V0PXNldFRpbWVvdXR9ZWxzZXtjYWNoZWRTZXRUaW1lb3V0PWRlZmF1bHRTZXRUaW1vdXR9fWNhdGNoKGUpe2NhY2hlZFNldFRpbWVvdXQ9ZGVmYXVsdFNldFRpbW91dH10cnl7aWYodHlwZW9mIGNsZWFyVGltZW91dD09PVwiZnVuY3Rpb25cIil7Y2FjaGVkQ2xlYXJUaW1lb3V0PWNsZWFyVGltZW91dH1lbHNle2NhY2hlZENsZWFyVGltZW91dD1kZWZhdWx0Q2xlYXJUaW1lb3V0fX1jYXRjaChlKXtjYWNoZWRDbGVhclRpbWVvdXQ9ZGVmYXVsdENsZWFyVGltZW91dH19KSgpO2Z1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKXtpZihjYWNoZWRTZXRUaW1lb3V0PT09c2V0VGltZW91dCl7cmV0dXJuIHNldFRpbWVvdXQoZnVuLDApfWlmKChjYWNoZWRTZXRUaW1lb3V0PT09ZGVmYXVsdFNldFRpbW91dHx8IWNhY2hlZFNldFRpbWVvdXQpJiZzZXRUaW1lb3V0KXtjYWNoZWRTZXRUaW1lb3V0PXNldFRpbWVvdXQ7cmV0dXJuIHNldFRpbWVvdXQoZnVuLDApfXRyeXtyZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sMCl9Y2F0Y2goZSl7dHJ5e3JldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCxmdW4sMCl9Y2F0Y2goZSl7cmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLGZ1biwwKX19fWZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpe2lmKGNhY2hlZENsZWFyVGltZW91dD09PWNsZWFyVGltZW91dCl7cmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpfWlmKChjYWNoZWRDbGVhclRpbWVvdXQ9PT1kZWZhdWx0Q2xlYXJUaW1lb3V0fHwhY2FjaGVkQ2xlYXJUaW1lb3V0KSYmY2xlYXJUaW1lb3V0KXtjYWNoZWRDbGVhclRpbWVvdXQ9Y2xlYXJUaW1lb3V0O3JldHVybiBjbGVhclRpbWVvdXQobWFya2VyKX10cnl7cmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpfWNhdGNoKGUpe3RyeXtyZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCxtYXJrZXIpfWNhdGNoKGUpe3JldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLG1hcmtlcil9fX12YXIgcXVldWU9W107dmFyIGRyYWluaW5nPWZhbHNlO3ZhciBjdXJyZW50UXVldWU7dmFyIHF1ZXVlSW5kZXg9LTE7ZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCl7aWYoIWRyYWluaW5nfHwhY3VycmVudFF1ZXVlKXtyZXR1cm59ZHJhaW5pbmc9ZmFsc2U7aWYoY3VycmVudFF1ZXVlLmxlbmd0aCl7cXVldWU9Y3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSl9ZWxzZXtxdWV1ZUluZGV4PS0xfWlmKHF1ZXVlLmxlbmd0aCl7ZHJhaW5RdWV1ZSgpfX1mdW5jdGlvbiBkcmFpblF1ZXVlKCl7aWYoZHJhaW5pbmcpe3JldHVybn12YXIgdGltZW91dD1ydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7ZHJhaW5pbmc9dHJ1ZTt2YXIgbGVuPXF1ZXVlLmxlbmd0aDt3aGlsZShsZW4pe2N1cnJlbnRRdWV1ZT1xdWV1ZTtxdWV1ZT1bXTt3aGlsZSgrK3F1ZXVlSW5kZXg8bGVuKXtpZihjdXJyZW50UXVldWUpe2N1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKX19cXVldWVJbmRleD0tMTtsZW49cXVldWUubGVuZ3RofWN1cnJlbnRRdWV1ZT1udWxsO2RyYWluaW5nPWZhbHNlO3J1bkNsZWFyVGltZW91dCh0aW1lb3V0KX1wcm9jZXNzLm5leHRUaWNrPWZ1bmN0aW9uKGZ1bil7dmFyIGFyZ3M9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKXtmb3IodmFyIGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXthcmdzW2ktMV09YXJndW1lbnRzW2ldfX1xdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1bixhcmdzKSk7aWYocXVldWUubGVuZ3RoPT09MSYmIWRyYWluaW5nKXtydW5UaW1lb3V0KGRyYWluUXVldWUpfX07ZnVuY3Rpb24gSXRlbShmdW4sYXJyYXkpe3RoaXMuZnVuPWZ1bjt0aGlzLmFycmF5PWFycmF5fUl0ZW0ucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9O3Byb2Nlc3MudGl0bGU9XCJicm93c2VyXCI7cHJvY2Vzcy5icm93c2VyPXRydWU7cHJvY2Vzcy5lbnY9e307cHJvY2Vzcy5hcmd2PVtdO3Byb2Nlc3MudmVyc2lvbj1cIlwiO3Byb2Nlc3MudmVyc2lvbnM9e307ZnVuY3Rpb24gbm9vcCgpe31wcm9jZXNzLm9uPW5vb3A7cHJvY2Vzcy5hZGRMaXN0ZW5lcj1ub29wO3Byb2Nlc3Mub25jZT1ub29wO3Byb2Nlc3Mub2ZmPW5vb3A7cHJvY2Vzcy5yZW1vdmVMaXN0ZW5lcj1ub29wO3Byb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzPW5vb3A7cHJvY2Vzcy5lbWl0PW5vb3A7cHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXI9bm9vcDtwcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXI9bm9vcDtwcm9jZXNzLmxpc3RlbmVycz1mdW5jdGlvbihuYW1lKXtyZXR1cm5bXX07cHJvY2Vzcy5iaW5kaW5nPWZ1bmN0aW9uKG5hbWUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpfTtwcm9jZXNzLmN3ZD1mdW5jdGlvbigpe3JldHVyblwiL1wifTtwcm9jZXNzLmNoZGlyPWZ1bmN0aW9uKGRpcil7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkXCIpfTtwcm9jZXNzLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fSx7fV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9e25hbWU6XCJlanNcIixkZXNjcmlwdGlvbjpcIkVtYmVkZGVkIEphdmFTY3JpcHQgdGVtcGxhdGVzXCIsa2V5d29yZHM6W1widGVtcGxhdGVcIixcImVuZ2luZVwiLFwiZWpzXCJdLHZlcnNpb246XCIzLjEuOVwiLGF1dGhvcjpcIk1hdHRoZXcgRWVybmlzc2UgPG1kZUBmbGVlZ2l4Lm9yZz4gKGh0dHA6Ly9mbGVlZ2l4Lm9yZylcIixsaWNlbnNlOlwiQXBhY2hlLTIuMFwiLGJpbjp7ZWpzOlwiLi9iaW4vY2xpLmpzXCJ9LG1haW46XCIuL2xpYi9lanMuanNcIixqc2RlbGl2cjpcImVqcy5taW4uanNcIix1bnBrZzpcImVqcy5taW4uanNcIixyZXBvc2l0b3J5Ont0eXBlOlwiZ2l0XCIsdXJsOlwiZ2l0Oi8vZ2l0aHViLmNvbS9tZGUvZWpzLmdpdFwifSxidWdzOlwiaHR0cHM6Ly9naXRodWIuY29tL21kZS9lanMvaXNzdWVzXCIsaG9tZXBhZ2U6XCJodHRwczovL2dpdGh1Yi5jb20vbWRlL2Vqc1wiLGRlcGVuZGVuY2llczp7amFrZTpcIl4xMC44LjVcIn0sZGV2RGVwZW5kZW5jaWVzOnticm93c2VyaWZ5OlwiXjE2LjUuMVwiLGVzbGludDpcIl42LjguMFwiLFwiZ2l0LWRpcmVjdG9yeS1kZXBsb3lcIjpcIl4xLjUuMVwiLGpzZG9jOlwiXjQuMC4yXCIsXCJscnUtY2FjaGVcIjpcIl40LjAuMVwiLG1vY2hhOlwiXjEwLjIuMFwiLFwidWdsaWZ5LWpzXCI6XCJeMy4zLjE2XCJ9LGVuZ2luZXM6e25vZGU6XCI+PTAuMTAuMFwifSxzY3JpcHRzOnt0ZXN0OlwibW9jaGEgLXUgdGRkXCJ9fX0se31dfSx7fSxbMV0pKDEpfSk7XG4iLCAiLyoqXG4gKiBBbnRocm9waWNBZGFwdGVyIGNsYXNzIHByb3ZpZGVzIG1ldGhvZHMgdG8gYWRhcHQgdGhlIGNoYXQgbW9kZWwgaW50ZXJhY3Rpb25zIHNwZWNpZmljYWxseSBmb3IgdGhlIEFudGhyb3BpYyBtb2RlbC5cbiAqIEl0IGluY2x1ZGVzIG1ldGhvZHMgdG8gcHJlcGFyZSByZXF1ZXN0IGJvZGllcywgY291bnQgYW5kIGVzdGltYXRlIHRva2VucywgYW5kIGhhbmRsZSB0b29sIGNhbGxzIGFuZCBtZXNzYWdlcy5cbiAqL1xuY2xhc3MgQW50aHJvcGljQWRhcHRlciB7XG4gIC8qKlxuICAgKiBQcmVwYXJlcyB0aGUgcmVxdWVzdCBib2R5IGZvciB0aGUgQW50aHJvcGljIEFQSSBieSBjb252ZXJ0aW5nIENoYXRNTCBmb3JtYXQgdG8gYSBmb3JtYXQgY29tcGF0aWJsZSB3aXRoIEFudGhyb3BpYy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBUaGUgb3B0aW9ucyBvYmplY3QgY29udGFpbmluZyBtZXNzYWdlcyBhbmQgb3RoZXIgcGFyYW1ldGVycyBpbiBDaGF0TUwgZm9ybWF0LlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcmVxdWVzdCBib2R5IGZvcm1hdHRlZCBmb3IgdGhlIEFudGhyb3BpYyBBUEkuXG4gICAqL1xuICBwcmVwYXJlX3JlcXVlc3RfYm9keShvcHRzKSB7IHJldHVybiBjaGF0bWxfdG9fYW50aHJvcGljKG9wdHMpOyB9XG4gIC8qKlxuICAgKiBDb3VudHMgdGhlIHRva2VucyBpbiB0aGUgaW5wdXQgYnkgZXN0aW1hdGluZyB0aGVtLCBhcyB0aGUgQW50aHJvcGljIG1vZGVsIGRvZXMgbm90IHByb3ZpZGUgYSBkaXJlY3QgbWV0aG9kLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IGlucHV0IC0gVGhlIGlucHV0IHRleHQgb3Igb2JqZWN0IHRvIGNvdW50IHRva2VucyBpbi5cbiAgICogQHJldHVybnMge1Byb21pc2U8bnVtYmVyPn0gVGhlIGVzdGltYXRlZCBudW1iZXIgb2YgdG9rZW5zIGluIHRoZSBpbnB1dC5cbiAgICovXG4gIGFzeW5jIGNvdW50X3Rva2VucyhpbnB1dCkge1xuICAgIC8vIEN1cnJlbnRseSwgdGhlIEFudGhyb3BpYyBtb2RlbCBkb2VzIG5vdCBwcm92aWRlIGEgd2F5IHRvIGNvdW50IHRva2Vuc1xuICAgIHJldHVybiB0aGlzLmVzdGltYXRlX3Rva2VucyhpbnB1dCk7XG4gIH1cbiAgLyoqXG4gICAqIEVzdGltYXRlcyB0aGUgbnVtYmVyIG9mIHRva2VucyBpbiB0aGUgaW5wdXQgYmFzZWQgb24gYSByb3VnaCBhdmVyYWdlIHRva2VuIHNpemUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gaW5wdXQgLSBUaGUgaW5wdXQgdGV4dCBvciBvYmplY3QgdG8gZXN0aW1hdGUgdG9rZW5zIGluLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgZXN0aW1hdGVkIG51bWJlciBvZiB0b2tlbnMuXG4gICAqL1xuICBlc3RpbWF0ZV90b2tlbnMoaW5wdXQpe1xuICAgIGlmKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcpIGlucHV0ID0gSlNPTi5zdHJpbmdpZnkoaW5wdXQpO1xuICAgIC8vIE5vdGU6IFRoZSBkaXZpc2lvbiBieSA2IGlzIGEgcm91Z2ggZXN0aW1hdGUgYmFzZWQgb24gb2JzZXJ2ZWQgYXZlcmFnZSB0b2tlbiBzaXplLlxuICAgIHJldHVybiBNYXRoLmNlaWwoaW5wdXQubGVuZ3RoIC8gNik7IC8vIFVzZSBNYXRoLmNlaWwgZm9yIGEgbW9yZSBhY2N1cmF0ZSBjb3VudFxuICB9XG4gIC8qKlxuICAgKiBFeHRyYWN0cyB0aGUgZmlyc3QgdG9vbCBjYWxsIGZyb20gdGhlIEpTT04gcmVzcG9uc2UgY29udGVudC5cbiAgICogQHBhcmFtIHtPYmplY3R9IGpzb24gLSBUaGUgSlNPTiByZXNwb25zZSBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgdGhlIHRvb2wgY2FsbC5cbiAgICogQHJldHVybnMge09iamVjdHxudWxsfSBUaGUgZmlyc3QgdG9vbCBjYWxsIGZvdW5kLCBvciBudWxsIGlmIG5vbmUgZXhpc3QuXG4gICAqL1xuICBnZXRfdG9vbF9jYWxsKGpzb24pe1xuICAgIHJldHVybiBqc29uLmNvbnRlbnQuZmluZChtc2cgPT4gbXNnLnR5cGUgPT09ICd0b29sX3VzZScpO1xuICB9XG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIGlucHV0IGNvbnRlbnQgb2YgYSB0b29sIGNhbGwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0b29sX2NhbGwgLSBUaGUgdG9vbCBjYWxsIG9iamVjdCBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgdGhlIGlucHV0LlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgaW5wdXQgb2YgdGhlIHRvb2wgY2FsbC5cbiAgICovXG4gIGdldF90b29sX2NhbGxfY29udGVudCh0b29sX2NhbGwpe1xuICAgIHJldHVybiB0b29sX2NhbGwuaW5wdXQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgbmFtZSBvZiB0aGUgdG9vbCBmcm9tIGEgdG9vbCBjYWxsIG9iamVjdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IHRvb2xfY2FsbCAtIFRoZSB0b29sIGNhbGwgb2JqZWN0IGZyb20gd2hpY2ggdG8gZXh0cmFjdCB0aGUgbmFtZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIG5hbWUgb2YgdGhlIHRvb2wuXG4gICAqL1xuICBnZXRfdG9vbF9uYW1lKHRvb2xfY2FsbCl7XG4gICAgcmV0dXJuIHRvb2xfY2FsbC5uYW1lO1xuICB9XG4gIC8qKlxuICAgKiBFeHRyYWN0cyB0aGUgZmlyc3QgbWVzc2FnZSBmcm9tIHRoZSBKU09OIHJlc3BvbnNlIGNvbnRlbnQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIC0gVGhlIEpTT04gcmVzcG9uc2UgZnJvbSB3aGljaCB0byBleHRyYWN0IHRoZSBtZXNzYWdlLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fG51bGx9IFRoZSBmaXJzdCBtZXNzYWdlIGZvdW5kLCBvciBudWxsIGlmIG5vbmUgZXhpc3QuXG4gICAqL1xuICBnZXRfbWVzc2FnZShqc29uKXsgcmV0dXJuIGpzb24uY29udGVudD8uWzBdOyB9XG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIGNvbnRlbnQgb2YgdGhlIGZpcnN0IG1lc3NhZ2UgZnJvbSB0aGUgSlNPTiByZXNwb25zZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IGpzb24gLSBUaGUgSlNPTiByZXNwb25zZSBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgdGhlIG1lc3NhZ2UgY29udGVudC5cbiAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBUaGUgY29udGVudCBvZiB0aGUgZmlyc3QgbWVzc2FnZSwgb3IgbnVsbCBpZiBubyBtZXNzYWdlIGlzIGZvdW5kLlxuICAgKi9cbiAgZ2V0X21lc3NhZ2VfY29udGVudChqc29uKSB7IHJldHVybiB0aGlzLmdldF9tZXNzYWdlKGpzb24pPy5bdGhpcy5nZXRfbWVzc2FnZShqc29uKT8udHlwZV07IH1cbn1cbmV4cG9ydHMuQW50aHJvcGljQWRhcHRlciA9IEFudGhyb3BpY0FkYXB0ZXI7XG4vLyBodHRwczovL2RvY3MuYW50aHJvcGljLmNvbS9jbGF1ZGUvcmVmZXJlbmNlL21lc3NhZ2VzX3Bvc3Rcbi8qKlxuICogQ29udmVydCBhIENoYXRNTCBvYmplY3QgdG8gYW4gQW50aHJvcGljIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBUaGUgQ2hhdE1MIG9iamVjdFxuICogQGRlc2NyaXB0aW9uIFRoaXMgZnVuY3Rpb24gY29udmVydHMgYSBDaGF0TUwgb2JqZWN0IHRvIGFuIEFudGhyb3BpYyBvYmplY3QuIEl0IGZpbHRlcnMgb3V0IHN5c3RlbSBtZXNzYWdlcyBhbmQgYWRkcyBhIHN5c3RlbSBtZXNzYWdlIHByaW9yIHRvIHRoZSBsYXN0IHVzZXIgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IC0gVGhlIEFudGhyb3BpYyBvYmplY3RcbiAqL1xuZnVuY3Rpb24gY2hhdG1sX3RvX2FudGhyb3BpYyhvcHRzKSB7XG4gIGxldCB0b29sX2NvdW50ZXIgPSAwO1xuICBjb25zdCBtZXNzYWdlcyA9IG9wdHMubWVzc2FnZXNcbiAgICAuZmlsdGVyKG1zZyA9PiBtc2cucm9sZSAhPT0gJ3N5c3RlbScpXG4gICAgLm1hcChtID0+IHtcbiAgICAgIGlmKG0ucm9sZSA9PT0gJ3Rvb2wnKXtcbiAgICAgICAgcmV0dXJuIHsgcm9sZTogJ3VzZXInLCBjb250ZW50OiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogJ3Rvb2xfcmVzdWx0JyxcbiAgICAgICAgICAgIHRvb2xfdXNlX2lkOiBgdG9vbC0ke3Rvb2xfY291bnRlcn1gLFxuICAgICAgICAgICAgY29udGVudDogbS5jb250ZW50XG4gICAgICAgICAgfVxuICAgICAgICBdfTtcbiAgICAgIH1cbiAgICAgIGlmKG0ucm9sZSA9PT0gJ2Fzc2lzdGFudCcgJiYgbS50b29sX2NhbGxzKXtcbiAgICAgICAgdG9vbF9jb3VudGVyKys7XG4gICAgICAgIGNvbnN0IG91dCA9IHtcbiAgICAgICAgICByb2xlOiBtLnJvbGUsIFxuICAgICAgICAgIGNvbnRlbnQ6IG0udG9vbF9jYWxscy5tYXAoYyA9PiAoe1xuICAgICAgICAgICAgdHlwZTogJ3Rvb2xfdXNlJyxcbiAgICAgICAgICAgIGlkOiBgdG9vbC0ke3Rvb2xfY291bnRlcn1gLFxuICAgICAgICAgICAgbmFtZTogYy5mdW5jdGlvbi5uYW1lLFxuICAgICAgICAgICAgaW5wdXQ6ICh0eXBlb2YgYy5mdW5jdGlvbi5hcmd1bWVudHMgPT09ICdzdHJpbmcnKSA/IEpTT04ucGFyc2UoYy5mdW5jdGlvbi5hcmd1bWVudHMpIDogYy5mdW5jdGlvbi5hcmd1bWVudHNcbiAgICAgICAgICB9KSlcbiAgICAgICAgfTtcbiAgICAgICAgaWYobS5jb250ZW50KXtcbiAgICAgICAgICBpZih0eXBlb2YgbS5jb250ZW50ID09PSAnc3RyaW5nJykgb3V0LmNvbnRlbnQucHVzaCh7dHlwZTogJ3RleHQnLCB0ZXh0OiBtLmNvbnRlbnR9KTtcbiAgICAgICAgICBlbHNlIG0uY29udGVudC5mb3JFYWNoKGMgPT4gb3V0LmNvbnRlbnQucHVzaChjKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH1cbiAgICAgIGlmKHR5cGVvZiBtLmNvbnRlbnQgPT09ICdzdHJpbmcnKSByZXR1cm4geyByb2xlOiBtLnJvbGUsIGNvbnRlbnQ6IG0uY29udGVudCB9O1xuICAgICAgaWYoQXJyYXkuaXNBcnJheShtLmNvbnRlbnQpKXtcbiAgICAgICAgY29uc3QgY29udGVudCA9IG0uY29udGVudC5tYXAoYyA9PiB7XG4gICAgICAgICAgaWYoYy50eXBlID09PSAndGV4dCcpIHJldHVybiB7dHlwZTogJ3RleHQnLCB0ZXh0OiBjLnRleHR9O1xuICAgICAgICAgIGlmKGMudHlwZSA9PT0gJ2ltYWdlX3VybCcpe1xuICAgICAgICAgICAgY29uc3QgaW1hZ2VfdXJsID0gYy5pbWFnZV91cmwudXJsO1xuICAgICAgICAgICAgbGV0IG1lZGlhX3R5cGUgPSBpbWFnZV91cmwuc3BsaXQoXCI6XCIpWzFdLnNwbGl0KFwiO1wiKVswXTtcbiAgICAgICAgICAgIGlmKG1lZGlhX3R5cGUgPT09ICdpbWFnZS9qcGcnKSBtZWRpYV90eXBlID0gJ2ltYWdlL2pwZWcnO1xuICAgICAgICAgICAgcmV0dXJuIHt0eXBlOiAnaW1hZ2UnLCBzb3VyY2U6IHt0eXBlOiAnYmFzZTY0JywgbWVkaWFfdHlwZTogbWVkaWFfdHlwZSwgZGF0YTogaW1hZ2VfdXJsLnNwbGl0KFwiLFwiKVsxXX19O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7IHJvbGU6IG0ucm9sZSwgY29udGVudCB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG07XG4gICAgfSlcbiAgO1xuICBjb25zdCB7IG1vZGVsLCBtYXhfdG9rZW5zLCB0ZW1wZXJhdHVyZSwgdG9vbHMsIHRvb2xfY2hvaWNlIH0gPSBvcHRzO1xuICAvLyBETzogaGFuZGxlZCBiZXR0ZXIgKFNtYXJ0IENvbm5lY3Rpb25zIHNwZWNpZmljKVxuICAvLyBnZXQgaW5kZXggb2YgbGFzdCBzeXN0ZW0gbWVzc2FnZVxuICBjb25zdCBsYXN0X3N5c3RlbV9pZHggPSBvcHRzLm1lc3NhZ2VzLmZpbmRMYXN0SW5kZXgobXNnID0+IG1zZy5yb2xlID09PSAnc3lzdGVtJyAmJiBtc2cuY29udGVudC5pbmNsdWRlcygnLS0tQkVHSU4nKSk7XG4gIGlmIChsYXN0X3N5c3RlbV9pZHggPiAtMSkge1xuICAgIGNvbnN0IHN5c3RlbV9wcm9tcHQgPSAnPGNvbnRleHQ+XFxuJyArIG9wdHMubWVzc2FnZXNbbGFzdF9zeXN0ZW1faWR4XS5jb250ZW50ICsgJ1xcbjwvY29udGV4dD5cXG4nO1xuICAgIG1lc3NhZ2VzW21lc3NhZ2VzLmxlbmd0aCAtIDFdLmNvbnRlbnQgPSBzeXN0ZW1fcHJvbXB0ICsgbWVzc2FnZXNbbWVzc2FnZXMubGVuZ3RoIC0gMV0uY29udGVudDtcbiAgfVxuICBjb25zb2xlLmxvZyhtZXNzYWdlcyk7XG4gIGNvbnN0IG91dCA9IHtcbiAgICBtZXNzYWdlcyxcbiAgICBtb2RlbCxcbiAgICBtYXhfdG9rZW5zLFxuICAgIHRlbXBlcmF0dXJlLFxuICB9XG4gIGlmKHRvb2xzKXtcbiAgICBvdXQudG9vbHMgPSB0b29scy5tYXAodG9vbCA9PiAoe1xuICAgICAgbmFtZTogdG9vbC5mdW5jdGlvbi5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHRvb2wuZnVuY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICBpbnB1dF9zY2hlbWE6IHRvb2wuZnVuY3Rpb24ucGFyYW1ldGVycyxcbiAgICB9KSk7XG4gICAgaWYodG9vbF9jaG9pY2U/LnR5cGUgPT09ICdmdW5jdGlvbicpe1xuICAgICAgLy8gYWRkIFwiVXNlIHRoZSAke3Rvb2wubmFtZX0gdG9vbFwiIHRvIHRoZSBsYXN0IHVzZXIgbWVzc2FnZVxuICAgICAgY29uc3QgdG9vbF9wcm9tcHQgPSBgVXNlIHRoZSBcIiR7dG9vbF9jaG9pY2UuZnVuY3Rpb24ubmFtZX1cIiB0b29sIWA7XG4gICAgICBjb25zdCBsYXN0X3VzZXJfaWR4ID0gb3V0Lm1lc3NhZ2VzLmZpbmRMYXN0SW5kZXgobXNnID0+IG1zZy5yb2xlID09PSAndXNlcicpO1xuICAgICAgb3V0Lm1lc3NhZ2VzW2xhc3RfdXNlcl9pZHhdLmNvbnRlbnQgKz0gJ1xcbicgKyB0b29sX3Byb21wdDtcbiAgICAgIG91dC5zeXN0ZW0gPSBgUmVxdWlyZWQ6IHVzZSB0aGUgXCIke3Rvb2xfY2hvaWNlLmZ1bmN0aW9uLm5hbWV9XCIgdG9vbCFgO1xuICAgIH1cbiAgfVxuICAvLyBETzogaGFuZGxlZCBiZXR0ZXIgKFNtYXJ0IENvbm5lY3Rpb25zIHNwZWNpZmljKVxuICAvLyBpZiBzeXN0ZW0gbWVzc2FnZSBleGlzdHMgcHJpb3IgdG8gbGFzdF9zeXN0ZW1faWR4IEFORCBkb2VzIG5vdCBpbmNsdWRlIFwiLS0tQkVHSU5cIiB0aGVuIGFkZCB0byBib2R5LnN5c3RlbVxuICBjb25zdCBsYXN0X25vbl9jb250ZXh0X3N5c3RlbV9pZHggPSBvcHRzLm1lc3NhZ2VzLmZpbmRMYXN0SW5kZXgobXNnID0+IG1zZy5yb2xlID09PSAnc3lzdGVtJyAmJiAhbXNnLmNvbnRlbnQuaW5jbHVkZXMoJy0tLUJFR0lOJykpO1xuICBpZihsYXN0X25vbl9jb250ZXh0X3N5c3RlbV9pZHggPiAtMSkgb3V0LnN5c3RlbSA9IG9wdHMubWVzc2FnZXNbbGFzdF9ub25fY29udGV4dF9zeXN0ZW1faWR4XS5jb250ZW50O1xuICByZXR1cm4gb3V0O1xufVxuZXhwb3J0cy5jaGF0bWxfdG9fYW50aHJvcGljID0gY2hhdG1sX3RvX2FudGhyb3BpYztcblxuIiwgIi8qKlxuICogQ29oZXJlQWRhcHRlciBjbGFzcyBpcyBkZXNpZ25lZCB0byBhZGFwdCB0aGUgU21hcnRDaGF0TW9kZWwncyBpbnRlcmFjdGlvbiB3aXRoIHRoZSBDb2hlcmUgQVBJLlxuICogSXQgcHJvdmlkZXMgbWV0aG9kcyB0byBwcmVwYXJlIHJlcXVlc3QgYm9kaWVzLCBoYW5kbGUgc3RyZWFtaW5nIGRhdGEsIGFuZCBleHRyYWN0IG1lc3NhZ2UgY29udGVudCBmcm9tIHJlc3BvbnNlcy5cbiAqL1xuY2xhc3MgQ29oZXJlQWRhcHRlciB7XG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIENoYXRNTCBvYmplY3QgdG8gYSBmb3JtYXQgc3VpdGFibGUgZm9yIGEgcmVxdWVzdCB0byB0aGUgQ29oZXJlIEFQSS5cbiAgICogQHBhcmFtIHtPYmplY3R9IGNoYXRtbCAtIFRoZSBDaGF0TUwgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGNoYXQgaGlzdG9yeSBhbmQgb3RoZXIgcGFyYW1ldGVycy5cbiAgICogQHJldHVybnMge09iamVjdH0gVGhlIHJlcXVlc3QgYm9keSBmb3JtYXR0ZWQgZm9yIHRoZSBDb2hlcmUgQVBJLlxuICAgKi9cbiAgcHJlcGFyZV9yZXF1ZXN0X2JvZHkoY2hhdG1sKSB7IHJldHVybiBjaGF0bWxfdG9fY29oZXJlKGNoYXRtbCk7IH1cblxuICAvKipcbiAgICogRXh0cmFjdHMgdGhlIG1lc3NhZ2UgY29udGVudCBmcm9tIGEgSlNPTiByZXNwb25zZSBmcm9tIHRoZSBDb2hlcmUgQVBJLlxuICAgKiBAcGFyYW0ge09iamVjdH0ganNvbiAtIFRoZSBKU09OIHJlc3BvbnNlIG9iamVjdCBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgdGhlIHRleHQgY29udGVudC5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGV4dHJhY3RlZCB0ZXh0IGNvbnRlbnQgZnJvbSB0aGUgcmVzcG9uc2UuXG4gICAqL1xuICBnZXRfbWVzc2FnZV9jb250ZW50KGpzb24pIHsgcmV0dXJuIGpzb24udGV4dDsgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzZXMgc3RyZWFtaW5nIGRhdGEgcmVjZWl2ZWQgZnJvbSB0aGUgQ29oZXJlIEFQSSBhbmQgZXh0cmFjdHMgdGV4dCBjaHVua3MuXG4gICAqIFRoaXMgbWV0aG9kIGhhbmRsZXMgdGhlIGFjY3VtdWxhdGlvbiBvZiB0ZXh0IGRhdGEgb3ZlciBtdWx0aXBsZSBldmVudHMgYW5kIG1hbmFnZXMgdGhlIHN0YXRlIG9mIHRoZSBzdHJlYW0uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIFRoZSBldmVudCBvYmplY3QgY29udGFpbmluZyBzdHJlYW1pbmcgZGF0YS5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGFjY3VtdWxhdGVkIHRleHQgY2h1bmsgZXh0cmFjdGVkIGZyb20gdGhlIHN0cmVhbS5cbiAgICovXG4gIGdldF90ZXh0X2NodW5rX2Zyb21fc3RyZWFtKGV2ZW50KSB7XG4gICAgaWYoIXRoaXMubGFzdF9saW5lX2luZGV4KSB0aGlzLmxhc3RfbGluZV9pbmRleCA9IDA7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMubGFzdF9saW5lX3RpbWVvdXQpO1xuICAgIHRoaXMubGFzdF9saW5lX3RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5sYXN0X2xpbmVfaW5kZXggPSAwO1xuICAgIH0sIDEwMDAwKTtcbiAgICBjb25zdCBkYXRhID0gZXZlbnQuc291cmNlLnhoci5yZXNwb25zZVRleHQ7XG4gICAgLy8gc3BsaXQgYnkgbmV3bGluZSBhbmQgZ2V0IGxhc3RcbiAgICBjb25zdCBsaW5lcyA9IGRhdGEuc3BsaXQoJ1xcbicpLnNsaWNlKHRoaXMubGFzdF9saW5lX2luZGV4KTtcbiAgICBjb25zb2xlLmxvZyhsaW5lcyk7XG4gICAgdGhpcy5sYXN0X2xpbmVfaW5kZXggKz0gbGluZXMubGVuZ3RoO1xuICAgIGNvbnN0IHRleHRfY2h1bmsgPSBsaW5lc1xuICAgICAgICAuZmlsdGVyKChsaW5lKSA9PiBsaW5lLnRyaW0oKSAhPT0gJycpXG4gICAgICAgIC5tYXAoKGxpbmUpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGxpbmUpO1xuICAgICAgICAgICAgY29uc3QganNvbiA9IEpTT04ucGFyc2UobGluZSk7XG4gICAgICAgICAgICBpZihqc29uLmV2ZW50X3R5cGUgPT09ICdzdHJlYW0tZW5kJykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdHJlYW0tZW5kJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmRfb2Zfc3RyZWFtID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmRfb2Zfc3RyZWFtID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSwgMzAwMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGpzb24udGV4dDtcbiAgICAgICAgfSlcbiAgICAgICAgLmpvaW4oJycpO1xuICAgIGNvbnNvbGUubG9nKHRleHRfY2h1bmspO1xuICAgIHJldHVybiB0ZXh0X2NodW5rO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIGVuZCBvZiB0aGUgc3RyZWFtIGhhcyBiZWVuIHJlYWNoZWQgYmFzZWQgb24gdGhlIGV2ZW50IGRhdGEuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIFRoZSBldmVudCBvYmplY3QgdGhhdCBtYXkgaW5kaWNhdGUgdGhlIGVuZCBvZiB0aGUgc3RyZWFtLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZW5kIG9mIHRoZSBzdHJlYW0gaXMgaW5kaWNhdGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBpc19lbmRfb2Zfc3RyZWFtKGV2ZW50KSB7IHJldHVybiB0aGlzLmVuZF9vZl9zdHJlYW07IH1cbn1cbmV4cG9ydHMuQ29oZXJlQWRhcHRlciA9IENvaGVyZUFkYXB0ZXI7XG5cbi8qKlxuICogQ29udmVydHMgYSBDaGF0TUwgb2JqZWN0IGludG8gYSBmb3JtYXQgc3VpdGFibGUgZm9yIHRoZSBDb2hlcmUgQVBJLlxuICogVGhpcyBmdW5jdGlvbiBwcmVwYXJlcyB0aGUgZGF0YSBieSBzdHJ1Y3R1cmluZyBpdCBhY2NvcmRpbmcgdG8gdGhlIHJlcXVpcmVtZW50cyBvZiB0aGUgQ29oZXJlIEFQSSxcbiAqIGluY2x1ZGluZyB0aGUgbW9kZWwgdG8gdXNlLCB0aGUgY2hhdCBoaXN0b3J5IGV4Y2x1ZGluZyB0aGUgbGFzdCB1c2VyIG1lc3NhZ2UsIGFuZCB0aGUgbGFzdCBtZXNzYWdlIHNlcGFyYXRlbHkuXG4gKiBcbiAqIEBwYXJhbSB7T2JqZWN0fSBjaGF0bWwgLSBUaGUgQ2hhdE1MIG9iamVjdCBjb250YWluaW5nIHRoZSBtb2RlbCwgbWVzc2FnZXMsIGFuZCBvdGhlciBwYXJhbWV0ZXJzIGxpa2UgdGVtcGVyYXR1cmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZm9ybWF0dGVkIG9iamVjdCBmb3IgdGhlIENvaGVyZSBBUEkgcmVxdWVzdCwgY29udGFpbmluZyB0aGUgbW9kZWwsIGNoYXQgaGlzdG9yeSwgbGFzdCBtZXNzYWdlLCBhbmQgdGVtcGVyYXR1cmUuXG4gKi9cbmZ1bmN0aW9uIGNoYXRtbF90b19jb2hlcmUoY2hhdG1sKSB7XG4gICAgY29uc3QgY29oZXJlID0ge1xuICAgICAgICBtb2RlbDogY2hhdG1sLm1vZGVsLFxuICAgICAgICAvLyBza2lwIGxhc3QgdXNlciBtZXNzYWdlXG4gICAgICAgIGNoYXRfaGlzdG9yeTogY2hhdG1sLm1lc3NhZ2VzXG4gICAgICAgICAgICAuc2xpY2UoMCwgLTEpXG4gICAgICAgICAgICAubWFwKChtZXNzYWdlKSA9PiAoe1xuICAgICAgICAgICAgICAgIHJvbGU6IG1lc3NhZ2Uucm9sZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBwYXJzZV9tZXNzYWdlX2NvbnRlbnRfdG9fc3RyaW5nKG1lc3NhZ2UpLFxuICAgICAgICAgICAgfSkpXG4gICAgICAgICxcbiAgICAgICAgbWVzc2FnZTogcGFyc2VfbWVzc2FnZV9jb250ZW50X3RvX3N0cmluZyhjaGF0bWwubWVzc2FnZXNbY2hhdG1sLm1lc3NhZ2VzLmxlbmd0aCAtIDFdKSxcbiAgICAgICAgdGVtcGVyYXR1cmU6IGNoYXRtbC50ZW1wZXJhdHVyZSxcbiAgICAgICAgLy8gc3RyZWFtOiBjaGF0bWwuc3RyZWFtIC8vIGN1cnJlbnRseSBub3Qgc3VwcG9ydGVkXG4gICAgfTtcbiAgICByZXR1cm4gY29oZXJlO1xufVxuZXhwb3J0cy5jaGF0bWxfdG9fY29oZXJlID0gY2hhdG1sX3RvX2NvaGVyZTtcblxuZnVuY3Rpb24gcGFyc2VfbWVzc2FnZV9jb250ZW50X3RvX3N0cmluZyhtZXNzYWdlKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkobWVzc2FnZS5jb250ZW50KSA/IG1lc3NhZ2UuY29udGVudC5maWx0ZXIoYyA9PiBjLnR5cGUgPT09ICd0ZXh0JykubWFwKGMgPT4gYy50ZXh0KS5qb2luKCdcXG4nKSA6IG1lc3NhZ2UuY29udGVudDtcbn1cblxuIiwgIi8qKlxuICogR2VtaW5pQWRhcHRlciBjbGFzcyBwcm92aWRlcyBtZXRob2RzIHRvIGFkYXB0IHRoZSBjaGF0IG1vZGVsIGludGVyYWN0aW9ucyBzcGVjaWZpY2FsbHkgZm9yIHRoZSBHZW1pbmkgbW9kZWwuXG4gKiBJdCBpbmNsdWRlcyBtZXRob2RzIHRvIHByZXBhcmUgcmVxdWVzdCBib2RpZXMsIGhhbmRsZSB0b29sIGNhbGxzIGFuZCBtZXNzYWdlcywgYW5kIG1hbmFnZSBzdHJlYW1pbmcgcmVzcG9uc2VzLlxuICovXG5jbGFzcyBHZW1pbmlBZGFwdGVyIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBHZW1pbmlBZGFwdGVyIGluc3RhbmNlIHdpdGggYSBzcGVjaWZpZWQgbW9kZWwgY29uZmlndXJhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG1vZGVsIC0gVGhlIG1vZGVsIGNvbmZpZ3VyYXRpb24gb2JqZWN0LlxuICAgKi9cbiAgY29uc3RydWN0b3IobW9kZWwpIHsgdGhpcy5tb2RlbCA9IG1vZGVsOyB9XG5cbiAgLyoqXG4gICAqIFByZXBhcmVzIHRoZSByZXF1ZXN0IGJvZHkgZm9yIHRoZSBHZW1pbmkgQVBJIGJ5IGNvbnZlcnRpbmcgQ2hhdE1MIGZvcm1hdCB0byBhIGZvcm1hdCBjb21wYXRpYmxlIHdpdGggR2VtaW5pLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYm9keSAtIFRoZSBvcHRpb25zIG9iamVjdCBjb250YWluaW5nIG1lc3NhZ2VzIGFuZCBvdGhlciBwYXJhbWV0ZXJzIGluIENoYXRNTCBmb3JtYXQuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSByZXF1ZXN0IGJvZHkgZm9ybWF0dGVkIGZvciB0aGUgR2VtaW5pIEFQSS5cbiAgICovXG4gIHByZXBhcmVfcmVxdWVzdF9ib2R5KGJvZHkpIHsgcmV0dXJuIGNoYXRtbF90b19nZW1pbmkoYm9keSk7IH1cblxuICAvKipcbiAgICogRXh0cmFjdHMgdGhlIGZpcnN0IHRvb2wgY2FsbCBmcm9tIHRoZSBKU09OIHJlc3BvbnNlIGNvbnRlbnQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIC0gVGhlIEpTT04gcmVzcG9uc2UgZnJvbSB3aGljaCB0byBleHRyYWN0IHRoZSB0b29sIGNhbGwuXG4gICAqIEByZXR1cm5zIHtPYmplY3R8bnVsbH0gVGhlIGZpcnN0IHRvb2wgY2FsbCBmb3VuZCwgb3IgbnVsbCBpZiBub25lIGV4aXN0LlxuICAgKi9cbiAgZ2V0X3Rvb2xfY2FsbChqc29uKSB7IHJldHVybiBqc29uLmNhbmRpZGF0ZXM/LlswXT8uY29udGVudD8ucGFydHM/LlswXT8uZnVuY3Rpb25DYWxsOyB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgbmFtZSBvZiB0aGUgdG9vbCBmcm9tIGEgdG9vbCBjYWxsIG9iamVjdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IHRvb2xfY2FsbCAtIFRoZSB0b29sIGNhbGwgb2JqZWN0IGZyb20gd2hpY2ggdG8gZXh0cmFjdCB0aGUgbmFtZS5cbiAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBUaGUgbmFtZSBvZiB0aGUgdG9vbCwgb3IgbnVsbCBpZiBub3QgYXZhaWxhYmxlLlxuICAgKi9cbiAgZ2V0X3Rvb2xfbmFtZSh0b29sX2NhbGwpIHsgcmV0dXJuIHRvb2xfY2FsbD8ubmFtZTsgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIGlucHV0IGNvbnRlbnQgb2YgYSB0b29sIGNhbGwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0b29sX2NhbGwgLSBUaGUgdG9vbCBjYWxsIG9iamVjdCBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgdGhlIGlucHV0LlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fG51bGx9IFRoZSBpbnB1dCBvZiB0aGUgdG9vbCBjYWxsLCBvciBudWxsIGlmIG5vdCBhdmFpbGFibGUuXG4gICAqL1xuICBnZXRfdG9vbF9jYWxsX2NvbnRlbnQodG9vbF9jYWxsKSB7IHJldHVybiB0b29sX2NhbGw/LmFyZ3M7IH1cblxuICAvKipcbiAgICogRXh0cmFjdHMgdGhlIGZpcnN0IG1lc3NhZ2UgZnJvbSB0aGUgSlNPTiByZXNwb25zZSBjb250ZW50LlxuICAgKiBAcGFyYW0ge09iamVjdH0ganNvbiAtIFRoZSBKU09OIHJlc3BvbnNlIGZyb20gd2hpY2ggdG8gZXh0cmFjdCB0aGUgbWVzc2FnZS5cbiAgICogQHJldHVybnMge09iamVjdHxudWxsfSBUaGUgZmlyc3QgbWVzc2FnZSBmb3VuZCwgb3IgbnVsbCBpZiBub25lIGV4aXN0LlxuICAgKi9cbiAgZ2V0X21lc3NhZ2UoanNvbikgeyByZXR1cm4ganNvbi5jYW5kaWRhdGVzPy5bMF07IH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBjb250ZW50IG9mIHRoZSBmaXJzdCBtZXNzYWdlIGZyb20gdGhlIEpTT04gcmVzcG9uc2UuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIC0gVGhlIEpTT04gcmVzcG9uc2UgZnJvbSB3aGljaCB0byBleHRyYWN0IHRoZSBtZXNzYWdlIGNvbnRlbnQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gVGhlIGNvbnRlbnQgb2YgdGhlIGZpcnN0IG1lc3NhZ2UsIG9yIG51bGwgaWYgbm8gbWVzc2FnZSBpcyBmb3VuZC5cbiAgICovXG4gIGdldF9tZXNzYWdlX2NvbnRlbnQoanNvbikgeyByZXR1cm4gdGhpcy5nZXRfbWVzc2FnZShqc29uKT8uY29udGVudD8ucGFydHMubWFwKHBhcnQgPT4gcGFydC50ZXh0KS5qb2luKCcnKTsgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGVzIGVzY2FwZWQgbmV3bGluZXMgaW4gYSBzdHJlYW1pbmcgdGV4dCBjaHVuay5cbiAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50IC0gVGhlIHN0cmVhbWluZyBldmVudCBjb250YWluaW5nIHRoZSBkYXRhLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgdGV4dCBjaHVuayB3aXRoIGVzY2FwZWQgbmV3bGluZXMgcmVwbGFjZWQuXG4gICAqL1xuICBnZXRfdGV4dF9jaHVua19mcm9tX3N0cmVhbShldmVudCkgeyByZXR1cm4gZXZlbnQuZGF0YS5yZXBsYWNlKC9cXFxcbi9nLCAnXFxuJyk7IH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyBpZiB0aGUgc3RyZWFtaW5nIHJlc3BvbnNlIGhhcyBlbmRlZCBiYXNlZCBvbiB0aGUgcmVhZHlTdGF0ZSBvZiB0aGUgWE1MSHR0cFJlcXVlc3QuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudCAtIFRoZSBzdHJlYW1pbmcgZXZlbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzdHJlYW0gaGFzIGVuZGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBpc19lbmRfb2Zfc3RyZWFtKGV2ZW50KSB7IHJldHVybiBldmVudC5zb3VyY2UueGhyLnJlYWR5U3RhdGUgPT09IDQ7IH1cblxuICAvKipcbiAgICogQ291bnRzIHRoZSB0b2tlbnMgaW4gdGhlIGlucHV0IGJ5IG1ha2luZyBhbiBBUEkgcmVxdWVzdCB0byB0aGUgR2VtaW5pIHRva2VuIGNvdW50aW5nIGVuZHBvaW50LlxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IGlucHV0IC0gVGhlIGlucHV0IHRleHQgb3Igb2JqZWN0IHRvIGNvdW50IHRva2VucyBpbi5cbiAgICogQHJldHVybnMge1Byb21pc2U8bnVtYmVyPn0gVGhlIHRvdGFsIG51bWJlciBvZiB0b2tlbnMgaW4gdGhlIGlucHV0LlxuICAgKi9cbiAgYXN5bmMgY291bnRfdG9rZW5zKGlucHV0KSB7XG4gICAgY29uc3QgcmVxID0ge1xuICAgICAgdXJsOiBgaHR0cHM6Ly9nZW5lcmF0aXZlbGFuZ3VhZ2UuZ29vZ2xlYXBpcy5jb20vdjFiZXRhL21vZGVscy9nZW1pbmktcHJvOmNvdW50VG9rZW5zP2tleT0ke3RoaXMubW9kZWwuYXBpX2tleX1gLFxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGhlYWRlcnM6IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSxcbiAgICB9O1xuICAgIGxldCBib2R5O1xuICAgIGlmKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIGJvZHkgPSBjaGF0bWxfdG9fZ2VtaW5pKHsgbWVzc2FnZXM6IFt7IHJvbGU6ICd1c2VyJywgY29udGVudDogaW5wdXQgfV0gfSk7XG4gICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIGJvZHkgPSBjaGF0bWxfdG9fZ2VtaW5pKHsgbWVzc2FnZXM6IGlucHV0IH0pO1xuICAgIGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcpIGJvZHkgPSBjaGF0bWxfdG9fZ2VtaW5pKGlucHV0KTtcbiAgICBlbHNlIHJldHVybiBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgY291bnRfdG9rZW5zXCIsIGlucHV0KTtcbiAgICBkZWxldGUgYm9keS5nZW5lcmF0aW9uQ29uZmlnO1xuICAgIGRlbGV0ZSBib2R5LnNhZmV0eVNldHRpbmdzO1xuICAgIHJlcS5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoYm9keSk7XG4gICAgY29uc3QgcmVzcCA9IGF3YWl0IHRoaXMubW9kZWwucmVxdWVzdF9hZGFwdGVyKHJlcSk7XG4gICAgcmV0dXJuIHJlc3A/Lmpzb24/LnRvdGFsVG9rZW5zO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgdGhlIHN0YW5kYXJkIEFQSSBlbmRwb2ludCB3aXRoIHRoZSBBUEkga2V5IGFwcGVuZGVkLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIGVuZHBvaW50IFVSTCBmb3Igbm9uLXN0cmVhbWluZyByZXF1ZXN0cy5cbiAgICovXG4gIGdldCBlbmRwb2ludCgpIHsgcmV0dXJuIHRoaXMubW9kZWwuY29uZmlnLmVuZHBvaW50LnJlcGxhY2UoJ01PREVMX05BTUUnLCB0aGlzLm1vZGVsLm1vZGVsX25hbWUpICsgXCI/a2V5PVwiICsgdGhpcy5tb2RlbC5hcGlfa2V5OyB9XG5cbiAgLyoqXG4gICAqIEdldHRlciBmb3IgdGhlIHN0cmVhbWluZyBBUEkgZW5kcG9pbnQgd2l0aCB0aGUgQVBJIGtleSBhcHBlbmRlZC5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCBlbmRwb2ludCBVUkwgZm9yIHN0cmVhbWluZyByZXF1ZXN0cy5cbiAgICovXG4gIGdldCBlbmRwb2ludF9zdHJlYW1pbmcoKSB7IHJldHVybiB0aGlzLm1vZGVsLmNvbmZpZy5lbmRwb2ludF9zdHJlYW1pbmcucmVwbGFjZSgnTU9ERUxfTkFNRScsIHRoaXMubW9kZWwubW9kZWxfbmFtZSkgKyBcIj9rZXk9XCIgKyB0aGlzLm1vZGVsLmFwaV9rZXk7IH1cbn1cbmV4cG9ydHMuR2VtaW5pQWRhcHRlciA9IEdlbWluaUFkYXB0ZXI7XG5cbi8qKlxuICogQ29udmVydCBhIENoYXRNTCBvYmplY3QgdG8gYSBHZW1pbmkgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIFRoZSBDaGF0TUwgb2JqZWN0XG4gKiBAZGVzY3JpcHRpb24gVGhpcyBmdW5jdGlvbiBjb252ZXJ0cyBhIENoYXRNTCBvYmplY3QgdG8gYSBHZW1pbmkgb2JqZWN0LiBJdCBmaWx0ZXJzIG91dCBzeXN0ZW0gbWVzc2FnZXMgYW5kIGFkZHMgYSBzeXN0ZW0gbWVzc2FnZSBwcmlvciB0byB0aGUgbGFzdCB1c2VyIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSAtIFRoZSBHZW1pbmkgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGNoYXRtbF90b19nZW1pbmkob3B0cykge1xuICAvLyAvLyBkZWVwIGNvcHkgbWVzc2FnZXNcbiAgLy8gY29uc3QgbWVzc2FnZXMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9wdHMubWVzc2FnZXMpKS5maWx0ZXIobXNnID0+IG1zZy5yb2xlICE9PSAnc3lzdGVtJyk7XG4gIC8vIC8vIG1lcmdlIHN5c3RlbSByb2xlcyBpbnRvbSBzdWJzZXF1ZW50IHVzZXIgcm9sZXNcbiAgLy8gb3B0cy5tZXNzYWdlcy5mb3JFYWNoKChtc2csIGkpID0+IHtcbiAgLy8gICBpZiAobXNnLnJvbGUgPT09ICdzeXN0ZW0nKSB7XG4gIC8vICAgICBpZiAoIW1lc3NhZ2VzW2kgKyAxXSkgcmV0dXJuIGNvbnNvbGUuZXJyb3IoXCJTeXN0ZW0gbWVzc2FnZSB3aXRob3V0IHN1YnNlcXVlbnQgdXNlciBtZXNzYWdlXCIpO1xuICAvLyAgICAgY29uc3Qgc3lzdGVtX3Byb21wdCA9ICctLS1CRUdJTiBJTVBPUlRBTlQgQ09OVEVYVC0tLVxcbicgKyBtc2cuY29udGVudCArICdcXG4tLS1FTkQgSU1QT1JUQU5UIENPTlRFWFQtLS1cXG5cXG4nO1xuICAvLyAgICAgbWVzc2FnZXNbaSArIDFdLmNvbnRlbnQgPSBzeXN0ZW1fcHJvbXB0ICsgKG1lc3NhZ2VzW2kgKyAxXS5jb250ZW50IHx8ICcnKTtcbiAgLy8gICB9XG4gIC8vIH0pO1xuICBjb25zdCBtZXNzYWdlcyA9IG9wdHMubWVzc2FnZXMuZmlsdGVyKG1zZyA9PiBtc2cucm9sZSAhPT0gJ3N5c3RlbScpO1xuICAvLyBETzogaGFuZGxlZCBiZXR0ZXIgKFNtYXJ0IENvbm5lY3Rpb25zIHNwZWNpZmljKVxuICAvLyBnZXQgaW5kZXggb2YgbGFzdCBzeXN0ZW0gbWVzc2FnZVxuICBjb25zdCBsYXN0X3N5c3RlbV9pZHggPSBvcHRzLm1lc3NhZ2VzLmZpbmRMYXN0SW5kZXgobXNnID0+IG1zZy5yb2xlID09PSAnc3lzdGVtJyAmJiBtc2cuY29udGVudC5pbmNsdWRlcygnLS0tQkVHSU4nKSk7XG4gIGlmIChsYXN0X3N5c3RlbV9pZHggPiAtMSkge1xuICAgIGNvbnN0IHN5c3RlbV9wcm9tcHQgPSAnLS0tQkVHSU4gSU1QT1JUQU5UIENPTlRFWFQtLS1cXG4nICsgb3B0cy5tZXNzYWdlc1tsYXN0X3N5c3RlbV9pZHhdLmNvbnRlbnQgKyAnXFxuLS0tRU5EIElNUE9SVEFOVCBDT05URVhULS0tXFxuXFxuJztcbiAgICBtZXNzYWdlc1ttZXNzYWdlcy5sZW5ndGggLSAxXS5jb250ZW50ID0gc3lzdGVtX3Byb21wdCArIG1lc3NhZ2VzW21lc3NhZ2VzLmxlbmd0aCAtIDFdLmNvbnRlbnQ7XG4gIH1cbiAgY29uc3QgYm9keSA9IHtcbiAgICBjb250ZW50czogbWVzc2FnZXNcbiAgICAgIC5maWx0ZXIobXNnID0+IG1zZy5yb2xlICE9PSAnc3lzdGVtJykgLy8gZmlsdGVyIG91dCBzeXN0ZW0gbWVzc2FnZXNcbiAgICAgIC5tYXAobXNnID0+IHtcbiAgICAgICAgY29uc3QgY29udGVudCA9IHt9O1xuICAgICAgICBjb250ZW50LnJvbGUgPSBtc2cucm9sZSA9PT0gJ2Fzc2lzdGFudCcgPyAnbW9kZWwnIDogbXNnLnJvbGU7XG4gICAgICAgIGNvbnRlbnQucGFydHMgPSAhQXJyYXkuaXNBcnJheShtc2cuY29udGVudCkgPyBbe3RleHQ6IG1zZy5jb250ZW50fV0gOiBtc2cuY29udGVudC5tYXAoYyA9PiB7XG4gICAgICAgICAgaWYoYy50eXBlID09PSAndGV4dCcpe1xuICAgICAgICAgICAgcmV0dXJuIHt0ZXh0OiBjLnRleHR9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZihjLnR5cGUgPT09ICdpbWFnZV91cmwnKXtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlX3VybCA9IGMuaW1hZ2VfdXJsLnVybDtcbiAgICAgICAgICAgIGxldCBtaW1lX3R5cGUgPSBpbWFnZV91cmwuc3BsaXQoXCI6XCIpWzFdLnNwbGl0KFwiO1wiKVswXTtcbiAgICAgICAgICAgIGlmKG1pbWVfdHlwZSA9PT0gJ2ltYWdlL2pwZycpIG1pbWVfdHlwZSA9ICdpbWFnZS9qcGVnJztcbiAgICAgICAgICAgIHJldHVybiB7aW5saW5lX2RhdGE6IHttaW1lX3R5cGU6IG1pbWVfdHlwZSwgZGF0YTogaW1hZ2VfdXJsLnNwbGl0KFwiLFwiKVsxXX19O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb250ZW50O1xuICAgICAgICAoe1xuICAgICAgICAgIHJvbGU6IG1zZy5yb2xlID09PSAnYXNzaXN0YW50JyA/ICdtb2RlbCcgOiBtc2cucm9sZSxcbiAgICAgICAgICBwYXJ0czogQXJyYXkuaXNBcnJheShtc2cuY29udGVudCkgPyBbe3RleHQ6IG1zZy5jb250ZW50LmZpbHRlcihjID0+IGMudHlwZSA9PT0gJ3RleHQnKS5tYXAoYyA9PiBjLnRleHQpLmpvaW4oJ1xcbicpfV0gOiBbeyB0ZXh0OiBtc2cuY29udGVudCB9XVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICAsXG4gICAgZ2VuZXJhdGlvbkNvbmZpZzoge1xuICAgICAgdGVtcGVyYXR1cmU6IG9wdHMudGVtcGVyYXR1cmUgfHwgMC45LFxuICAgICAgdG9wSzogb3B0cy50b3BLIHx8IDEsXG4gICAgICB0b3BQOiBvcHRzLnRvcFAgfHwgMSxcbiAgICAgIG1heE91dHB1dFRva2Vuczogb3B0cy5tYXhfdG9rZW5zIHx8IDIwNDgsXG4gICAgICBzdG9wU2VxdWVuY2VzOiBvcHRzLnN0b3BTZXF1ZW5jZXMgfHwgW10sXG4gICAgICBjYW5kaWRhdGVfY291bnQ6IG9wdHMubiB8fCAxLFxuICAgIH0sXG4gICAgc2FmZXR5U2V0dGluZ3M6IFtcbiAgICAgIHtcbiAgICAgICAgY2F0ZWdvcnk6IFwiSEFSTV9DQVRFR09SWV9IQVJBU1NNRU5UXCIsXG4gICAgICAgIHRocmVzaG9sZDogXCJCTE9DS19OT05FXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGNhdGVnb3J5OiBcIkhBUk1fQ0FURUdPUllfSEFURV9TUEVFQ0hcIixcbiAgICAgICAgdGhyZXNob2xkOiBcIkJMT0NLX05PTkVcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgY2F0ZWdvcnk6IFwiSEFSTV9DQVRFR09SWV9TRVhVQUxMWV9FWFBMSUNJVFwiLFxuICAgICAgICB0aHJlc2hvbGQ6IFwiQkxPQ0tfTk9ORVwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBjYXRlZ29yeTogXCJIQVJNX0NBVEVHT1JZX0RBTkdFUk9VU19DT05URU5UXCIsXG4gICAgICAgIHRocmVzaG9sZDogXCJCTE9DS19OT05FXCJcbiAgICAgIH1cbiAgICBdXG4gIH07XG4gIGNvbnN0IHN5c3RlbV9pbnN0cnVjdGlvbnMgPSBvcHRzLm1lc3NhZ2VzLmZpbHRlcihtc2cgPT4gbXNnLnJvbGUgPT09ICdzeXN0ZW0nICYmICFtc2cuY29udGVudC5pbmNsdWRlcygnLS0tQkVHSU4nKSk7XG4gIGlmKHN5c3RlbV9pbnN0cnVjdGlvbnMubGVuZ3RoID4gMCkgYm9keS5zeXN0ZW1JbnN0cnVjdGlvbiA9IHsgcGFydHM6IHN5c3RlbV9pbnN0cnVjdGlvbnMubWFwKG1zZyA9PiAoeyB0ZXh0OiBtc2cuY29udGVudCB9KSkgfTtcbiAgaWYob3B0cy50b29scyl7XG4gICAgYm9keS50b29scyA9IFt7XG4gICAgICBmdW5jdGlvbl9kZWNsYXJhdGlvbnM6IG9wdHMudG9vbHMubWFwKHRvb2wgPT4gKHtcbiAgICAgICAgbmFtZTogdG9vbC5mdW5jdGlvbi5uYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbjogdG9vbC5mdW5jdGlvbi5kZXNjcmlwdGlvbixcbiAgICAgICAgcGFyYW1ldGVyczogdG9vbC5mdW5jdGlvbi5wYXJhbWV0ZXJzLFxuICAgICAgfSkpXG4gICAgfV07XG4gICAgaWYob3B0cy50b29sX2Nob2ljZSl7XG4gICAgICBpZihvcHRzLnRvb2xfY2hvaWNlICE9PSAnYXV0bycpe1xuICAgICAgICBpZihvcHRzLm1vZGVsLmluY2x1ZGVzKCcxLjUnKSB8fCBvcHRzLm1vZGVsLmluY2x1ZGVzKCdmbGFzaCcpKXsgLy8gbW9kZT1BTlkgYW5kIHN5c3RlbSBpbnN0cnVjdGlvbnMgYXZhaWxhYmxlIGluIDEuNS1wcm8gYW5kIDEuNS1mbGFzaFxuICAgICAgICAgIGJvZHkudG9vbF9jb25maWcgPSB7XG4gICAgICAgICAgICBmdW5jdGlvbl9jYWxsaW5nX2NvbmZpZzoge1xuICAgICAgICAgICAgICBtb2RlOiBcIkFOWVwiLFxuICAgICAgICAgICAgICBhbGxvd2VkX2Z1bmN0aW9uX25hbWVzOiBvcHRzLnRvb2xzLm1hcCh0b29sID0+IHRvb2wuZnVuY3Rpb24ubmFtZSksXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBib2R5LnN5c3RlbUluc3RydWN0aW9uID0ge1xuICAgICAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgICAgICAgcGFydHM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRleHQ6IGBJTVBPUlRBTlQ6IFlvdSBtdXN0IHVzZSB0aGUgXCIke2JvZHkudG9vbHNbMF0uZnVuY3Rpb25fZGVjbGFyYXRpb25zWzBdLm5hbWV9XCIgZnVuY3Rpb24gdG9vbCFgXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIHN5c3RlbSBpbnN0cnVjdGlvbnMgYW5kIGZ1bmN0aW9uIGNvbmZpZyBub3QgYXZhaWxhYmxlIGluIDEuMFxuICAgICAgICBjb25zdCB0b29sX3Byb21wdCA9IGBJTVBPUlRBTlQ6IFlvdSBtdXN0IHVzZSB0aGUgXCIke2JvZHkudG9vbHNbMF0uZnVuY3Rpb25fZGVjbGFyYXRpb25zWzBdLm5hbWV9XCIgZnVuY3Rpb24gdG9vbCFgO1xuICAgICAgICBjb25zdCBsYXN0X3VzZXJfaWR4ID0gYm9keS5jb250ZW50cy5maW5kTGFzdEluZGV4KG1zZyA9PiBtc2cucm9sZSA9PT0gJ3VzZXInKTtcbiAgICAgICAgYm9keS5jb250ZW50c1tsYXN0X3VzZXJfaWR4XS5wYXJ0c1swXS50ZXh0ICs9ICdcXG5cXG4nICsgdG9vbF9wcm9tcHQ7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBib2R5O1xufVxuZXhwb3J0cy5jaGF0bWxfdG9fZ2VtaW5pID0gY2hhdG1sX3RvX2dlbWluaTsiLCAiY2xhc3MgT3BlblJvdXRlckFkYXB0ZXIge1xuICBjb25zdHJ1Y3Rvcihtb2RlbCkgeyB0aGlzLm1vZGVsID0gbW9kZWw7IH1cbiAgZ2V0X3Rvb2xfY2FsbChqc29uKSB7XG4gICAgLy8gaGFuZGxlcyBHZW1pbmkgZm9ybWF0XG4gICAgaWYoanNvbi5jaG9pY2VzWzBdLm1lc3NhZ2UudG9vbF9jYWxscyl7XG4gICAgICByZXR1cm4ganNvbi5jaG9pY2VzWzBdLm1lc3NhZ2UudG9vbF9jYWxsc1swXS5mdW5jdGlvbjtcbiAgICB9XG4gICAgLy8gaGFuZGxlcyBtaXN0cmFsIGZvcm1hdFxuICAgIGlmKGpzb24uY2hvaWNlc1swXS5tZXNzYWdlLmNvbnRlbnQuaW5jbHVkZXMoXCJmdW5jdGlvblwiKSl7XG4gICAgICBjb25zdCBjb250ZW50ID0gSlNPTi5wYXJzZShqc29uLmNob2ljZXNbMF0ubWVzc2FnZS5jb250ZW50KTtcbiAgICAgIGlmKCFjb250ZW50LmZ1bmN0aW9uKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBnZXRfdG9vbF9uYW1lKHRvb2xfY2FsbCkge1xuICAgIGlmKHRvb2xfY2FsbC5mdW5jdGlvbikgcmV0dXJuIHRvb2xfY2FsbC5mdW5jdGlvbjsgLy8gbWlzdHJhbCBmb3JtYXRcbiAgICBpZih0b29sX2NhbGwubmFtZSkgcmV0dXJuIHRvb2xfY2FsbC5uYW1lOyAvLyBnZW1pbmkgZm9ybWF0XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZ2V0X3Rvb2xfY2FsbF9jb250ZW50KHRvb2xfY2FsbCkge1xuICAgIGlmKHRvb2xfY2FsbC5wYXJhbWV0ZXJzKSByZXR1cm4gdG9vbF9jYWxsLnBhcmFtZXRlcnM7IC8vIG1pc3RyYWwgZm9ybWF0XG4gICAgLy8gaGFuZGxlIGdlbWluaSBmb3JtYXRcbiAgICBpZih0b29sX2NhbGwuYXJndW1lbnRzKXtcbiAgICAgIGNvbnN0IGFyZ3MgPSBKU09OLnBhcnNlKHRvb2xfY2FsbC5hcmd1bWVudHMpO1xuICAgICAgLy8gcHJldmVudCBlc2NhcGUgY2hhcmFjdGVyIGlzc3Vlc1xuICAgICAgT2JqZWN0LmVudHJpZXMoYXJncykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIGFyZ3Nba2V5XSA9IHZhbHVlLnJlcGxhY2UoL1xcXFxuL2csIFwiXFxuXCIpXG4gICAgICAgICAgLnJlcGxhY2UoL1xcXFx0L2csIFwiXFx0XCIpXG4gICAgICAgICAgLnJlcGxhY2UoL1xcXFxyL2csIFwiXFxyXCIpXG4gICAgICAgICAgLnJlcGxhY2UoL1xcXFwnL2csIFwiJ1wiKVxuICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5leHBvcnRzLk9wZW5Sb3V0ZXJBZGFwdGVyID0gT3BlblJvdXRlckFkYXB0ZXI7IiwgImNvbnN0IHsgQW50aHJvcGljQWRhcHRlciB9ID0gcmVxdWlyZSgnLi9hZGFwdGVycy9hbnRocm9waWMnKTtcbmNvbnN0IHsgQ29oZXJlQWRhcHRlciB9ID0gcmVxdWlyZSgnLi9hZGFwdGVycy9jb2hlcmUnKTtcbmNvbnN0IHsgR2VtaW5pQWRhcHRlciB9ID0gcmVxdWlyZSgnLi9hZGFwdGVycy9nZW1pbmknKTtcbmNvbnN0IHsgT3BlblJvdXRlckFkYXB0ZXIgfSA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvb3Blbl9yb3V0ZXInKTtcbmV4cG9ydHMuQW50aHJvcGljID0gQW50aHJvcGljQWRhcHRlcjtcbmV4cG9ydHMuQ29oZXJlID0gQ29oZXJlQWRhcHRlcjtcbmV4cG9ydHMuR2VtaW5pID0gR2VtaW5pQWRhcHRlcjtcbmV4cG9ydHMuT3BlblJvdXRlciA9IE9wZW5Sb3V0ZXJBZGFwdGVyO1xuXG4iLCAie1xuICBcIm9wZW5haVwiOiB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIk9wZW5BSVwiLFxuICAgIFwidHlwZVwiOiBcIkFQSVwiLFxuICAgIFwiZW5kcG9pbnRcIjogXCJodHRwczovL2FwaS5vcGVuYWkuY29tL3YxL2NoYXQvY29tcGxldGlvbnNcIixcbiAgICBcInN0cmVhbWluZ1wiOiB0cnVlLFxuICAgIFwiYWN0aW9uc1wiOiB0cnVlLFxuICAgIFwiZmV0Y2hfbW9kZWxzXCI6IHRydWUsXG4gICAgXCJkZWZhdWx0X21vZGVsXCI6IFwiZ3B0LTMuNS10dXJib1wiLFxuICAgIFwic2lnbnVwX3VybFwiOiBcImh0dHBzOi8vcGxhdGZvcm0ub3BlbmFpLmNvbS9hcGkta2V5c1wiXG4gIH0sXG4gIFwiZ29vZ2xlX2dlbWluaVwiOiB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkdvb2dsZSBHZW1pbmlcIixcbiAgICBcInR5cGVcIjogXCJBUElcIixcbiAgICBcImFwaV9rZXlfaGVhZGVyXCI6IFwibm9uZVwiLFxuICAgIFwiZW5kcG9pbnRcIjogXCJodHRwczovL2dlbmVyYXRpdmVsYW5ndWFnZS5nb29nbGVhcGlzLmNvbS92MWJldGEvbW9kZWxzL01PREVMX05BTUU6Z2VuZXJhdGVDb250ZW50XCIsXG4gICAgXCJlbmRwb2ludF9zdHJlYW1pbmdcIjogXCJodHRwczovL2dlbmVyYXRpdmVsYW5ndWFnZS5nb29nbGVhcGlzLmNvbS92MWJldGEvbW9kZWxzL01PREVMX05BTUU6c3RyZWFtR2VuZXJhdGVDb250ZW50XCIsXG4gICAgXCJzdHJlYW1pbmdcIjogdHJ1ZSxcbiAgICBcImFjdGlvbnNcIjogdHJ1ZSxcbiAgICBcImFkYXB0ZXJcIjogXCJHZW1pbmlcIixcbiAgICBcImZldGNoX21vZGVsc1wiOiB0cnVlLFxuICAgIFwiZGVmYXVsdF9tb2RlbFwiOiBcImdlbWluaS0xLjUtcHJvXCIsXG4gICAgXCJzaWdudXBfdXJsXCI6IFwiaHR0cHM6Ly9haS5nb29nbGUuZGV2L1wiXG4gIH0sXG4gIFwib3Blbl9yb3V0ZXJcIjoge1xuICAgIFwiZGVzY3JpcHRpb25cIjogXCJPcGVuIFJvdXRlclwiLFxuICAgIFwidHlwZVwiOiBcIkFQSVwiLFxuICAgIFwiZW5kcG9pbnRcIjogXCJodHRwczovL29wZW5yb3V0ZXIuYWkvYXBpL3YxL2NoYXQvY29tcGxldGlvbnNcIixcbiAgICBcInN0cmVhbWluZ1wiOiB0cnVlLFxuICAgIFwiYWRhcHRlclwiOiBcIk9wZW5Sb3V0ZXJcIixcbiAgICBcImZldGNoX21vZGVsc1wiOiB0cnVlLFxuICAgIFwiZGVmYXVsdF9tb2RlbFwiOiBcIm1pc3RyYWxhaS9taXN0cmFsLTdiLWluc3RydWN0OmZyZWVcIixcbiAgICBcInNpZ251cF91cmxcIjogXCJodHRwczovL2FjY291bnRzLm9wZW5yb3V0ZXIuYWkvc2lnbi11cD9yZWRpcmVjdF91cmw9aHR0cHMlM0ElMkYlMkZvcGVucm91dGVyLmFpJTJGa2V5c1wiXG4gIH0sXG4gIFwiY29oZXJlXCI6IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiQ29oZXJlIENvbW1hbmQtUlwiLFxuICAgIFwidHlwZVwiOiBcIkFQSVwiLFxuICAgIFwiZW5kcG9pbnRcIjogXCJodHRwczovL2FwaS5jb2hlcmUuYWkvdjEvY2hhdFwiLFxuICAgIFwic3RyZWFtaW5nXCI6IGZhbHNlLFxuICAgIFwiYWRhcHRlclwiOiBcIkNvaGVyZVwiLFxuICAgIFwiZmV0Y2hfbW9kZWxzXCI6IHRydWUsXG4gICAgXCJkZWZhdWx0X21vZGVsXCI6IFwiY29tbWFuZC1yXCIsXG4gICAgXCJzaWdudXBfdXJsXCI6IFwiaHR0cHM6Ly9kYXNoYm9hcmQuY29oZXJlLmNvbS93ZWxjb21lL3JlZ2lzdGVyP3JlZGlyZWN0X3VyaT0lMkZhcGkta2V5c1wiXG4gIH0sXG4gIFwiYW50aHJvcGljXCI6IHtcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiQW50aHJvcGljIENsYXVkZVwiLFxuICAgIFwidHlwZVwiOiBcIkFQSVwiLFxuICAgIFwiZW5kcG9pbnRcIjogXCJodHRwczovL2FwaS5hbnRocm9waWMuY29tL3YxL21lc3NhZ2VzXCIsXG4gICAgXCJzdHJlYW1pbmdcIjogZmFsc2UsXG4gICAgXCJhcGlfa2V5X2hlYWRlclwiOiBcIngtYXBpLWtleVwiLFxuICAgIFwiaGVhZGVyc1wiOiB7XG4gICAgICBcImFudGhyb3BpYy12ZXJzaW9uXCI6IFwiMjAyMy0wNi0wMVwiLFxuICAgICAgXCJhbnRocm9waWMtYmV0YVwiOiBcInRvb2xzLTIwMjQtMDQtMDRcIlxuICAgIH0sXG4gICAgXCJhZGFwdGVyXCI6IFwiQW50aHJvcGljXCIsXG4gICAgXCJhY3Rpb25zXCI6IHRydWUsXG4gICAgXCJmZXRjaF9tb2RlbHNcIjogdHJ1ZSxcbiAgICBcImRlZmF1bHRfbW9kZWxcIjogXCJjbGF1ZGUtMy1zb25uZXQtMjAyNDAyMjlcIixcbiAgICBcInNpZ251cF91cmxcIjogXCJodHRwczovL2NvbnNvbGUuYW50aHJvcGljLmNvbS9sb2dpbj9yZXR1cm5Ubz0lMkZzZXR0aW5ncyUyRmtleXNcIlxuICB9LFxuICBcImN1c3RvbV9sb2NhbFwiOiB7XG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkN1c3RvbSBMb2NhbCAoT3BlbkFJIGZvcm1hdClcIixcbiAgICBcInR5cGVcIjogXCJBUElcIlxuICB9LFxuICBcImN1c3RvbV9hcGlcIjoge1xuICAgIFwiZGVzY3JpcHRpb25cIjogXCJDdXN0b20gQVBJIChPcGVuQUkgZm9ybWF0KVwiLFxuICAgIFwidHlwZVwiOiBcIkFQSVwiXG4gIH1cbn1cblxuIiwgIi8qKlxuICAgY29uc3QgdG9vbHNfZXhhbXBsZSA9IFtcbiAgICB7XG4gICAgICBcInR5cGVcIjogXCJmdW5jdGlvblwiLFxuICAgICAgXCJmdW5jdGlvblwiOiB7XG4gICAgICAgIFwibmFtZVwiOiBcImdldF9jdXJyZW50X3dlYXRoZXJcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkdldCB0aGUgY3VycmVudCB3ZWF0aGVyIGluIGEgZ2l2ZW4gbG9jYXRpb25cIixcbiAgICAgICAgXCJwYXJhbWV0ZXJzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgXCJsb2NhdGlvblwiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGNpdHkgYW5kIHN0YXRlLCBlLmcuIFNhbiBGcmFuY2lzY28sIENBXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ1bml0XCI6IHtcInR5cGVcIjogXCJzdHJpbmdcIiwgXCJlbnVtXCI6IFtcImNlbHNpdXNcIiwgXCJmYWhyZW5oZWl0XCJdfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicmVxdWlyZWRcIjogW1wibG9jYXRpb25cIl0sXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIixcbiAgICBcImZ1bmN0aW9uXCI6IHtcbiAgICAgIFwibmFtZVwiOiBcImxvb2t1cFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlNlbWFudGljIHNlYXJjaFwiLFxuICAgICAgXCJwYXJhbWV0ZXJzXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJoeXBvdGhldGljYWxzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcInR5cGVcIjogXCJzdHJpbmdcIn1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbl07XG4gKi9cbi8qKlxuICogVmFsaWRhdGVzIGEgdG9vbCBjYWxsIGFnYWluc3QgaXRzIHNwZWNpZmljYXRpb24gdG8gZW5zdXJlIGFsbCBwYXJhbWV0ZXJzIGFyZSBjb3JyZWN0LlxuICogVGhpcyBmdW5jdGlvbiBjaGVja3MgaWYgYWxsIHByb3ZpZGVkIGtleXMgaW4gdGhlIHRvb2wgY2FsbCBjb250ZW50IG1hdGNoIHRoZSBleHBlY3RlZCB0eXBlcyxcbiAqIGhhbmRsZXMgdHlwZSBjb2VyY2lvbiBmb3IgbnVtZXJpYyB2YWx1ZXMsIHZhbGlkYXRlcyBhZ2FpbnN0IGVudW1zLCBhbmQgZW5zdXJlcyBhbGwgcmVxdWlyZWRcbiAqIHBhcmFtZXRlcnMgYXJlIHByZXNlbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHRvb2wgLSBUaGUgdG9vbCBvYmplY3QgY29udGFpbmluZyB0aGUgZnVuY3Rpb24gc3BlY2lmaWNhdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSB0b29sX2NhbGxfY29udGVudCAtIFRoZSBhY3R1YWwgcGFyYW1ldGVycyBwYXNzZWQgdG8gdGhlIHRvb2wgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBSZXR1cm5zIHRydWUgaWYgdGhlIHRvb2wgY2FsbCBpcyB2YWxpZC5cbiAqIEB0aHJvd3Mge0Vycm9yfSAtIFRocm93cyBhbiBlcnJvciBpZiBhbnkgdmFsaWRhdGlvbiBmYWlscy5cbiAqL1xuZnVuY3Rpb24gaXNfdmFsaWRfdG9vbF9jYWxsKHRvb2wsIHRvb2xfY2FsbF9jb250ZW50KSB7XG4gIGNvbnN0IHByb3BzID0gdG9vbC5mdW5jdGlvbi5wYXJhbWV0ZXJzLnByb3BlcnRpZXM7XG4gIGlmICh0eXBlb2YgcHJvcHMgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5rZXlzKHRvb2xfY2FsbF9jb250ZW50KS5sZW5ndGggPT09IDApe1xuICAgIGNvbnNvbGUud2FybihgSW52YWxpZCB0b29sIGNhbGw6IG9iamVjdCBpcyBlbXB0eWApO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBjaGVjayBpZiBhbGwga2V5cyBhcmUgaW4gdG9vbCBzcGVjXG4gIE9iamVjdC5lbnRyaWVzKHRvb2xfY2FsbF9jb250ZW50KS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICBpZiAoIXByb3BzW2tleV0pe1xuICAgICAgY29uc29sZS53YXJuKGBJbnZhbGlkIHRvb2wgY2FsbDogbWlzc2luZyBrZXkgJHtrZXl9IGluIHRvb2wgc3BlY2AsIHByb3BzKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHByb3BzW2tleV0udHlwZSA9PT0gJ2FycmF5Jykge1xuICAgICAgLy8gY2hlY2sgaWYgYWxsIGl0ZW1zIGluIHRoZSBhcnJheSBhcmUgb2YgdGhlIHNhbWUgdHlwZVxuICAgICAgY29uc3QgaXRlbVR5cGUgPSB0eXBlb2YgdmFsdWVbMF07XG4gICAgICBpZiAoIXZhbHVlLmV2ZXJ5KGl0ZW0gPT4gdHlwZW9mIGl0ZW0gPT09IGl0ZW1UeXBlKSl7XG4gICAgICAgIGNvbnNvbGUud2FybihgSW52YWxpZCB0b29sIGNhbGw6IGFycmF5IGl0ZW1zIGFyZSBub3Qgb2YgdGhlIHNhbWUgdHlwZWApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBjaGVjayBpZiB0aGUgYXJyYXkgaXRlbXMgYXJlIG9mIHRoZSBzYW1lIHR5cGUgYXMgdGhlIHNwZWNcbiAgICAgIC8vIGlmIChwcm9wc1trZXldLml0ZW1zLnR5cGUgIT09IGl0ZW1UeXBlKSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdG9vbCBjYWxsOiBhcnJheSBpdGVtcyBhcmUgbm90IG9mIHRoZSBzYW1lIHR5cGUgYXMgdGhlIHNwZWNgKTtcbiAgICAgIGlmIChwcm9wc1trZXldLml0ZW1zLnR5cGUgIT09IGl0ZW1UeXBlKXtcbiAgICAgICAgY29uc29sZS53YXJuKGBJbnZhbGlkIHRvb2wgY2FsbDogYXJyYXkgaXRlbXMgYXJlIG5vdCBvZiB0aGUgc2FtZSB0eXBlIGFzIHRoZSBzcGVjYCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb3BzW2tleV0udHlwZSAhPT0gdHlwZW9mIHZhbHVlKSB7XG4gICAgICBpZiAocHJvcHNba2V5XS50eXBlID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIHZhbHVlIGlzIGEgdmFsaWQgbnVtYmVyXG4gICAgICAgIGlmIChpc05hTihOdW1iZXIodmFsdWUpKSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihgSW52YWxpZCB0b29sIGNhbGw6IHZhbHVlICR7dmFsdWV9IGlzIG5vdCBhIHZhbGlkIG51bWJlcmApO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0b29sX2NhbGxfY29udGVudFtrZXldID0gTnVtYmVyKHZhbHVlKTsgLy8gY29lcmNlIHRvIG51bWJlciAoc2hvdWxkIG11dGF0ZSB0b29sX2NhbGxfY29udGVudClcbiAgICAgIC8vIH0gZWxzZSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdG9vbCBjYWxsOiB2YWx1ZSAke3ZhbHVlfSBpcyBub3Qgb2YgdHlwZSAke3Byb3BzW2tleV0udHlwZX1gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgSW52YWxpZCB0b29sIGNhbGw6IHZhbHVlICR7dmFsdWV9IGlzIG5vdCBvZiB0eXBlICR7cHJvcHNba2V5XS50eXBlfWApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGlmIChwcm9wc1trZXldLmVudW0gJiYgIXByb3BzW2tleV0uZW51bS5pbmNsdWRlcyh2YWx1ZSkpIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB0b29sIGNhbGw6IHZhbHVlICR7dmFsdWV9IGlzIG5vdCBpbiBlbnVtICR7cHJvcHNba2V5XS5lbnVtfWApO1xuICAgIGlmIChwcm9wc1trZXldLmVudW0gJiYgIXByb3BzW2tleV0uZW51bS5pbmNsdWRlcyh2YWx1ZSkpe1xuICAgICAgY29uc29sZS53YXJuKGBJbnZhbGlkIHRvb2wgY2FsbDogdmFsdWUgJHt2YWx1ZX0gaXMgbm90IGluIGVudW0gJHtwcm9wc1trZXldLmVudW19YCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KTtcbiAgLy8gY2hlY2sgaWYgYWxsIHJlcXVpcmVkIGtleXMgYXJlIHByZXNlbnRcbiAgdG9vbC5mdW5jdGlvbi5wYXJhbWV0ZXJzLnJlcXVpcmVkPy5mb3JFYWNoKGtleSA9PiB7XG4gICAgLy8gaWYgKCF0b29sX2NhbGxfY29udGVudFtrZXldKSB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdG9vbCBjYWxsOiBtaXNzaW5nIHJlcXVpcmVkIGtleSAke2tleX1gKTtcbiAgICBpZiAodHlwZW9mIHRvb2xfY2FsbF9jb250ZW50W2tleV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4oYEludmFsaWQgdG9vbCBjYWxsOiBtaXNzaW5nIHJlcXVpcmVkIGtleSAke2tleX1gKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRvb2xfY2FsbF9jb250ZW50W2tleV0gPT09ICcnKSB7XG4gICAgICBjb25zb2xlLndhcm4oYEVtcHR5IHZhbHVlIGZvciByZXF1aXJlZCBrZXkgJHtrZXl9YCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHRydWU7XG59XG5leHBvcnRzLmlzX3ZhbGlkX3Rvb2xfY2FsbCA9IGlzX3ZhbGlkX3Rvb2xfY2FsbDtcbiIsICJjbGFzcyBTbWFydFN0cmVhbWVyIHtcbiAgY29uc3RydWN0b3IodXJsLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7XG4gICAgICBtZXRob2QgPSAnR0VUJyxcbiAgICAgIGhlYWRlcnMgPSB7fSxcbiAgICAgIGJvZHkgPSBudWxsLFxuICAgICAgd2l0aENyZWRlbnRpYWxzID0gZmFsc2VcbiAgICB9ID0gb3B0aW9ucztcblxuICAgIHRoaXMudXJsID0gdXJsO1xuICAgIHRoaXMubWV0aG9kID0gbWV0aG9kO1xuICAgIHRoaXMuaGVhZGVycyA9IGhlYWRlcnM7XG4gICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICB0aGlzLndpdGhDcmVkZW50aWFscyA9IHdpdGhDcmVkZW50aWFscztcbiAgICB0aGlzLmxpc3RlbmVycyA9IHt9O1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IHRoaXMuQ09OTkVDVElORztcbiAgICB0aGlzLnByb2dyZXNzID0gMDtcbiAgICB0aGlzLmNodW5rID0gJyc7XG4gICAgdGhpcy5sYXN0X2V2ZW50X2lkID0gJyc7XG4gICAgdGhpcy54aHIgPSBudWxsO1xuICAgIHRoaXMuRklFTERfU0VQQVJBVE9SID0gJzonO1xuICAgIHRoaXMuSU5JVElBTElaSU5HID0gLTE7XG4gICAgdGhpcy5DT05ORUNUSU5HID0gMDtcbiAgICB0aGlzLk9QRU4gPSAxO1xuICAgIHRoaXMuQ0xPU0VEID0gMjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIGV2ZW50IGxpc3RlbmVyIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50IHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIHR5cGUgb2YgdGhlIGV2ZW50LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciAtIFRoZSBsaXN0ZW5lciBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgZXZlbnQgaXMgdHJpZ2dlcmVkLlxuICAgKi9cbiAgYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgIGlmICghdGhpcy5saXN0ZW5lcnNbdHlwZV0pIHRoaXMubGlzdGVuZXJzW3R5cGVdID0gW107XG4gICAgaWYgKCF0aGlzLmxpc3RlbmVyc1t0eXBlXS5pbmNsdWRlcyhsaXN0ZW5lcikpIHRoaXMubGlzdGVuZXJzW3R5cGVdLnB1c2gobGlzdGVuZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYW4gZXZlbnQgbGlzdGVuZXIgZnJvbSB0aGUgU21hcnRTdHJlYW1lciBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiBldmVudCB0byByZW1vdmUgdGhlIGxpc3RlbmVyIGZyb20uXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIC0gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIHJlbW92ZS5cbiAgICovXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICBpZiAoIXRoaXMubGlzdGVuZXJzW3R5cGVdKSByZXR1cm47XG4gICAgdGhpcy5saXN0ZW5lcnNbdHlwZV0gPSB0aGlzLmxpc3RlbmVyc1t0eXBlXS5maWx0ZXIoKGNhbGxiYWNrKSA9PiBjYWxsYmFjayAhPT0gbGlzdGVuZXIpO1xuICAgIGlmICh0aGlzLmxpc3RlbmVyc1t0eXBlXS5sZW5ndGggPT09IDApIGRlbGV0ZSB0aGlzLmxpc3RlbmVyc1t0eXBlXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGV2ZW50IHRvIHRoZSBhcHByb3ByaWF0ZSBldmVudCBoYW5kbGVycy5cbiAgICpcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgdG8gYmUgZGlzcGF0Y2hlZC5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IC0gUmV0dXJucyB0cnVlIGlmIHRoZSBldmVudCB3YXMgc3VjY2Vzc2Z1bGx5IGRpc3BhdGNoZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICovXG4gIGRpc3BhdGNoRXZlbnQoZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50KSByZXR1cm4gdHJ1ZTtcbiAgICBldmVudC5zb3VyY2UgPSB0aGlzO1xuICAgIGNvbnN0IG9uSGFuZGxlciA9ICdvbicgKyBldmVudC50eXBlO1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcywgb25IYW5kbGVyKSkge1xuICAgICAgdGhpc1tvbkhhbmRsZXJdLmNhbGwodGhpcywgZXZlbnQpO1xuICAgICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRoaXMubGlzdGVuZXJzW2V2ZW50LnR5cGVdKSB7XG4gICAgICB0aGlzLmxpc3RlbmVyc1tldmVudC50eXBlXS5mb3JFYWNoKChjYWxsYmFjaykgPT4ge1xuICAgICAgICBjYWxsYmFjayhldmVudCk7XG4gICAgICAgIHJldHVybiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWF0ZXMgdGhlIHN0cmVhbWluZyBwcm9jZXNzLlxuICAgKi9cbiAgc3RyZWFtKCkge1xuICAgIHRoaXMuI3NldFJlYWR5U3RhdGUodGhpcy5DT05ORUNUSU5HKTtcbiAgICB0aGlzLnhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHRoaXMueGhyLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgdGhpcy4jb25TdHJlYW1Qcm9ncmVzcy5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnhoci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy4jb25TdHJlYW1Mb2FkZWQuYmluZCh0aGlzKSk7XG4gICAgdGhpcy54aHIuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIHRoaXMuI2NoZWNrU3RyZWFtQ2xvc2VkLmJpbmQodGhpcykpO1xuICAgIHRoaXMueGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy4jb25TdHJlYW1GYWlsdXJlLmJpbmQodGhpcykpO1xuICAgIHRoaXMueGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgdGhpcy4jb25TdHJlYW1BYm9ydC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnhoci5vcGVuKHRoaXMubWV0aG9kLCB0aGlzLnVybCk7XG4gICAgZm9yIChjb25zdCBoZWFkZXIgaW4gdGhpcy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLnhoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlciwgdGhpcy5oZWFkZXJzW2hlYWRlcl0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5sYXN0X2V2ZW50X2lkKSB0aGlzLnhoci5zZXRSZXF1ZXN0SGVhZGVyKCdMYXN0LUV2ZW50LUlEJywgdGhpcy5sYXN0X2V2ZW50X2lkKTtcbiAgICB0aGlzLnhoci53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLndpdGhDcmVkZW50aWFscztcbiAgICB0aGlzLnhoci5zZW5kKHRoaXMuYm9keSk7XG4gIH1cbiAgLyoqXG4gICAqIEVuZHMgdGhlIHN0cmVhbWVyIGNvbm5lY3Rpb24uXG4gICAqIEFib3J0cyB0aGUgY3VycmVudCBYSFIgcmVxdWVzdCBhbmQgc2V0cyB0aGUgcmVhZHkgc3RhdGUgdG8gQ0xPU0VELlxuICAgKi9cbiAgZW5kKCkge1xuICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IHRoaXMuQ0xPU0VEKSByZXR1cm47XG4gICAgdGhpcy54aHIuYWJvcnQoKTtcbiAgICB0aGlzLnhociA9IG51bGw7XG4gICAgdGhpcy4jc2V0UmVhZHlTdGF0ZSh0aGlzLkNMT1NFRCk7XG4gIH1cblxuICAvLyBwcml2YXRlIG1ldGhvZHNcbiAgI3NldFJlYWR5U3RhdGUoc3RhdGUpIHtcbiAgICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudCgncmVhZHlTdGF0ZUNoYW5nZScpO1xuICAgIGV2ZW50LnJlYWR5U3RhdGUgPSBzdGF0ZTtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBzdGF0ZTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICB9XG4gICNvblN0cmVhbUZhaWx1cmUoZSkge1xuICAgIGNvbnN0IGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdlcnJvcicpO1xuICAgIGV2ZW50LmRhdGEgPSBlLmN1cnJlbnRUYXJnZXQucmVzcG9uc2U7XG4gICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICB0aGlzLmVuZCgpO1xuICB9XG4gICNvblN0cmVhbUFib3J0KGUpIHtcbiAgICBjb25zdCBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnYWJvcnQnKTtcbiAgICB0aGlzLmVuZCgpO1xuICB9XG4gICNvblN0cmVhbVByb2dyZXNzKGUpIHtcbiAgICBpZiAoIXRoaXMueGhyKSByZXR1cm47XG4gICAgaWYgKHRoaXMueGhyLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICB0aGlzLiNvblN0cmVhbUZhaWx1cmUoZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IHRoaXMuQ09OTkVDVElORykge1xuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnb3BlbicpKTtcbiAgICAgIHRoaXMuI3NldFJlYWR5U3RhdGUodGhpcy5PUEVOKTtcbiAgICB9XG4gICAgY29uc3QgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlVGV4dC5zdWJzdHJpbmcodGhpcy5wcm9ncmVzcyk7XG4gICAgdGhpcy5wcm9ncmVzcyArPSBkYXRhLmxlbmd0aDtcbiAgICAvLyBkYXRhLnNwbGl0KC8oXFxyXFxufFxccnxcXG4pezJ9L2cpLmZvckVhY2goKHBhcnQpID0+IHtcbiAgICBkYXRhLnNwbGl0KC8oXFxyXFxufFxccnxcXG4pL2cpLmZvckVhY2goKHBhcnQpID0+IHtcbiAgICAgIGlmIChwYXJ0LnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHRoaXMuI3BhcnNlRXZlbnRDaHVuayh0aGlzLmNodW5rLnRyaW0oKSkpO1xuICAgICAgICB0aGlzLmNodW5rID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNodW5rICs9IHBhcnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgI29uU3RyZWFtTG9hZGVkKGUpIHtcbiAgICB0aGlzLiNvblN0cmVhbVByb2dyZXNzKGUpO1xuICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh0aGlzLiNwYXJzZUV2ZW50Q2h1bmsodGhpcy5jaHVuaykpO1xuICAgIHRoaXMuY2h1bmsgPSAnJztcbiAgfVxuICAjcGFyc2VFdmVudENodW5rKGNodW5rKSB7XG4gICAgaWYgKCFjaHVuayB8fCBjaHVuay5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGUgPSB7IGlkOiBudWxsLCByZXRyeTogbnVsbCwgZGF0YTogJycsIGV2ZW50OiAnbWVzc2FnZScsIHRleHQ6ICcnIH07XG4gICAgY2h1bmsuc3BsaXQoLyhcXHJcXG58XFxyfFxcbikvKS5mb3JFYWNoKChsaW5lKSA9PiB7XG4gICAgICAvLyBsaW5lID0gbGluZS50cmltUmlnaHQoKTtcbiAgICAgIGxpbmUgPSBsaW5lLnRyaW0oKTtcbiAgICAgIGNvbnN0IGluZGV4ID0gbGluZS5pbmRleE9mKHRoaXMuRklFTERfU0VQQVJBVE9SKTtcbiAgICAgIGlmIChpbmRleCA8PSAwKSByZXR1cm47XG4gICAgICAvLyBjb25zdCBmaWVsZCA9IGxpbmUuc3Vic3RyaW5nKDAsIGluZGV4KTtcbiAgICAgIC8vIGFsc28gcmVtb3ZlIHF1b3Rlc1xuICAgICAgY29uc3QgZmllbGQgPSBsaW5lLnN1YnN0cmluZygwLCBpbmRleCkucmVwbGFjZSgvXlwifFwiJC9nLCAnJyk7XG4gICAgICBpZighWydpZCcsICdyZXRyeScsICdkYXRhJywgJ2V2ZW50JywgJ3RleHQnXS5pbmNsdWRlcyhmaWVsZCkpIHJldHVybjtcbiAgICAgIC8vIGlmICghKGZpZWxkIGluIGUpKSByZXR1cm47XG4gICAgICAvLyBjb25zdCB2YWx1ZSA9IGxpbmUuc3Vic3RyaW5nKGluZGV4ICsgMSkudHJpbUxlZnQoKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gbGluZS5zdWJzdHJpbmcoaW5kZXggKyAxKS50cmltKCkucmVwbGFjZSgvXlwifFwiJC9nLCAnJyk7XG4gICAgICAvLyBpZiAoZmllbGQgPT09ICdkYXRhJykgZVtmaWVsZF0gKz0gdmFsdWU7XG4gICAgICAvLyBlbHNlIGVbZmllbGRdID0gdmFsdWU7XG4gICAgICBlLmRhdGEgKz0gdmFsdWU7XG4gICAgfSk7XG4gICAgaWYgKGUuaWQpIHRoaXMubGFzdF9ldmVudF9pZCA9IGUuaWQ7XG4gICAgY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoZS5ldmVudCB8fCAnbWVzc2FnZScpO1xuICAgIGV2ZW50LmlkID0gZS5pZDtcbiAgICBldmVudC5kYXRhID0gZS5kYXRhIHx8ICcnO1xuICAgIGV2ZW50Lmxhc3RfZXZlbnRfaWQgPSB0aGlzLmxhc3RfZXZlbnRfaWQ7XG4gICAgcmV0dXJuIGV2ZW50O1xuICB9XG4gICNjaGVja1N0cmVhbUNsb3NlZCgpIHtcbiAgICBpZiAoIXRoaXMueGhyKSByZXR1cm47XG4gICAgaWYgKHRoaXMueGhyLnJlYWR5U3RhdGUgPT09IFhNTEh0dHBSZXF1ZXN0LkRPTkUpIHRoaXMuI3NldFJlYWR5U3RhdGUodGhpcy5DTE9TRUQpO1xuICB9XG5cbn1cblxuZXhwb3J0cy5TbWFydFN0cmVhbWVyID0gU21hcnRTdHJlYW1lcjtcbiIsICJhc3luYyBmdW5jdGlvbiBmZXRjaF9vcGVuX3JvdXRlcl9tb2RlbHMoYXBpX2tleSwgcmVxdWVzdF9hZGFwdGVyPW51bGwpIHtcbiAgdHJ5IHtcbiAgICBsZXQgZGF0YTtcbiAgICBpZighcmVxdWVzdF9hZGFwdGVyKSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL29wZW5yb3V0ZXIuYWkvYXBpL3YxL21vZGVscycpO1xuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05ldHdvcmsgcmVzcG9uc2Ugd2FzIG5vdCBvaycpO1xuICAgICAgfVxuICAgICAgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGNvbnNvbGUubG9nKCdNb2RlbCBkYXRhIHJldHJpZXZlZDonLCBkYXRhKTtcbiAgICB9ZWxzZXtcbiAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCByZXF1ZXN0X2FkYXB0ZXIoe1xuICAgICAgICB1cmw6ICdodHRwczovL29wZW5yb3V0ZXIuYWkvYXBpL3YxL21vZGVscycsXG4gICAgICB9KTtcbiAgICAgIGRhdGEgPSBhd2FpdCByZXNwLmpzb247XG4gICAgfVxuICAgIHJldHVybiBkYXRhLmRhdGFcbiAgICAgIC8vIC5maWx0ZXIobW9kZWwgPT4gIW1vZGVsLmlkLmluY2x1ZGVzKCdpbnN0cnVjdCcpKVxuICAgICAgLm1hcChtb2RlbCA9PiAoe1xuICAgICAgICBtb2RlbF9uYW1lOiBtb2RlbC5pZCxcbiAgICAgICAga2V5OiBtb2RlbC5pZCxcbiAgICAgICAgbWF4X2lucHV0X3Rva2VuczogbW9kZWwuY29udGV4dF9sZW5ndGgsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBtb2RlbC5uYW1lLFxuICAgICAgICBhY3Rpb25zOiBtb2RlbC5kZXNjcmlwdGlvbi5pbmNsdWRlcygndG9vbCB1c2UnKSB8fCBtb2RlbC5kZXNjcmlwdGlvbi5pbmNsdWRlcygnZnVuY3Rpb24gY2FsbCcpLFxuICAgICAgICBtdWx0aW1vZGFsOiBtb2RlbC5hcmNoaXRlY3R1cmUubW9kYWxpdHkgPT09ICdtdWx0aW1vZGFsJyxcbiAgICAgICAgcmF3OiBtb2RlbFxuICAgICAgfSkpXG4gICAgO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBtb2RlbCBkYXRhOicsIGVycm9yKTtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cbmV4cG9ydHMuZmV0Y2hfb3Blbl9yb3V0ZXJfbW9kZWxzID0gZmV0Y2hfb3Blbl9yb3V0ZXJfbW9kZWxzOyIsICJjb25zdCBtb2RlbF9jb250ZXh0ID0ge1xuICBcImdwdC0zLjUtdHVyYm8tMDEyNVwiOiB7XG4gICAgXCJjb250ZXh0XCI6IDE2Mzg1LFxuICAgIFwibWF4X291dFwiOiA0MDk2XG4gIH0sXG4gIFwiZ3B0LTMuNS10dXJiby0wMzAxXCI6IHtcbiAgICBcImNvbnRleHRcIjogNDA5NyxcbiAgICBcIm1heF9vdXRcIjogNDA5N1xuICB9LFxuICBcImdwdC0zLjUtdHVyYm8tMDYxM1wiOiB7XG4gICAgXCJjb250ZXh0XCI6IDQwOTcsXG4gICAgXCJtYXhfb3V0XCI6IDQwOTdcbiAgfSxcbiAgXCJncHQtMy41LXR1cmJvLTExMDZcIjoge1xuICAgIFwiY29udGV4dFwiOiAxNjM4NSxcbiAgICBcIm1heF9vdXRcIjogNDA5NlxuICB9LFxuICBcImdwdC0zLjUtdHVyYm8tMTZrXCI6IHtcbiAgICBcImNvbnRleHRcIjogMTYzODUsXG4gICAgXCJtYXhfb3V0XCI6IDE2Mzg1XG4gIH0sXG4gIFwiZ3B0LTMuNS10dXJiby0xNmstMDYxM1wiOiB7XG4gICAgXCJjb250ZXh0XCI6IDE2Mzg1LFxuICAgIFwibWF4X291dFwiOiAxNjM4NVxuICB9LFxuICBcImdwdC00LTAxMjUtcHJldmlld1wiOiB7XG4gICAgXCJjb250ZXh0XCI6IDEyODAwMCxcbiAgICBcIm1heF9vdXRcIjogNDA5NlxuICB9LFxuICBcImdwdC00LTAzMTRcIjoge1xuICAgIFwiY29udGV4dFwiOiA4MTkyLFxuICAgIFwibWF4X291dFwiOiA4MTkyXG4gIH0sXG4gIFwiZ3B0LTQtMDYxM1wiOiB7XG4gICAgXCJjb250ZXh0XCI6IDgxOTIsXG4gICAgXCJtYXhfb3V0XCI6IDgxOTJcbiAgfSxcbiAgXCJncHQtNC0xMTA2LXByZXZpZXdcIjoge1xuICAgIFwiY29udGV4dFwiOiAxMjgwMDAsXG4gICAgXCJtYXhfb3V0XCI6IDQwOTZcbiAgfSxcbiAgXCJncHQtNC0xMTA2LXZpc2lvbi1wcmV2aWV3XCI6IHtcbiAgICBcImNvbnRleHRcIjogMTI4MDAwLFxuICAgIFwibWF4X291dFwiOiA0MDk2XG4gIH0sXG4gIFwiZ3B0LTQtMzJrLTAzMTRcIjoge1xuICAgIFwiY29udGV4dFwiOiAzMjc2OCxcbiAgICBcIm1heF9vdXRcIjogMzI3NjhcbiAgfSxcbiAgXCJncHQtNC0zMmstMDYxM1wiOiB7XG4gICAgXCJjb250ZXh0XCI6IDMyNzY4LFxuICAgIFwibWF4X291dFwiOiAzMjc2OFxuICB9LFxuICBcImdwdC00LXR1cmJvLTIwMjQtMDQtMDlcIjoge1xuICAgIFwiY29udGV4dFwiOiAxMjgwMDAsXG4gICAgXCJtYXhfb3V0XCI6IDQwOTZcbiAgfSxcbiAgXCJncHQtNC10dXJiby1wcmV2aWV3XCI6IHtcbiAgICBcImNvbnRleHRcIjogMTI4MDAwLFxuICAgIFwibWF4X291dFwiOiA0MDk2XG4gIH0sXG4gIFwiZ3B0LTQtdmlzaW9uLXByZXZpZXdcIjoge1xuICAgIFwiY29udGV4dFwiOiAxMjgwMDAsXG4gICAgXCJtYXhfb3V0XCI6IDQwOTZcbiAgfSxcbiAgXCJncHQtMy41LXR1cmJvXCI6IHtcbiAgICBcImNvbnRleHRcIjogMTYzODUsXG4gICAgXCJtYXhfb3V0XCI6IDQwOTZcbiAgfSxcbiAgXCJncHQtNC10dXJib1wiOiB7XG4gICAgXCJjb250ZXh0XCI6IDEyODAwMCxcbiAgICBcIm1heF9vdXRcIjogNDA5NlxuICB9LFxuICBcImdwdC00LTMya1wiOiB7XG4gICAgXCJjb250ZXh0XCI6IDMyNzY4LFxuICAgIFwibWF4X291dFwiOiAzMjc2OFxuICB9LFxuICBcImdwdC00b1wiOiB7XG4gICAgXCJjb250ZXh0XCI6IDEyODAwMCxcbiAgICBcIm1heF9vdXRcIjogNDA5NlxuICB9LFxuICBcImdwdC00XCI6IHtcbiAgICBcImNvbnRleHRcIjogODE5MixcbiAgICBcIm1heF9vdXRcIjogODE5MlxuICB9XG59XG5hc3luYyBmdW5jdGlvbiBmZXRjaF9vcGVuYWlfbW9kZWxzKGFwaV9rZXksIHJlcXVlc3RfYWRhcHRlcj1udWxsKSB7XG4gIGlmICghYXBpX2tleSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ05vIEFQSSBrZXkgcHJvdmlkZWQnKTtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdHJ5IHtcbiAgICBsZXQgZGF0YTtcbiAgICBpZighcmVxdWVzdF9hZGFwdGVyKSB7XG4gICAgICBjb25zb2xlLmxvZygnVXNpbmcgZmV0Y2gnKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEvbW9kZWxzJywge1xuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7YXBpX2tleX1gLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTmV0d29yayByZXNwb25zZSB3YXMgbm90IG9rJyk7XG4gICAgICB9XG4gICAgICBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgY29uc29sZS5sb2coJ01vZGVsIGRhdGEgcmV0cmlldmVkOicsIGRhdGEpO1xuICAgIH1lbHNle1xuICAgICAgY29uc29sZS5sb2coJ1VzaW5nIHJlcXVlc3QgYWRhcHRlcicpO1xuICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IHJlcXVlc3RfYWRhcHRlcih7XG4gICAgICAgIHVybDogJ2h0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEvbW9kZWxzJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke2FwaV9rZXl9YCxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgZGF0YSA9IGF3YWl0IHJlc3AuanNvbjtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGEuZGF0YVxuICAgICAgLmZpbHRlcihtb2RlbCA9PiBtb2RlbC5pZC5zdGFydHNXaXRoKCdncHQtJykgJiYgIW1vZGVsLmlkLmluY2x1ZGVzKCctaW5zdHJ1Y3QnKSlcbiAgICAgIC5tYXAobW9kZWwgPT4ge1xuICAgICAgICBjb25zdCBvdXQgPSB7XG4gICAgICAgICAgbW9kZWxfbmFtZTogbW9kZWwuaWQsIFxuICAgICAgICAgIGtleTogbW9kZWwuaWQsXG4gICAgICAgICAgbXVsdGltb2RhbDogbW9kZWwuaWQuaW5jbHVkZXMoJ3Zpc2lvbicpIHx8IG1vZGVsLmlkLmluY2x1ZGVzKCdncHQtNC10dXJibycpXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG0gPSBPYmplY3QuZW50cmllcyhtb2RlbF9jb250ZXh0KS5maW5kKG0gPT4gbVswXSA9PT0gbW9kZWwuaWQgfHwgbW9kZWwuaWQuc3RhcnRzV2l0aChtWzBdICsgJy0nKSk7XG4gICAgICAgIGlmKG0pIHtcbiAgICAgICAgICBvdXQubWF4X2lucHV0X3Rva2VucyA9IG1bMV0uY29udGV4dDtcbiAgICAgICAgICBvdXQuZGVzY3JpcHRpb24gPSBgY29udGV4dDogJHttWzFdLmNvbnRleHR9LCBvdXRwdXQ6ICR7bVsxXS5tYXhfb3V0fWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH0pXG4gICAgO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBtb2RlbCBkYXRhOicsIGVycm9yKTtcbiAgICByZXR1cm4gW107XG4gIH1cbn1cbmV4cG9ydHMuZmV0Y2hfb3BlbmFpX21vZGVscyA9IGZldGNoX29wZW5haV9tb2RlbHM7IiwgImFzeW5jIGZ1bmN0aW9uIGZldGNoX2dvb2dsZV9nZW1pbmlfbW9kZWxzKGFwaV9rZXksIHJlcXVlc3RfYWRhcHRlcj1udWxsKSB7XG4gIGlmICghYXBpX2tleSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ05vIEFQSSBrZXkgcHJvdmlkZWQnKTtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgdHJ5IHtcbiAgICBsZXQgZGF0YTtcbiAgICBpZighcmVxdWVzdF9hZGFwdGVyKSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCdodHRwczovL2dlbmVyYXRpdmVsYW5ndWFnZS5nb29nbGVhcGlzLmNvbS92MWJldGEvbW9kZWxzP2tleT0nICsgYXBpX2tleSk7XG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTmV0d29yayByZXNwb25zZSB3YXMgbm90IG9rJyk7XG4gICAgICB9XG4gICAgICBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgY29uc29sZS5sb2coJ01vZGVsIGRhdGEgcmV0cmlldmVkOicsIGRhdGEpO1xuICAgIH1lbHNle1xuICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IHJlcXVlc3RfYWRhcHRlcih7XG4gICAgICAgIHVybDogJ2h0dHBzOi8vZ2VuZXJhdGl2ZWxhbmd1YWdlLmdvb2dsZWFwaXMuY29tL3YxYmV0YS9tb2RlbHM/a2V5PScgKyBhcGlfa2V5LFxuICAgICAgfSk7XG4gICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShyZXNwKSk7XG4gICAgICBkYXRhID0gYXdhaXQgcmVzcC5qc29uO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YS5tb2RlbHNcbiAgICAgIC5maWx0ZXIobW9kZWwgPT4gbW9kZWwubmFtZS5zdGFydHNXaXRoKCdtb2RlbHMvZ2VtaW5pJykpXG4gICAgICAubWFwKG1vZGVsID0+IHtcbiAgICAgICAgY29uc3Qgb3V0ID0ge1xuICAgICAgICAgIG1vZGVsX25hbWU6IG1vZGVsLm5hbWUuc3BsaXQoJy8nKS5wb3AoKSwgXG4gICAgICAgICAga2V5OiBtb2RlbC5uYW1lLnNwbGl0KCcvJykucG9wKCksXG4gICAgICAgICAgbWF4X2lucHV0X3Rva2VuczogbW9kZWwuaW5wdXRUb2tlbkxpbWl0LFxuICAgICAgICAgIG1heF9vdXRwdXRfdG9rZW5zOiBtb2RlbC5tYXhPdXRwdXRUb2tlbnMsXG4gICAgICAgICAgZGVzY3JpcHRpb246IG1vZGVsLmRlc2NyaXB0aW9uLFxuICAgICAgICAgIG11bHRpbW9kYWw6IG1vZGVsLm5hbWUuaW5jbHVkZXMoJ3Zpc2lvbicpIHx8IG1vZGVsLmRlc2NyaXB0aW9uLmluY2x1ZGVzKCdtdWx0aW1vZGFsJyksXG4gICAgICAgICAgcmF3OiBtb2RlbFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIG1vZGVsIGRhdGE6JywgZXJyb3IpO1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuZXhwb3J0cy5mZXRjaF9nb29nbGVfZ2VtaW5pX21vZGVscyA9IGZldGNoX2dvb2dsZV9nZW1pbmlfbW9kZWxzOyIsICIvLyBjdXJsIC0tcmVxdWVzdCBHRVQgXFxcbi8vICAgLS11cmwgaHR0cHM6Ly9hcGkuY29oZXJlLmFpL3YxL21vZGVscyBcXFxuLy8gICAtLWhlYWRlciAnYWNjZXB0OiBhcHBsaWNhdGlvbi9qc29uJyBcXFxuLy8gICAtLWhlYWRlciBcIkF1dGhvcml6YXRpb246IGJlYXJlciAkQ09fQVBJX0tFWVwiXG5cbmFzeW5jIGZ1bmN0aW9uIGZldGNoX2NvaGVyZV9tb2RlbHMoYXBpX2tleSwgcmVxdWVzdF9hZGFwdGVyPW51bGwpIHtcbiAgaWYgKCFhcGlfa2V5KSB7XG4gICAgY29uc29sZS5lcnJvcignTm8gQVBJIGtleSBwcm92aWRlZCcpO1xuICAgIHJldHVybiBbXTtcbiAgfVxuICB0cnkge1xuICAgIGxldCBkYXRhO1xuICAgIGlmKCFyZXF1ZXN0X2FkYXB0ZXIpIHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vYXBpLmNvaGVyZS5haS92MS9tb2RlbHMnLCB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHthcGlfa2V5fWAsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOZXR3b3JrIHJlc3BvbnNlIHdhcyBub3Qgb2snKTtcbiAgICAgIH1cbiAgICAgIGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBjb25zb2xlLmxvZygnTW9kZWwgZGF0YSByZXRyaWV2ZWQ6JywgZGF0YSk7XG4gICAgfWVsc2V7XG4gICAgICBjb25zdCByZXNwID0gYXdhaXQgcmVxdWVzdF9hZGFwdGVyKHtcbiAgICAgICAgdXJsOiAnaHR0cHM6Ly9hcGkuY29oZXJlLmFpL3YxL21vZGVscycsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHthcGlfa2V5fWAsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIGRhdGEgPSBhd2FpdCByZXNwLmpzb247XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKCdNb2RlbCBkYXRhIHJldHJpZXZlZDonLCBkYXRhKTtcbiAgICByZXR1cm4gZGF0YS5tb2RlbHNcbiAgICAgIC5maWx0ZXIobW9kZWwgPT4gbW9kZWwubmFtZS5zdGFydHNXaXRoKCdjb21tYW5kLScpKVxuICAgICAgLm1hcChtb2RlbCA9PiB7XG4gICAgICAgIGNvbnN0IG91dCA9IHtcbiAgICAgICAgICBtb2RlbF9uYW1lOiBtb2RlbC5uYW1lLFxuICAgICAgICAgIGtleTogbW9kZWwubmFtZSxcbiAgICAgICAgICBtYXhfaW5wdXRfdG9rZW5zOiBtb2RlbC5jb250ZXh0X2xlbmd0aCxcbiAgICAgICAgICB0b2tlbml6ZXJfdXJsOiBtb2RlbC50b2tlbml6ZXJfdXJsLFxuICAgICAgICAgIGZpbmV0dW5lZDogbW9kZWwuZmluZXR1bmVkLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBgTWF4IGlucHV0IHRva2VuczogJHttb2RlbC5jb250ZXh0X2xlbmd0aH0sIEZpbmV0dW5lZDogJHttb2RlbC5maW5ldHVuZWR9YFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIG1vZGVsIGRhdGE6JywgZXJyb3IpO1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuZXhwb3J0cy5mZXRjaF9jb2hlcmVfbW9kZWxzID0gZmV0Y2hfY29oZXJlX21vZGVscztcblxuIiwgIi8vIGZha2UgaXQgYmVjYXVzZSBhbnRocm9waWMgZG9lc24ndCBoYXZlIG1vZGVsIGxpc3QgQVBJIGVuZHBvaW50XG5hc3luYyBmdW5jdGlvbiBmZXRjaF9hbnRocm9waWNfbW9kZWxzKCkge1xuICByZXR1cm4gW1xuICAgIHtcbiAgICAgIFwia2V5XCI6IFwiY2xhdWRlLTMtb3B1cy0yMDI0MDIyOVwiLFxuICAgICAgXCJtb2RlbF9uYW1lXCI6IFwiY2xhdWRlLTMtb3B1cy0yMDI0MDIyOVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkFudGhyb3BpYydzIENsYXVkZSBPcHVzXCIsXG4gICAgICBcIm1heF9pbnB1dF90b2tlbnNcIjogMjAwMDAwLFxuICAgICAgXCJtYXhfb3V0cHV0X3Rva2Vuc1wiOiA0MDAwLFxuICAgICAgXCJtdWx0aW1vZGFsXCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIGtleTogXCJjbGF1ZGUtMy01LXNvbm5ldC0yMDI0MDYyMFwiLFxuICAgICAgXCJtb2RlbF9uYW1lXCI6IFwiY2xhdWRlLTMuNS1zb25uZXQtMjAyNDA2MjBcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBbnRocm9waWMncyBDbGF1ZGUgU29ubmV0XCIsXG4gICAgICBcIm1heF9pbnB1dF90b2tlbnNcIjogMjAwMDAwLFxuICAgICAgXCJtYXhfb3V0cHV0X3Rva2Vuc1wiOiA0MDAwLFxuICAgICAgXCJtdWx0aW1vZGFsXCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIGtleTogXCJjbGF1ZGUtMy1oYWlrdS0yMDI0MDMwN1wiLFxuICAgICAgXCJtb2RlbF9uYW1lXCI6IFwiY2xhdWRlLTMtaGFpa3UtMjAyNDAzMDdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBbnRocm9waWMncyBDbGF1ZGUgSGFpa3VcIixcbiAgICAgIFwibWF4X2lucHV0X3Rva2Vuc1wiOiAyMDAwMDAsXG4gICAgICAgIFwibWF4X291dHB1dF90b2tlbnNcIjogNDAwMCxcbiAgICAgICAgXCJtdWx0aW1vZGFsXCI6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIGtleTogXCJjbGF1ZGUtMy1zb25uZXQtMjAyNDAyMjlcIixcbiAgICAgIFwibW9kZWxfbmFtZVwiOiBcImNsYXVkZS0zLXNvbm5ldC0yMDI0MDIyOVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkFudGhyb3BpYydzIENsYXVkZSBTb25uZXRcIixcbiAgICAgIFwibWF4X2lucHV0X3Rva2Vuc1wiOiAyMDAwMDAsXG4gICAgICBcIm1heF9vdXRwdXRfdG9rZW5zXCI6IDQwMDAsXG4gICAgICBcIm11bHRpbW9kYWxcIjogdHJ1ZVxuICAgIH0sXG4gIF07XG59XG5leHBvcnRzLmZldGNoX2FudGhyb3BpY19tb2RlbHMgPSBmZXRjaF9hbnRocm9waWNfbW9kZWxzO1xuXG4iLCAiY29uc3QgeyBmZXRjaF9vcGVuX3JvdXRlcl9tb2RlbHMgfSA9IHJlcXVpcmUoJy4vb3Blbl9yb3V0ZXInKTtcbmNvbnN0IHsgZmV0Y2hfb3BlbmFpX21vZGVscyB9ID0gcmVxdWlyZSgnLi9vcGVuYWknKTtcbmNvbnN0IHsgZmV0Y2hfZ29vZ2xlX2dlbWluaV9tb2RlbHMgfSA9IHJlcXVpcmUoJy4vZ29vZ2xlX2dlbWluaScpO1xuY29uc3QgeyBmZXRjaF9jb2hlcmVfbW9kZWxzIH0gPSByZXF1aXJlKCcuL2NvaGVyZScpO1xuY29uc3QgeyBmZXRjaF9hbnRocm9waWNfbW9kZWxzIH0gPSByZXF1aXJlKCcuL2FudGhyb3BpYycpO1xuZXhwb3J0cy5vcGVuX3JvdXRlciA9IGZldGNoX29wZW5fcm91dGVyX21vZGVscztcbmV4cG9ydHMub3BlbmFpID0gZmV0Y2hfb3BlbmFpX21vZGVscztcbmV4cG9ydHMuZ29vZ2xlX2dlbWluaSA9IGZldGNoX2dvb2dsZV9nZW1pbmlfbW9kZWxzO1xuZXhwb3J0cy5jb2hlcmUgPSBmZXRjaF9jb2hlcmVfbW9kZWxzO1xuZXhwb3J0cy5hbnRocm9waWMgPSBmZXRjaF9hbnRocm9waWNfbW9kZWxzO1xuXG4iLCAiLy8gQ29weXJpZ2h0IChjKSBCcmlhbiBKb3NlcGggUGV0cm9cblxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG4vLyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4vLyBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cbi8vIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbi8vIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuLy8gRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxuLy8gTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRVxuLy8gTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTlxuLy8gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OXG4vLyBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuY29uc3QgYWRhcHRlcnMgPSByZXF1aXJlKCcuL2FkYXB0ZXJzJyk7XG5jb25zdCBwbGF0Zm9ybXMgPSByZXF1aXJlKCcuL3BsYXRmb3Jtcy5qc29uJyk7XG5jb25zdCB7IGlzX3ZhbGlkX3Rvb2xfY2FsbCB9ID0gcmVxdWlyZSgnLi91dGlscy9pc192YWxpZF90b29sX2NhbGwnKTtcbmNvbnN0IHsgU21hcnRTdHJlYW1lciB9ID0gcmVxdWlyZSgnLi9zdHJlYW1lcicpO1xuY29uc3QgZmV0Y2hfbW9kZWxzID0gcmVxdWlyZShcIi4vbW9kZWxzL2ZldGNoXCIpO1xuLyoqXG4gKiBTbWFydENoYXRNb2RlbCBjbGFzcyBwcm92aWRlcyBmdW5jdGlvbmFsaXRpZXMgdG8gaGFuZGxlIGNoYXQgaW50ZXJhY3Rpb25zIHdpdGggdmFyaW91cyBtb2RlbHMgYW5kIGFkYXB0ZXJzLlxuICogSXQgc3VwcG9ydHMgc3RyZWFtaW5nIGFuZCBub24tc3RyZWFtaW5nIHJlc3BvbnNlcywgdG9vbCBjYWxscywgYW5kIGN1c3RvbWl6YXRpb25zIHRocm91Z2ggb3B0aW9ucy5cbiAqL1xuY2xhc3MgU21hcnRDaGF0TW9kZWwge1xuICAvKipcbiAgICogQ29uc3RydWN0cyBhbiBpbnN0YW5jZSBvZiBTbWFydENoYXRNb2RlbCB3aXRoIHNwZWNpZmllZCBlbnZpcm9ubWVudCwgbW9kZWwga2V5LCBhbmQgb3B0aW9ucy5cbiAgICogQHBhcmFtIHtPYmplY3R9IG1haW4gLSBUaGUgbWFpbiBlbnZpcm9ubWVudCBjb250ZXh0LCB0eXBpY2FsbHkgY29udGFpbmluZyBjb25maWd1cmF0aW9ucyBhbmQgc3RhdGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwbGF0Zm9ybV9rZXkgLSBLZXkgdG8gc2VsZWN0IHRoZSBzcGVjaWZpYyBtb2RlbCBjb25maWd1cmF0aW9uIGZyb20gbW9kZWxzLmpzb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtb2RlbF9jb25maWcgLSBPcHRpb25hbCBwYXJhbWV0ZXJzIHRvIG92ZXJyaWRlIG1vZGVsIGNvbmZpZ3VyYXRpb25zLlxuICAgKi9cbiAgY29uc3RydWN0b3IobWFpbiwgcGxhdGZvcm1fa2V5LCBtb2RlbF9jb25maWc9e30pIHtcbiAgICB0aGlzLmVudiA9IG1haW47XG4gICAgdGhpcy5tYWluID0gdGhpcy5lbnY7IC8vIERFUFJFQ0FURURcbiAgICB0aGlzLmNvbmZpZyA9IHtcbiAgICAgIC4uLihwbGF0Zm9ybXNbcGxhdGZvcm1fa2V5XSB8fCB7fSksXG4gICAgICAuLi5tb2RlbF9jb25maWcsIC8vIG92ZXJyaWRlIGRlZmF1bHQgcGxhdGZvcm0gY29uZmlnXG4gICAgfVxuICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHRoaXMuY29uZmlnKSk7XG4gICAgdGhpcy5wbGF0Zm9ybV9rZXkgPSBwbGF0Zm9ybV9rZXk7XG4gICAgdGhpcy5hY3RpdmVfc3RyZWFtID0gbnVsbDtcbiAgICB0aGlzLl9yZXF1ZXN0X2FkYXB0ZXIgPSBudWxsO1xuICAgIHRoaXMucGxhdGZvcm1zID0gcGxhdGZvcm1zO1xuICAgIGlmKHRoaXMuY29uZmlnLmFkYXB0ZXIpIHRoaXMuYWRhcHRlciA9IG5ldyBhZGFwdGVyc1t0aGlzLmNvbmZpZy5hZGFwdGVyXSh0aGlzKTtcbiAgICBpZih0aGlzLmFkYXB0ZXIpIGNvbnNvbGUubG9nKFwiaGFzIGNoYXQgbW9kZWwgYWRhcHRlclwiKTtcbiAgfVxuICBzdGF0aWMgZ2V0IG1vZGVscygpIHsgcmV0dXJuIHBsYXRmb3JtczsgfSAvLyBERVBSRUNBVEVEIChjb25mdXNpbmcgbmFtZSlcbiAgLy8gXG4gIHN0YXRpYyBnZXQgcGxhdGZvcm1zKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwbGF0Zm9ybXMpLm1hcChrZXkgPT4gKHtcbiAgICAgIGtleSxcbiAgICAgIC4uLnBsYXRmb3Jtc1trZXldLFxuICAgIH0pKTtcbiAgfVxuICBnZXQgcGxhdGZvcm0oKSB7IHJldHVybiBwbGF0Zm9ybXNbdGhpcy5wbGF0Zm9ybV9rZXldOyB9XG4gIGdldCBkZWZhdWx0X29wdHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRlbXBlcmF0dXJlOiAwLjMsXG4gICAgICB0b3BfcDogMSxcbiAgICAgIHByZXNlbmNlX3BlbmFsdHk6IDAsXG4gICAgICBmcmVxdWVuY3lfcGVuYWx0eTogMCxcbiAgICAgIG46IDEsXG4gICAgICBtb2RlbDogdGhpcy5tb2RlbF9uYW1lLFxuICAgICAgbWF4X3Rva2VuczogdGhpcy5tYXhfb3V0cHV0X3Rva2VucyxcbiAgICB9O1xuICB9XG4gIGFzeW5jIHJlcXVlc3RfbWlkZGxld2FyZXMob3B0cykgeyByZXR1cm4gb3B0czsgfVxuICAvKipcbiAgICogQ29tcGxldGVzIHRoZSBjaGF0IGludGVyYWN0aW9uIGJ5IHByb2Nlc3NpbmcgdGhlIHByb3ZpZGVkIG9wdGlvbnMsIG1ha2luZyBhbiBBUEkgcmVxdWVzdCwgYW5kIGhhbmRsaW5nIHRoZSByZXNwb25zZS5cbiAgICogVGhpcyBtZXRob2Qgc3VwcG9ydHMgYm90aCBzdHJlYW1pbmcgYW5kIG5vbi1zdHJlYW1pbmcgcmVzcG9uc2VzLCBhbmQgY2FuIGhhbmRsZSB0b29sIGNhbGxzIGlmIHNwZWNpZmllZCBpbiB0aGUgcmVzcG9uc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gVGhlIG9wdGlvbnMgZm9yIHRoZSBjaGF0IGNvbXBsZXRpb24gd2hpY2ggbWF5IGluY2x1ZGUgc2V0dGluZ3MgbGlrZSB0ZW1wZXJhdHVyZSwgbWF4IHRva2VucywgZXRjLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlbmRlciAtIEZsYWcgdG8gZGV0ZXJtaW5lIGlmIHRoZSByZXNwb25zZSBzaG91bGQgYmUgcmVuZGVyZWQgaW4gdGhlIFVJLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmd8dm9pZD59IC0gUmV0dXJucyB0aGUgY2hhdCByZXNwb25zZSBjb250ZW50IG9yIGhhbmRsZXMgdG9vbCBvdXRwdXRzIHJlY3Vyc2l2ZWx5LiBJbiBjYXNlIG9mIGVycm9ycywgaXQgbWF5IHJldHVybiBhbiBlcnJvciBtZXNzYWdlLlxuICAgKi9cbiAgYXN5bmMgY29tcGxldGUob3B0cyA9IHt9LCByZW5kZXIgPSB0cnVlKSB7XG4gICAgY29uc3QgcHJlcGFyZWRfb3B0cyA9IGF3YWl0IHRoaXMucHJlcGFyZV9vcHRpb25zKG9wdHMpO1xuICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLmNyZWF0ZV9yZXF1ZXN0KHByZXBhcmVkX29wdHMpO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICBpZiAocHJlcGFyZWRfb3B0cy5zdHJlYW0pIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaGFuZGxlX3N0cmVhbWluZ19yZXF1ZXN0KHJlcXVlc3QsIHJlbmRlcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5oYW5kbGVfbm9uX3N0cmVhbWluZ19yZXF1ZXN0KHJlcXVlc3QsIHByZXBhcmVkX29wdHMsIHJlbmRlcik7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVfZXJyb3IoZXJyLCByZW5kZXIpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHByZXBhcmVfb3B0aW9ucyhvcHRzKSB7XG4gICAgaWYgKCF0aGlzLmJhc2VfbW9kZWxfY29uZmlnKSB7XG4gICAgICB0aGlzLmJhc2VfbW9kZWxfY29uZmlnID0gYXdhaXQgdGhpcy5nZXRfYmFzZV9tb2RlbF9jb25maWcoKTtcbiAgICAgIHRoaXMuY29uZmlnID0ge1xuICAgICAgICAuLi50aGlzLmJhc2VfbW9kZWxfY29uZmlnLFxuICAgICAgICAuLi50aGlzLmNvbmZpZyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgcHJlcGFyZWRfb3B0cyA9IHtcbiAgICAgIC4uLnRoaXMuZGVmYXVsdF9vcHRzLFxuICAgICAgbWVzc2FnZXM6IChhd2FpdCB0aGlzLmN1cnJlbnQ/LmdldF9jaGF0X21sKCkpPy5tZXNzYWdlcyB8fCBbXSxcbiAgICAgIC4uLm9wdHMsXG4gICAgfTtcblxuICAgIGlmIChwcmVwYXJlZF9vcHRzLnN0cmVhbSAhPT0gZmFsc2UgJiYgdGhpcy5jb25maWcuc3RyZWFtaW5nICYmICF0aGlzLmN1cnJlbnQ/LnRvb2xfY2hvaWNlKSB7XG4gICAgICBwcmVwYXJlZF9vcHRzLnN0cmVhbSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXBhcmVkX29wdHMuc3RyZWFtID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdF9taWRkbGV3YXJlcyhKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHByZXBhcmVkX29wdHMpKSk7XG4gIH1cblxuICBjcmVhdGVfcmVxdWVzdChvcHRzKSB7XG4gICAgY29uc3QgcmVxID0ge1xuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuYXBpX2tleX1gXG4gICAgICB9LFxuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuY29uZmlnLmhlYWRlcnMpIHtcbiAgICAgIHJlcS5oZWFkZXJzID0geyAuLi5yZXEuaGVhZGVycywgLi4udGhpcy5jb25maWcuaGVhZGVycyB9O1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbmZpZy5hcGlfa2V5X2hlYWRlcikge1xuICAgICAgaWYgKHRoaXMuY29uZmlnLmFwaV9rZXlfaGVhZGVyICE9PSAnbm9uZScpIHtcbiAgICAgICAgcmVxLmhlYWRlcnNbdGhpcy5jb25maWcuYXBpX2tleV9oZWFkZXJdID0gdGhpcy5hcGlfa2V5O1xuICAgICAgfVxuICAgICAgZGVsZXRlIHJlcS5oZWFkZXJzLkF1dGhvcml6YXRpb247XG4gICAgfVxuXG4gICAgY29uc3QgYm9keSA9IHR5cGVvZiB0aGlzLmVudi5hY3Rpb25zPy5wcmVwYXJlX3JlcXVlc3RfYm9keSA9PT0gJ2Z1bmN0aW9uJyBcbiAgICAgID8gdGhpcy5lbnYuYWN0aW9ucy5wcmVwYXJlX3JlcXVlc3RfYm9keShvcHRzKSBcbiAgICAgIDogeyAuLi5vcHRzIH07XG5cbiAgICByZXEuYm9keSA9IEpTT04uc3RyaW5naWZ5KHR5cGVvZiB0aGlzLmFkYXB0ZXI/LnByZXBhcmVfcmVxdWVzdF9ib2R5ID09PSAnZnVuY3Rpb24nIFxuICAgICAgPyB0aGlzLmFkYXB0ZXIucHJlcGFyZV9yZXF1ZXN0X2JvZHkoYm9keSkgXG4gICAgICA6IGJvZHkpO1xuXG4gICAgcmV0dXJuIHJlcTtcbiAgfVxuXG4gIGFzeW5jIGhhbmRsZV9zdHJlYW1pbmdfcmVxdWVzdChyZXF1ZXN0LCByZW5kZXIpIHtcbiAgICByZXR1cm4gdGhpcy5zdHJlYW0ocmVxdWVzdCk7XG4gIH1cblxuICBhc3luYyBoYW5kbGVfbm9uX3N0cmVhbWluZ19yZXF1ZXN0KHJlcXVlc3QsIG9wdHMsIHJlbmRlcikge1xuICAgIGNvbnN0IHJlc3BfanNvbiA9IGF3YWl0IHRoaXMucmVxdWVzdChyZXF1ZXN0KTtcbiAgICBcbiAgICBpZiAocmVzcF9qc29uLmVycm9yKSB7XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVfYXBpX2Vycm9yKHJlc3BfanNvbi5lcnJvciwgcmVuZGVyKTtcbiAgICB9XG5cbiAgICAvLyBpZiBpcyB0b29sX2NhbGwsIGhhbmRsZSB0b29sX2NhbGwgYW5kIHJldHVyblxuICAgIGNvbnN0IHRvb2xfY2FsbCA9IHRoaXMuZ2V0X3Rvb2xfY2FsbChyZXNwX2pzb24pO1xuICAgIGlmICh0b29sX2NhbGwpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZV90b29sX2NhbGwodG9vbF9jYWxsLCBvcHRzLCByZW5kZXIpO1xuICAgIH1cblxuICAgIGNvbnN0IG1lc3NhZ2VfY29udGVudCA9IHRoaXMuZ2V0X21lc3NhZ2VfY29udGVudChyZXNwX2pzb24pO1xuICAgIGlmIChyZW5kZXIpIHtcbiAgICAgIHRoaXMuZG9uZV9oYW5kbGVyKG1lc3NhZ2VfY29udGVudCk7XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlX2NvbnRlbnQ7XG4gIH1cblxuICBoYW5kbGVfYXBpX2Vycm9yKGVycm9yLCByZW5kZXIpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICBpZiAocmVuZGVyKSB7XG4gICAgICB0aGlzLmRvbmVfaGFuZGxlcihcIipBUEkgRXJyb3IuIFNlZSBjb25zb2xlIGxvZ3MgZm9yIGRldGFpbHMuKlwiKTtcbiAgICB9XG4gICAgcmV0dXJuIFwiKkFQSSBFcnJvci4gU2VlIGNvbnNvbGUgbG9ncyBmb3IgZGV0YWlscy4qXCI7XG4gIH1cblxuICBhc3luYyBoYW5kbGVfdG9vbF9jYWxsKHRvb2xfY2FsbCwgb3B0cywgcmVuZGVyKSB7XG4gICAgaWYgKHRoaXMuZW52LmNoYXRzPy5jdXJyZW50Py50b29sX2Nob2ljZSkge1xuICAgICAgdGhpcy5lbnYuY2hhdHMuY3VycmVudC50b29sX2Nob2ljZSA9IG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgdG9vbF9uYW1lID0gdGhpcy5nZXRfdG9vbF9uYW1lKHRvb2xfY2FsbCk7XG4gICAgY29uc3QgdG9vbF9jYWxsX2NvbnRlbnQgPSB0aGlzLmdldF90b29sX2NhbGxfY29udGVudCh0b29sX2NhbGwpO1xuICAgIGNvbnN0IHRvb2xzID0gb3B0cy50b29scyB8fCBbXTtcbiAgICBjb25zdCB0b29sID0gdG9vbHMuZmluZCgodCkgPT4gdC5mdW5jdGlvbi5uYW1lID09PSB0b29sX25hbWUpO1xuICAgIGNvbnN0IHRvb2xfaGFuZGxlciA9IHRoaXMuZ2V0X3Rvb2xfaGFuZGxlcih0b29sX25hbWUpO1xuXG4gICAgaWYgKCF0b29sX2hhbmRsZXIgfHwgIWlzX3ZhbGlkX3Rvb2xfY2FsbCh0b29sLCB0b29sX2NhbGxfY29udGVudCkpIHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZV9pbnZhbGlkX3Rvb2xfY2FsbCh0b29sX25hbWUsIHRvb2xfY2FsbF9jb250ZW50KTtcbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLmFkZF90b29sX2NhbGxfdG9fY2hhdCh0b29sX25hbWUsIHRvb2xfY2FsbF9jb250ZW50KTtcbiAgICBjb25zdCB0b29sX291dHB1dCA9IGF3YWl0IHRvb2xfaGFuZGxlcih0aGlzLmVudiwgdG9vbF9jYWxsX2NvbnRlbnQpO1xuXG4gICAgaWYgKHRvb2xfb3V0cHV0KSB7XG4gICAgICBhd2FpdCB0aGlzLmN1cnJlbnQuYWRkX3Rvb2xfb3V0cHV0KHRvb2xfbmFtZSwgdG9vbF9vdXRwdXQpO1xuICAgICAgdGhpcy5jdXJyZW50LnRvb2xfY2hvaWNlID0gJ25vbmUnOyAvLyBwcmV2ZW50IHN1YnNlcXVlbnQgdG9vbCBjYWxscyBmcm9tIHByZXZlbnRpbmcgY29tcGxldGlvblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUoe30pOyAvLyBlbXB0eSBvcHRzXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlX2ludmFsaWRfdG9vbF9jYWxsKHRvb2xfbmFtZSwgdG9vbF9jYWxsX2NvbnRlbnQpIHtcbiAgICBjb25zb2xlLndhcm4oYFRvb2wgJHt0b29sX25hbWV9IG5vdCBmb3VuZCBvciBpbnZhbGlkLCByZXR1cm5pbmcgdG9vbF9jYWxsX2NvbnRlbnRgKTtcbiAgICBjb25zb2xlLmxvZyh7dG9vbF9jYWxsX2NvbnRlbnR9KTtcbiAgICByZXR1cm4gdG9vbF9jYWxsX2NvbnRlbnQ7XG4gIH1cblxuICBhc3luYyBhZGRfdG9vbF9jYWxsX3RvX2NoYXQodG9vbF9uYW1lLCB0b29sX2NhbGxfY29udGVudCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5jdXJyZW50Py5hZGRfbWVzc2FnZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYXdhaXQgdGhpcy5jdXJyZW50LmFkZF9tZXNzYWdlKHtcbiAgICAgICAgcm9sZTogJ2Fzc2lzdGFudCcsXG4gICAgICAgIHRvb2xfY2FsbHM6IFt7XG4gICAgICAgICAgZnVuY3Rpb246IHtcbiAgICAgICAgICAgIG5hbWU6IHRvb2xfbmFtZSxcbiAgICAgICAgICAgIGFyZ3VtZW50czogSlNPTi5zdHJpbmdpZnkodG9vbF9jYWxsX2NvbnRlbnQpLFxuICAgICAgICAgIH1cbiAgICAgICAgfV1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZV9lcnJvcihlcnIsIHJlbmRlcikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICBpZiAocmVuZGVyKSB7XG4gICAgICB0aGlzLmRvbmVfaGFuZGxlcihcIipBbiBlcnJvciBvY2N1cnJlZC4gU2VlIGNvbnNvbGUgbG9ncyBmb3IgZGV0YWlscy4qXCIpO1xuICAgIH1cbiAgICByZXR1cm4gXCIqQW4gZXJyb3Igb2NjdXJyZWQuIFNlZSBjb25zb2xlIGxvZ3MgZm9yIGRldGFpbHMuKlwiO1xuICB9XG5cbiAgLy8gSEFORExFIFRPT0xTXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIHRvb2wgaGFuZGxlciBmdW5jdGlvbiBiYXNlZCBvbiB0aGUgdG9vbCBuYW1lIGZyb20gdGhlIGVudmlyb25tZW50J3MgYWN0aW9ucy5cbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIG92ZXJyaWRkZW4gdG8gdXNlIGN1c3RvbSBsb2dpYyBmb3IgaGFuZGxpbmcgdG9vbHMuXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9vbF9uYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHRvb2wgZm9yIHdoaWNoIHRoZSBoYW5kbGVyIGlzIHRvIGJlIHJldHJpZXZlZC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBUaGUgaGFuZGxlciBmdW5jdGlvbiBmb3IgdGhlIHNwZWNpZmllZCB0b29sLlxuICAgKi9cbiAgZ2V0X3Rvb2xfaGFuZGxlcih0b29sX25hbWUpIHsgcmV0dXJuIHRoaXMuZW52LmFjdGlvbnM/LmFjdGlvbnM/Llt0b29sX25hbWVdPy5oYW5kbGVyOyB9XG5cbiAgLyoqXG4gICAqIEV4dHJhY3RzIHRoZSB0b29sIGNhbGwgaW5mb3JtYXRpb24gZnJvbSBhIEpTT04gcmVzcG9uc2UuIFRoaXMgbWV0aG9kIHN1cHBvcnRzIGFkYXB0ZXItc3BlY2lmaWMgbG9naWMuXG4gICAqIElmIG5vIGFkYXB0ZXIgbWV0aG9kIGlzIHByb3ZpZGVkLCBpdCBkZWZhdWx0cyB0byB0aGUgZXhwZWN0ZWQgT3BlbkFJIEpTT04gZm9ybWF0LlxuICAgKiBcbiAgICogQHBhcmFtIHtPYmplY3R9IGpzb24gLSBUaGUgSlNPTiByZXNwb25zZSBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgdGhlIHRvb2wgY2FsbC5cbiAgICogQHJldHVybnMge09iamVjdH0gVGhlIGZpcnN0IHRvb2wgY2FsbCBmb3VuZCBpbiB0aGUgcmVzcG9uc2UuXG4gICAqL1xuICBnZXRfdG9vbF9jYWxsKGpzb24pIHtcbiAgICBpZih0eXBlb2YgdGhpcy5hZGFwdGVyPy5nZXRfdG9vbF9jYWxsID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdGhpcy5hZGFwdGVyLmdldF90b29sX2NhbGwoanNvbik7XG4gICAgcmV0dXJuIGpzb24uY2hvaWNlcz8uWzBdLm1lc3NhZ2UudG9vbF9jYWxscz8uWzBdOyAvLyBPcGVuQUkgZm9ybWF0XG4gIH0gXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHRvb2wgbmFtZSBmcm9tIGEgdG9vbCBjYWxsIG9iamVjdC4gU3VwcG9ydHMgYWRhcHRlci1zcGVjaWZpYyBpbXBsZW1lbnRhdGlvbnMuXG4gICAqIERlZmF1bHRzIHRvIGV4dHJhY3RpbmcgdGhlIG5hbWUgZGlyZWN0bHkgZnJvbSB0aGUgdG9vbCBjYWxsIHN0cnVjdHVyZS5cbiAgICogXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0b29sX2NhbGwgLSBUaGUgdG9vbCBjYWxsIG9iamVjdCBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgdGhlIHRvb2wgbmFtZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIG5hbWUgb2YgdGhlIHRvb2wuXG4gICAqL1xuICBnZXRfdG9vbF9uYW1lKHRvb2xfY2FsbCkge1xuICAgIGlmKHR5cGVvZiB0aGlzLmFkYXB0ZXI/LmdldF90b29sX25hbWUgPT09ICdmdW5jdGlvbicpIHJldHVybiB0aGlzLmFkYXB0ZXIuZ2V0X3Rvb2xfbmFtZSh0b29sX2NhbGwpO1xuICAgIHJldHVybiB0b29sX2NhbGwuZnVuY3Rpb24ubmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHRyYWN0cyB0aGUgdG9vbCBjYWxsIGNvbnRlbnQgZnJvbSBhIHRvb2wgY2FsbCBvYmplY3QuIFN1cHBvcnRzIGFkYXB0ZXItc3BlY2lmaWMgbG9naWMuXG4gICAqIERlZmF1bHRzIHRvIHBhcnNpbmcgdGhlICdhcmd1bWVudHMnIGZpZWxkIG9mIHRoZSB0b29sIGNhbGwgZnVuY3Rpb24gYXMgSlNPTi5cbiAgICogXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB0b29sX2NhbGwgLSBUaGUgdG9vbCBjYWxsIG9iamVjdCBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgdGhlIGNvbnRlbnQuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBwYXJzZWQgYXJndW1lbnRzIG9mIHRoZSB0b29sIGNhbGwuXG4gICAqL1xuICBnZXRfdG9vbF9jYWxsX2NvbnRlbnQodG9vbF9jYWxsKSB7XG4gICAgaWYodHlwZW9mIHRoaXMuYWRhcHRlcj8uZ2V0X3Rvb2xfY2FsbF9jb250ZW50ID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdGhpcy5hZGFwdGVyLmdldF90b29sX2NhbGxfY29udGVudCh0b29sX2NhbGwpO1xuICAgIHJldHVybiBKU09OLnBhcnNlKHRvb2xfY2FsbC5mdW5jdGlvbi5hcmd1bWVudHMpO1xuICB9XG5cbiAgLy8gSEFORExFIE1FU1NBR0VTXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIG1lc3NhZ2Ugb2JqZWN0IGZyb20gYSBKU09OIHJlc3BvbnNlLiBTdXBwb3J0cyBhZGFwdGVyLXNwZWNpZmljIGltcGxlbWVudGF0aW9ucy5cbiAgICogRGVmYXVsdHMgdG8gaGFuZGxpbmcgYm90aCBPcGVuQUkgYW5kIE9sbGFtYSBmb3JtYXRzIGJ5IGNoZWNraW5nIGZvciBtZXNzYWdlIHN0cnVjdHVyZXMgaW4gJ2Nob2ljZXMnLlxuICAgKiBcbiAgICogQHBhcmFtIHtPYmplY3R9IGpzb24gLSBUaGUgSlNPTiByZXNwb25zZSBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgdGhlIG1lc3NhZ2UuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBtZXNzYWdlIG9iamVjdCBleHRyYWN0ZWQgZnJvbSB0aGUgcmVzcG9uc2UuXG4gICAqL1xuICBnZXRfbWVzc2FnZShqc29uKSB7XG4gICAgaWYodHlwZW9mIHRoaXMuYWRhcHRlcj8uZ2V0X21lc3NhZ2UgPT09ICdmdW5jdGlvbicpIHJldHVybiB0aGlzLmFkYXB0ZXIuZ2V0X21lc3NhZ2UoanNvbik7XG4gICAgcmV0dXJuIGpzb24uY2hvaWNlcz8uWzBdLm1lc3NhZ2UgfHwganNvbi5tZXNzYWdlOyAvLyBzdXBwb3J0cyBPcGVuQUkgYW5kIE9sbGFtYVxuICB9XG5cbiAgLyoqXG4gICAqIEV4dHJhY3RzIHRoZSBjb250ZW50IG9mIGEgbWVzc2FnZSBmcm9tIGEgSlNPTiByZXNwb25zZS4gU3VwcG9ydHMgYWRhcHRlci1zcGVjaWZpYyBpbXBsZW1lbnRhdGlvbnMuXG4gICAqIFRoaXMgbWV0aG9kIHJlbGllcyBvbiBgZ2V0X21lc3NhZ2VgIHRvIGZpcnN0IHJldHJpZXZlIHRoZSBtZXNzYWdlIG9iamVjdC5cbiAgICogXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBqc29uIC0gVGhlIEpTT04gcmVzcG9uc2UgZnJvbSB3aGljaCB0byBleHRyYWN0IHRoZSBtZXNzYWdlIGNvbnRlbnQuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb250ZW50IG9mIHRoZSBtZXNzYWdlLlxuICAgKi9cbiAgZ2V0X21lc3NhZ2VfY29udGVudChqc29uKSB7XG4gICAgaWYodHlwZW9mIHRoaXMuYWRhcHRlcj8uZ2V0X21lc3NhZ2VfY29udGVudCA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHRoaXMuYWRhcHRlci5nZXRfbWVzc2FnZV9jb250ZW50KGpzb24pO1xuICAgIHJldHVybiB0aGlzLmdldF9tZXNzYWdlKGpzb24pLmNvbnRlbnQ7XG4gIH1cblxuICBhc3luYyByZXF1ZXN0KHJlcSl7XG4gICAgcmVxLnVybCA9IHRoaXMuZW5kcG9pbnQ7XG4gICAgcmVxLnRocm93ID0gZmFsc2U7XG4gICAgLy8gaGFuZGxlIGZhbGxiYWNrIHRvIGZldGNoIChhbGxvd3MgZm9yIG92ZXJ3cml0aW5nIGluIGNoaWxkIGNsYXNzZXMpXG4gICAgY29uc3QgcmVzcCA9IHRoaXMuX3JlcXVlc3RfYWRhcHRlciA/IGF3YWl0IHRoaXMuX3JlcXVlc3RfYWRhcHRlcihyZXEpIDogYXdhaXQgZmV0Y2godGhpcy5lbmRwb2ludCwgcmVxKTtcbiAgICBjb25zb2xlLmxvZyhyZXNwKTtcbiAgICBjb25zdCByZXNwX2pzb24gPSBhd2FpdCB0aGlzLmdldF9yZXNwX2pzb24ocmVzcCk7XG4gICAgY29uc29sZS5sb2cocmVzcF9qc29uKTtcbiAgICByZXR1cm4gcmVzcF9qc29uO1xuICB9XG4gIGFzeW5jIGdldF9yZXNwX2pzb24ocmVzcCkgeyByZXR1cm4gKHR5cGVvZiByZXNwLmpzb24gPT09ICdmdW5jdGlvbicpID8gYXdhaXQgcmVzcC5qc29uKCkgOiBhd2FpdCByZXNwLmpzb247IH1cbiAgZ2V0IHJlcXVlc3RfYWRhcHRlcigpeyByZXR1cm4gdGhpcy5fcmVxdWVzdF9hZGFwdGVyOyB9XG5cbiAgYXN5bmMgc3RyZWFtKHJlcSkge1xuICAgIGNvbnNvbGUubG9nKFwiU3RyZWFtaW5nIFJlcXVlc3Q6IFwiKTtcbiAgICBjb25zb2xlLmxvZyhyZXEpO1xuICAgIGNvbnN0IGZ1bGxfdGV4dCA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwic3RyZWFtXCIsIG9wdHMpO1xuICAgICAgICB0aGlzLmFjdGl2ZV9zdHJlYW0gPSBuZXcgU21hcnRTdHJlYW1lcih0aGlzLmVuZHBvaW50X3N0cmVhbWluZywgcmVxKTtcbiAgICAgICAgbGV0IGN1cnJfdGV4dCA9IFwiXCI7XG4gICAgICAgIHRoaXMuYWN0aXZlX3N0cmVhbS5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCAoZSkgPT4ge1xuICAgICAgICAgIGlmKHRoaXMuaXNfZW5kX29mX3N0cmVhbShlKSkge1xuICAgICAgICAgICAgdGhpcy5zdG9wX3N0cmVhbSgpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoY3Vycl90ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IHRleHRfY2h1bmsgPSB0aGlzLmdldF90ZXh0X2NodW5rX2Zyb21fc3RyZWFtKGUpO1xuICAgICAgICAgIGlmKCF0ZXh0X2NodW5rKSByZXR1cm47XG4gICAgICAgICAgY3Vycl90ZXh0ICs9IHRleHRfY2h1bms7XG4gICAgICAgICAgdGhpcy5jaHVua19oYW5kbGVyKHRleHRfY2h1bmspOyAvLyBjYWxsIHRoZSBjaHVuayBoYW5kbGVyIGlmIGl0IGV4aXN0c1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gdW5uZWNlc3Nhcnk/XG4gICAgICAgIHRoaXMuYWN0aXZlX3N0cmVhbS5hZGRFdmVudExpc3RlbmVyKFwicmVhZHlzdGF0ZWNoYW5nZVwiLCAoZSkgPT4ge1xuICAgICAgICAgIGlmIChlLnJlYWR5U3RhdGUgPj0gMikgY29uc29sZS5sb2coXCJSZWFkeVN0YXRlOiBcIiArIGUucmVhZHlTdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFjdGl2ZV9zdHJlYW0uYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIChlKSA9PiB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICB0aGlzLmRvbmVfaGFuZGxlcihcIipBUEkgRXJyb3IuIFNlZSBjb25zb2xlIGxvZ3MgZm9yIGRldGFpbHMuKlwiKTtcbiAgICAgICAgICB0aGlzLnN0b3Bfc3RyZWFtKCk7XG4gICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5hY3RpdmVfc3RyZWFtLnN0cmVhbSgpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgdGhpcy5zdG9wX3N0cmVhbSgpO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmRvbmVfaGFuZGxlcihmdWxsX3RleHQpOyAvLyBoYW5kbGVkIGluIGNvbXBsZXRlKClcbiAgICByZXR1cm4gZnVsbF90ZXh0O1xuICB9XG4gIGdldF90ZXh0X2NodW5rX2Zyb21fc3RyZWFtKGV2ZW50KSB7XG4gICAgaWYodHlwZW9mIHRoaXMuYWRhcHRlcj8uZ2V0X3RleHRfY2h1bmtfZnJvbV9zdHJlYW0gPT09ICdmdW5jdGlvbicpIHJldHVybiB0aGlzLmFkYXB0ZXIuZ2V0X3RleHRfY2h1bmtfZnJvbV9zdHJlYW0oZXZlbnQpO1xuICAgIGxldCByZXNwID0gbnVsbDtcbiAgICBsZXQgdGV4dF9jaHVuayA9ICcnO1xuICAgIC8vIERPOiBpcyB0aGlzIHRyeS9jYXRjaCBzdGlsbCBuZWNlc3Nhcnk/XG4gICAgdHJ5IHtcbiAgICAgIHJlc3AgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xuICAgICAgdGV4dF9jaHVuayA9IHJlc3AuY2hvaWNlc1swXS5kZWx0YS5jb250ZW50O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIGNvbnNvbGUubG9nKGV2ZW50LmRhdGEpO1xuICAgICAgaWYgKGV2ZW50LmRhdGEuaW5kZXhPZignfXsnKSA+IC0xKSBldmVudC5kYXRhID0gZXZlbnQuZGF0YS5yZXBsYWNlKC99ey9nLCAnfSx7Jyk7XG4gICAgICByZXNwID0gSlNPTi5wYXJzZShgWyR7ZXZlbnQuZGF0YX1dYCk7XG4gICAgICByZXNwLmZvckVhY2goKHIpID0+IHtcbiAgICAgICAgaWYgKHIuY2hvaWNlcykgdGV4dF9jaHVuayArPSByLmNob2ljZXNbMF0uZGVsdGEuY29udGVudDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGV4dF9jaHVuaztcbiAgfVxuICBpc19lbmRfb2Zfc3RyZWFtKGV2ZW50KSB7XG4gICAgaWYodHlwZW9mIHRoaXMuYWRhcHRlcj8uaXNfZW5kX29mX3N0cmVhbSA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHRoaXMuYWRhcHRlci5pc19lbmRfb2Zfc3RyZWFtKGV2ZW50KTtcbiAgICByZXR1cm4gZXZlbnQuZGF0YSA9PT0gXCJbRE9ORV1cIjsgLy8gdXNlIGRlZmF1bHQgT3BlbkFJIGZvcm1hdFxuICB9XG5cbiAgc3RvcF9zdHJlYW0oKSB7XG4gICAgaWYgKHRoaXMuYWN0aXZlX3N0cmVhbSkge1xuICAgICAgdGhpcy5hY3RpdmVfc3RyZWFtLmVuZCgpO1xuICAgICAgdGhpcy5hY3RpdmVfc3RyZWFtID0gbnVsbDtcbiAgICB9XG4gIH1cbiAgZG9uZV9oYW5kbGVyKGZ1bGxfc3RyKSB7XG4gICAgLy8gU2hvdWxkIGhhbmRsZTpcbiAgICAvLyAxLiBBZGQgbWVzc2FnZSB0byBjdXJyZW50IGNoYXQgaGlzdG9yeVxuICAgIC8vIDIuIFVwZGF0ZSBjaGF0IFVJXG4gICAgaWYodHlwZW9mIHRoaXMubWFpbi5kb25lX2hhbmRsZXIgPT09ICdmdW5jdGlvbicpIHRoaXMubWFpbi5kb25lX2hhbmRsZXIoZnVsbF9zdHIpO1xuICB9XG4gIGNodW5rX2hhbmRsZXIodGV4dF9jaHVuaykge1xuICAgIC8vIFNob3VsZCBoYW5kbGU6XG4gICAgLy8gMS4gVXBkYXRlIGNoYXQgVUlcbiAgICBpZih0eXBlb2YgdGhpcy5tYWluLmNodW5rX2hhbmRsZXIgPT09ICdmdW5jdGlvbicpIHRoaXMubWFpbi5jaHVua19oYW5kbGVyKHRleHRfY2h1bmspO1xuICB9XG4gIGFzeW5jIGNvdW50X3Rva2VucyhpbnB1dCkge1xuICAgIGlmKHR5cGVvZiB0aGlzLmFkYXB0ZXI/LmNvdW50X3Rva2VucyA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGF3YWl0IHRoaXMuYWRhcHRlci5jb3VudF90b2tlbnMoaW5wdXQpO1xuICAgIHJldHVybiB0aGlzLmVzdGltYXRlX3Rva2VucyhpbnB1dCk7XG4gIH1cbiAgZXN0aW1hdGVfdG9rZW5zKGlucHV0KSB7XG4gICAgaWYodHlwZW9mIHRoaXMuYWRhcHRlcj8uZXN0aW1hdGVfdG9rZW5zID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdGhpcy5hZGFwdGVyLmVzdGltYXRlX3Rva2VucyhpbnB1dCk7XG4gICAgaWYodHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JykgaW5wdXQgPSBKU09OLnN0cmluZ2lmeShpbnB1dCk7XG4gICAgcmV0dXJuIGlucHV0Lmxlbmd0aCAvIDQ7XG4gIH1cbiAgYXN5bmMgdGVzdF9hcGlfa2V5KCkge1xuICAgIGNvbnNvbGUubG9nKHRoaXMuYXBpX2tleSk7XG4gICAgdHJ5e1xuICAgICAgY29uc3QgcmVxdWVzdCA9IHtcbiAgICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAgICB7IHJvbGU6IFwidXNlclwiLCBjb250ZW50OiBcIkhlbGxvXCIgfSxcbiAgICAgICAgXSxcbiAgICAgICAgdGVtcGVyYXR1cmU6IDAsXG4gICAgICAgIG1heF90b2tlbnM6IDEwMCxcbiAgICAgICAgc3RyZWFtOiBmYWxzZSxcbiAgICAgICAgbjogMSxcbiAgICAgIH07XG4gICAgICBpZih0aGlzLmNvbmZpZy5mZXRjaF9tb2RlbHMpIHtcbiAgICAgICAgcmVxdWVzdC5tb2RlbCA9IHRoaXMuY29uZmlnLmRlZmF1bHRfbW9kZWw7XG4gICAgICB9XG4gICAgICBjb25zdCByZXNwID0gYXdhaXQgdGhpcy5jb21wbGV0ZShyZXF1ZXN0LCBmYWxzZSk7XG4gICAgICBjb25zb2xlLmxvZyhyZXNwKTtcbiAgICAgIGlmKCFyZXNwKSByZXR1cm4gZmFsc2U7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9Y2F0Y2goZXJyKXtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZ2V0X21vZGVscygpIHtcbiAgICBpZighdGhpcy5hcGlfa2V5KXtcbiAgICAgIGNvbnNvbGUud2FybihgTm8gQVBJIGtleSBmb3VuZCBmb3IgJHt0aGlzLnBsYXRmb3JtX2tleX0uIENhbm5vdCByZXRyaWV2ZSBtb2RlbHMuYCk7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIC8vIGNvbnN0IGZ4X25hbWUgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jaGF0X21vZGVsX3BsYXRmb3JtX2tleTtcbiAgICBpZih0aGlzLnBsYXRmb3Jtc1t0aGlzLnBsYXRmb3JtX2tleV0/LmZldGNoX21vZGVscyAmJiB0eXBlb2YgZmV0Y2hfbW9kZWxzW3RoaXMucGxhdGZvcm1fa2V5XSA9PT0gXCJmdW5jdGlvblwiKXtcbiAgICAgIGNvbnN0IG1vZGVscyA9IGF3YWl0IGZldGNoX21vZGVsc1t0aGlzLnBsYXRmb3JtX2tleV0odGhpcy5hcGlfa2V5LCB0aGlzLl9yZXF1ZXN0X2FkYXB0ZXIpO1xuICAgICAgaWYobW9kZWxzKSB7XG4gICAgICAgIC8vIHNvcnQgYWxwaGFiZXRpY2FsbHkgYnkgbW9kZWwgbmFtZVxuICAgICAgICBtb2RlbHMuc29ydCgoYSwgYikgPT4gYS5tb2RlbF9uYW1lLmxvY2FsZUNvbXBhcmUoYi5tb2RlbF9uYW1lKSk7XG4gICAgICAgIHJldHVybiBtb2RlbHM7XG4gICAgICB9ZWxzZSBjb25zb2xlLmVycm9yKGBObyBtb2RlbHMgZm91bmQgZm9yICR7dGhpcy5wbGF0Zm9ybV9rZXl9YCwgbW9kZWxzKTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGFzeW5jIGdldF9iYXNlX21vZGVsX2NvbmZpZygpIHtcbiAgICBjb25zdCBtb2RlbHMgPSBhd2FpdCB0aGlzLmdldF9tb2RlbHMoKTtcbiAgICByZXR1cm4gbW9kZWxzLmZpbmQoKG0pID0+IG0ua2V5ID09PSB0aGlzLm1vZGVsX25hbWUpO1xuICB9XG4gIC8vIGdldHRlcnNcbiAgZ2V0IGFwaV9rZXkoKSB7IHJldHVybiB0aGlzLmNvbmZpZy5hcGlfa2V5OyB9XG4gIGdldCBjdXJyZW50KCkgeyByZXR1cm4gdGhpcy5lbnYuY2hhdHM/LmN1cnJlbnQ7IH1cbiAgLy8gdXNlIGVuZHBvaW50IG9mIGNvbWJpbmUgcHJvdG9jb2wsIGhvc3RuYW1lLCBwb3J0LCBhbmQgcGF0aFxuICBnZXQgZW5kcG9pbnQoKSB7XG4gICAgaWYodHlwZW9mIHRoaXMuYWRhcHRlcj8uZW5kcG9pbnQgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gdGhpcy5hZGFwdGVyLmVuZHBvaW50LnJlcGxhY2UoJ01PREVMX05BTUUnLCB0aGlzLm1vZGVsX25hbWUpO1xuICAgIHJldHVybiB0aGlzLmNvbmZpZy5lbmRwb2ludCB8fCB0aGlzLmNvbmZpZy5wcm90b2NvbCArIFwiOi8vXCIgKyB0aGlzLmNvbmZpZy5ob3N0bmFtZSArICh0aGlzLmNvbmZpZy5wb3J0ID8gXCI6XCIgKyB0aGlzLmNvbmZpZy5wb3J0IDogXCJcIikgKyB0aGlzLmVuZHBvaW50X3BhdGg7XG4gIH1cbiAgZ2V0IGVuZHBvaW50X3N0cmVhbWluZygpIHtcbiAgICBpZih0eXBlb2YgdGhpcy5hZGFwdGVyPy5lbmRwb2ludF9zdHJlYW1pbmcgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gdGhpcy5hZGFwdGVyLmVuZHBvaW50X3N0cmVhbWluZy5yZXBsYWNlKCdNT0RFTF9OQU1FJywgdGhpcy5tb2RlbF9uYW1lKTtcbiAgICByZXR1cm4gdGhpcy5jb25maWcuZW5kcG9pbnRfc3RyZWFtaW5nIHx8IHRoaXMuZW5kcG9pbnQ7XG4gIH1cbiAgZ2V0IGVuZHBvaW50X3BhdGgoKSB7IHJldHVybiB0aGlzLmNvbmZpZy5wYXRoLnN0YXJ0c1dpdGgoJy8nKSA/IHRoaXMuY29uZmlnLnBhdGggOiAnLycgKyB0aGlzLmNvbmZpZy5wYXRoOyB9XG4gIGdldCBtYXhfaW5wdXRfdG9rZW5zKCkgeyByZXR1cm4gdGhpcy5jb25maWcubWF4X2lucHV0X3Rva2VuczsgfVxuICBnZXQgbWF4X291dHB1dF90b2tlbnMoKSB7IHJldHVybiB0aGlzLmNvbmZpZy5tYXhfb3V0cHV0X3Rva2VuczsgfVxuICBnZXQgbW9kZWxfbmFtZSgpIHsgcmV0dXJuIHRoaXMuY29uZmlnLm1vZGVsX25hbWUgfHwgdGhpcy5jb25maWcuZGVmYXVsdF9tb2RlbDsgfVxuICBnZXQgbXVsdGltb2RhbCgpIHsgcmV0dXJuIHR5cGVvZiB0aGlzLmFkYXB0ZXI/Lm11bHRpbW9kYWwgIT09ICd1bmRlZmluZWQnID8gdGhpcy5hZGFwdGVyLm11bHRpbW9kYWwgOiB0aGlzLmNvbmZpZy5tdWx0aW1vZGFsOyB9XG59XG5leHBvcnRzLlNtYXJ0Q2hhdE1vZGVsID0gU21hcnRDaGF0TW9kZWw7XG5cbiIsICIoZnVuY3Rpb24oZil7aWYodHlwZW9mIGV4cG9ydHM9PT1cIm9iamVjdFwiJiZ0eXBlb2YgbW9kdWxlIT09XCJ1bmRlZmluZWRcIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PVwiZnVuY3Rpb25cIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFtdLGYpfWVsc2V7dmFyIGc7aWYodHlwZW9mIHdpbmRvdyE9PVwidW5kZWZpbmVkXCIpe2c9d2luZG93fWVsc2UgaWYodHlwZW9mIGdsb2JhbCE9PVwidW5kZWZpbmVkXCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT1cInVuZGVmaW5lZFwiKXtnPXNlbGZ9ZWxzZXtnPXRoaXN9Zy5lanM9ZigpfX0pKGZ1bmN0aW9uKCl7dmFyIGRlZmluZSxtb2R1bGUsZXhwb3J0cztyZXR1cm4gZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KCkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1widXNlIHN0cmljdFwiO3ZhciBmcz1yZXF1aXJlKFwiZnNcIik7dmFyIHBhdGg9cmVxdWlyZShcInBhdGhcIik7dmFyIHV0aWxzPXJlcXVpcmUoXCIuL3V0aWxzXCIpO3ZhciBzY29wZU9wdGlvbldhcm5lZD1mYWxzZTt2YXIgX1ZFUlNJT05fU1RSSU5HPXJlcXVpcmUoXCIuLi9wYWNrYWdlLmpzb25cIikudmVyc2lvbjt2YXIgX0RFRkFVTFRfT1BFTl9ERUxJTUlURVI9XCI8XCI7dmFyIF9ERUZBVUxUX0NMT1NFX0RFTElNSVRFUj1cIj5cIjt2YXIgX0RFRkFVTFRfREVMSU1JVEVSPVwiJVwiO3ZhciBfREVGQVVMVF9MT0NBTFNfTkFNRT1cImxvY2Fsc1wiO3ZhciBfTkFNRT1cImVqc1wiO3ZhciBfUkVHRVhfU1RSSU5HPVwiKDwlJXwlJT58PCU9fDwlLXw8JV98PCUjfDwlfCU+fC0lPnxfJT4pXCI7dmFyIF9PUFRTX1BBU1NBQkxFX1dJVEhfREFUQT1bXCJkZWxpbWl0ZXJcIixcInNjb3BlXCIsXCJjb250ZXh0XCIsXCJkZWJ1Z1wiLFwiY29tcGlsZURlYnVnXCIsXCJjbGllbnRcIixcIl93aXRoXCIsXCJybVdoaXRlc3BhY2VcIixcInN0cmljdFwiLFwiZmlsZW5hbWVcIixcImFzeW5jXCJdO3ZhciBfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEFfRVhQUkVTUz1fT1BUU19QQVNTQUJMRV9XSVRIX0RBVEEuY29uY2F0KFwiY2FjaGVcIik7dmFyIF9CT009L15cXHVGRUZGLzt2YXIgX0pTX0lERU5USUZJRVI9L15bYS16QS1aXyRdWzAtOWEtekEtWl8kXSokLztleHBvcnRzLmNhY2hlPXV0aWxzLmNhY2hlO2V4cG9ydHMuZmlsZUxvYWRlcj1mcy5yZWFkRmlsZVN5bmM7ZXhwb3J0cy5sb2NhbHNOYW1lPV9ERUZBVUxUX0xPQ0FMU19OQU1FO2V4cG9ydHMucHJvbWlzZUltcGw9bmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXM7XCIpKCkuUHJvbWlzZTtleHBvcnRzLnJlc29sdmVJbmNsdWRlPWZ1bmN0aW9uKG5hbWUsZmlsZW5hbWUsaXNEaXIpe3ZhciBkaXJuYW1lPXBhdGguZGlybmFtZTt2YXIgZXh0bmFtZT1wYXRoLmV4dG5hbWU7dmFyIHJlc29sdmU9cGF0aC5yZXNvbHZlO3ZhciBpbmNsdWRlUGF0aD1yZXNvbHZlKGlzRGlyP2ZpbGVuYW1lOmRpcm5hbWUoZmlsZW5hbWUpLG5hbWUpO3ZhciBleHQ9ZXh0bmFtZShuYW1lKTtpZighZXh0KXtpbmNsdWRlUGF0aCs9XCIuZWpzXCJ9cmV0dXJuIGluY2x1ZGVQYXRofTtmdW5jdGlvbiByZXNvbHZlUGF0aHMobmFtZSxwYXRocyl7dmFyIGZpbGVQYXRoO2lmKHBhdGhzLnNvbWUoZnVuY3Rpb24odil7ZmlsZVBhdGg9ZXhwb3J0cy5yZXNvbHZlSW5jbHVkZShuYW1lLHYsdHJ1ZSk7cmV0dXJuIGZzLmV4aXN0c1N5bmMoZmlsZVBhdGgpfSkpe3JldHVybiBmaWxlUGF0aH19ZnVuY3Rpb24gZ2V0SW5jbHVkZVBhdGgocGF0aCxvcHRpb25zKXt2YXIgaW5jbHVkZVBhdGg7dmFyIGZpbGVQYXRoO3ZhciB2aWV3cz1vcHRpb25zLnZpZXdzO3ZhciBtYXRjaD0vXltBLVphLXpdKzpcXFxcfF5cXC8vLmV4ZWMocGF0aCk7aWYobWF0Y2gmJm1hdGNoLmxlbmd0aCl7cGF0aD1wYXRoLnJlcGxhY2UoL15cXC8qLyxcIlwiKTtpZihBcnJheS5pc0FycmF5KG9wdGlvbnMucm9vdCkpe2luY2x1ZGVQYXRoPXJlc29sdmVQYXRocyhwYXRoLG9wdGlvbnMucm9vdCl9ZWxzZXtpbmNsdWRlUGF0aD1leHBvcnRzLnJlc29sdmVJbmNsdWRlKHBhdGgsb3B0aW9ucy5yb290fHxcIi9cIix0cnVlKX19ZWxzZXtpZihvcHRpb25zLmZpbGVuYW1lKXtmaWxlUGF0aD1leHBvcnRzLnJlc29sdmVJbmNsdWRlKHBhdGgsb3B0aW9ucy5maWxlbmFtZSk7aWYoZnMuZXhpc3RzU3luYyhmaWxlUGF0aCkpe2luY2x1ZGVQYXRoPWZpbGVQYXRofX1pZighaW5jbHVkZVBhdGgmJkFycmF5LmlzQXJyYXkodmlld3MpKXtpbmNsdWRlUGF0aD1yZXNvbHZlUGF0aHMocGF0aCx2aWV3cyl9aWYoIWluY2x1ZGVQYXRoJiZ0eXBlb2Ygb3B0aW9ucy5pbmNsdWRlciE9PVwiZnVuY3Rpb25cIil7dGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCB0aGUgaW5jbHVkZSBmaWxlIFwiJytvcHRpb25zLmVzY2FwZUZ1bmN0aW9uKHBhdGgpKydcIicpfX1yZXR1cm4gaW5jbHVkZVBhdGh9ZnVuY3Rpb24gaGFuZGxlQ2FjaGUob3B0aW9ucyx0ZW1wbGF0ZSl7dmFyIGZ1bmM7dmFyIGZpbGVuYW1lPW9wdGlvbnMuZmlsZW5hbWU7dmFyIGhhc1RlbXBsYXRlPWFyZ3VtZW50cy5sZW5ndGg+MTtpZihvcHRpb25zLmNhY2hlKXtpZighZmlsZW5hbWUpe3Rocm93IG5ldyBFcnJvcihcImNhY2hlIG9wdGlvbiByZXF1aXJlcyBhIGZpbGVuYW1lXCIpfWZ1bmM9ZXhwb3J0cy5jYWNoZS5nZXQoZmlsZW5hbWUpO2lmKGZ1bmMpe3JldHVybiBmdW5jfWlmKCFoYXNUZW1wbGF0ZSl7dGVtcGxhdGU9ZmlsZUxvYWRlcihmaWxlbmFtZSkudG9TdHJpbmcoKS5yZXBsYWNlKF9CT00sXCJcIil9fWVsc2UgaWYoIWhhc1RlbXBsYXRlKXtpZighZmlsZW5hbWUpe3Rocm93IG5ldyBFcnJvcihcIkludGVybmFsIEVKUyBlcnJvcjogbm8gZmlsZSBuYW1lIG9yIHRlbXBsYXRlIFwiK1wicHJvdmlkZWRcIil9dGVtcGxhdGU9ZmlsZUxvYWRlcihmaWxlbmFtZSkudG9TdHJpbmcoKS5yZXBsYWNlKF9CT00sXCJcIil9ZnVuYz1leHBvcnRzLmNvbXBpbGUodGVtcGxhdGUsb3B0aW9ucyk7aWYob3B0aW9ucy5jYWNoZSl7ZXhwb3J0cy5jYWNoZS5zZXQoZmlsZW5hbWUsZnVuYyl9cmV0dXJuIGZ1bmN9ZnVuY3Rpb24gdHJ5SGFuZGxlQ2FjaGUob3B0aW9ucyxkYXRhLGNiKXt2YXIgcmVzdWx0O2lmKCFjYil7aWYodHlwZW9mIGV4cG9ydHMucHJvbWlzZUltcGw9PVwiZnVuY3Rpb25cIil7cmV0dXJuIG5ldyBleHBvcnRzLnByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KXt0cnl7cmVzdWx0PWhhbmRsZUNhY2hlKG9wdGlvbnMpKGRhdGEpO3Jlc29sdmUocmVzdWx0KX1jYXRjaChlcnIpe3JlamVjdChlcnIpfX0pfWVsc2V7dGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHByb3ZpZGUgYSBjYWxsYmFjayBmdW5jdGlvblwiKX19ZWxzZXt0cnl7cmVzdWx0PWhhbmRsZUNhY2hlKG9wdGlvbnMpKGRhdGEpfWNhdGNoKGVycil7cmV0dXJuIGNiKGVycil9Y2IobnVsbCxyZXN1bHQpfX1mdW5jdGlvbiBmaWxlTG9hZGVyKGZpbGVQYXRoKXtyZXR1cm4gZXhwb3J0cy5maWxlTG9hZGVyKGZpbGVQYXRoKX1mdW5jdGlvbiBpbmNsdWRlRmlsZShwYXRoLG9wdGlvbnMpe3ZhciBvcHRzPXV0aWxzLnNoYWxsb3dDb3B5KHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKSxvcHRpb25zKTtvcHRzLmZpbGVuYW1lPWdldEluY2x1ZGVQYXRoKHBhdGgsb3B0cyk7aWYodHlwZW9mIG9wdGlvbnMuaW5jbHVkZXI9PT1cImZ1bmN0aW9uXCIpe3ZhciBpbmNsdWRlclJlc3VsdD1vcHRpb25zLmluY2x1ZGVyKHBhdGgsb3B0cy5maWxlbmFtZSk7aWYoaW5jbHVkZXJSZXN1bHQpe2lmKGluY2x1ZGVyUmVzdWx0LmZpbGVuYW1lKXtvcHRzLmZpbGVuYW1lPWluY2x1ZGVyUmVzdWx0LmZpbGVuYW1lfWlmKGluY2x1ZGVyUmVzdWx0LnRlbXBsYXRlKXtyZXR1cm4gaGFuZGxlQ2FjaGUob3B0cyxpbmNsdWRlclJlc3VsdC50ZW1wbGF0ZSl9fX1yZXR1cm4gaGFuZGxlQ2FjaGUob3B0cyl9ZnVuY3Rpb24gcmV0aHJvdyhlcnIsc3RyLGZsbm0sbGluZW5vLGVzYyl7dmFyIGxpbmVzPXN0ci5zcGxpdChcIlxcblwiKTt2YXIgc3RhcnQ9TWF0aC5tYXgobGluZW5vLTMsMCk7dmFyIGVuZD1NYXRoLm1pbihsaW5lcy5sZW5ndGgsbGluZW5vKzMpO3ZhciBmaWxlbmFtZT1lc2MoZmxubSk7dmFyIGNvbnRleHQ9bGluZXMuc2xpY2Uoc3RhcnQsZW5kKS5tYXAoZnVuY3Rpb24obGluZSxpKXt2YXIgY3Vycj1pK3N0YXJ0KzE7cmV0dXJuKGN1cnI9PWxpbmVubz9cIiA+PiBcIjpcIiAgICBcIikrY3VycitcInwgXCIrbGluZX0pLmpvaW4oXCJcXG5cIik7ZXJyLnBhdGg9ZmlsZW5hbWU7ZXJyLm1lc3NhZ2U9KGZpbGVuYW1lfHxcImVqc1wiKStcIjpcIitsaW5lbm8rXCJcXG5cIitjb250ZXh0K1wiXFxuXFxuXCIrZXJyLm1lc3NhZ2U7dGhyb3cgZXJyfWZ1bmN0aW9uIHN0cmlwU2VtaShzdHIpe3JldHVybiBzdHIucmVwbGFjZSgvOyhcXHMqJCkvLFwiJDFcIil9ZXhwb3J0cy5jb21waWxlPWZ1bmN0aW9uIGNvbXBpbGUodGVtcGxhdGUsb3B0cyl7dmFyIHRlbXBsO2lmKG9wdHMmJm9wdHMuc2NvcGUpe2lmKCFzY29wZU9wdGlvbldhcm5lZCl7Y29uc29sZS53YXJuKFwiYHNjb3BlYCBvcHRpb24gaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIEVKUyAzXCIpO3Njb3BlT3B0aW9uV2FybmVkPXRydWV9aWYoIW9wdHMuY29udGV4dCl7b3B0cy5jb250ZXh0PW9wdHMuc2NvcGV9ZGVsZXRlIG9wdHMuc2NvcGV9dGVtcGw9bmV3IFRlbXBsYXRlKHRlbXBsYXRlLG9wdHMpO3JldHVybiB0ZW1wbC5jb21waWxlKCl9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKHRlbXBsYXRlLGQsbyl7dmFyIGRhdGE9ZHx8dXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpO3ZhciBvcHRzPW98fHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKTtpZihhcmd1bWVudHMubGVuZ3RoPT0yKXt1dGlscy5zaGFsbG93Q29weUZyb21MaXN0KG9wdHMsZGF0YSxfT1BUU19QQVNTQUJMRV9XSVRIX0RBVEEpfXJldHVybiBoYW5kbGVDYWNoZShvcHRzLHRlbXBsYXRlKShkYXRhKX07ZXhwb3J0cy5yZW5kZXJGaWxlPWZ1bmN0aW9uKCl7dmFyIGFyZ3M9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTt2YXIgZmlsZW5hbWU9YXJncy5zaGlmdCgpO3ZhciBjYjt2YXIgb3B0cz17ZmlsZW5hbWU6ZmlsZW5hbWV9O3ZhciBkYXRhO3ZhciB2aWV3T3B0cztpZih0eXBlb2YgYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGgtMV09PVwiZnVuY3Rpb25cIil7Y2I9YXJncy5wb3AoKX1pZihhcmdzLmxlbmd0aCl7ZGF0YT1hcmdzLnNoaWZ0KCk7aWYoYXJncy5sZW5ndGgpe3V0aWxzLnNoYWxsb3dDb3B5KG9wdHMsYXJncy5wb3AoKSl9ZWxzZXtpZihkYXRhLnNldHRpbmdzKXtpZihkYXRhLnNldHRpbmdzLnZpZXdzKXtvcHRzLnZpZXdzPWRhdGEuc2V0dGluZ3Mudmlld3N9aWYoZGF0YS5zZXR0aW5nc1tcInZpZXcgY2FjaGVcIl0pe29wdHMuY2FjaGU9dHJ1ZX12aWV3T3B0cz1kYXRhLnNldHRpbmdzW1widmlldyBvcHRpb25zXCJdO2lmKHZpZXdPcHRzKXt1dGlscy5zaGFsbG93Q29weShvcHRzLHZpZXdPcHRzKX19dXRpbHMuc2hhbGxvd0NvcHlGcm9tTGlzdChvcHRzLGRhdGEsX09QVFNfUEFTU0FCTEVfV0lUSF9EQVRBX0VYUFJFU1MpfW9wdHMuZmlsZW5hbWU9ZmlsZW5hbWV9ZWxzZXtkYXRhPXV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKX1yZXR1cm4gdHJ5SGFuZGxlQ2FjaGUob3B0cyxkYXRhLGNiKX07ZXhwb3J0cy5UZW1wbGF0ZT1UZW1wbGF0ZTtleHBvcnRzLmNsZWFyQ2FjaGU9ZnVuY3Rpb24oKXtleHBvcnRzLmNhY2hlLnJlc2V0KCl9O2Z1bmN0aW9uIFRlbXBsYXRlKHRleHQsb3B0cyl7b3B0cz1vcHRzfHx1dGlscy5jcmVhdGVOdWxsUHJvdG9PYmpXaGVyZVBvc3NpYmxlKCk7dmFyIG9wdGlvbnM9dXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpO3RoaXMudGVtcGxhdGVUZXh0PXRleHQ7dGhpcy5tb2RlPW51bGw7dGhpcy50cnVuY2F0ZT1mYWxzZTt0aGlzLmN1cnJlbnRMaW5lPTE7dGhpcy5zb3VyY2U9XCJcIjtvcHRpb25zLmNsaWVudD1vcHRzLmNsaWVudHx8ZmFsc2U7b3B0aW9ucy5lc2NhcGVGdW5jdGlvbj1vcHRzLmVzY2FwZXx8b3B0cy5lc2NhcGVGdW5jdGlvbnx8dXRpbHMuZXNjYXBlWE1MO29wdGlvbnMuY29tcGlsZURlYnVnPW9wdHMuY29tcGlsZURlYnVnIT09ZmFsc2U7b3B0aW9ucy5kZWJ1Zz0hIW9wdHMuZGVidWc7b3B0aW9ucy5maWxlbmFtZT1vcHRzLmZpbGVuYW1lO29wdGlvbnMub3BlbkRlbGltaXRlcj1vcHRzLm9wZW5EZWxpbWl0ZXJ8fGV4cG9ydHMub3BlbkRlbGltaXRlcnx8X0RFRkFVTFRfT1BFTl9ERUxJTUlURVI7b3B0aW9ucy5jbG9zZURlbGltaXRlcj1vcHRzLmNsb3NlRGVsaW1pdGVyfHxleHBvcnRzLmNsb3NlRGVsaW1pdGVyfHxfREVGQVVMVF9DTE9TRV9ERUxJTUlURVI7b3B0aW9ucy5kZWxpbWl0ZXI9b3B0cy5kZWxpbWl0ZXJ8fGV4cG9ydHMuZGVsaW1pdGVyfHxfREVGQVVMVF9ERUxJTUlURVI7b3B0aW9ucy5zdHJpY3Q9b3B0cy5zdHJpY3R8fGZhbHNlO29wdGlvbnMuY29udGV4dD1vcHRzLmNvbnRleHQ7b3B0aW9ucy5jYWNoZT1vcHRzLmNhY2hlfHxmYWxzZTtvcHRpb25zLnJtV2hpdGVzcGFjZT1vcHRzLnJtV2hpdGVzcGFjZTtvcHRpb25zLnJvb3Q9b3B0cy5yb290O29wdGlvbnMuaW5jbHVkZXI9b3B0cy5pbmNsdWRlcjtvcHRpb25zLm91dHB1dEZ1bmN0aW9uTmFtZT1vcHRzLm91dHB1dEZ1bmN0aW9uTmFtZTtvcHRpb25zLmxvY2Fsc05hbWU9b3B0cy5sb2NhbHNOYW1lfHxleHBvcnRzLmxvY2Fsc05hbWV8fF9ERUZBVUxUX0xPQ0FMU19OQU1FO29wdGlvbnMudmlld3M9b3B0cy52aWV3cztvcHRpb25zLmFzeW5jPW9wdHMuYXN5bmM7b3B0aW9ucy5kZXN0cnVjdHVyZWRMb2NhbHM9b3B0cy5kZXN0cnVjdHVyZWRMb2NhbHM7b3B0aW9ucy5sZWdhY3lJbmNsdWRlPXR5cGVvZiBvcHRzLmxlZ2FjeUluY2x1ZGUhPVwidW5kZWZpbmVkXCI/ISFvcHRzLmxlZ2FjeUluY2x1ZGU6dHJ1ZTtpZihvcHRpb25zLnN0cmljdCl7b3B0aW9ucy5fd2l0aD1mYWxzZX1lbHNle29wdGlvbnMuX3dpdGg9dHlwZW9mIG9wdHMuX3dpdGghPVwidW5kZWZpbmVkXCI/b3B0cy5fd2l0aDp0cnVlfXRoaXMub3B0cz1vcHRpb25zO3RoaXMucmVnZXg9dGhpcy5jcmVhdGVSZWdleCgpfVRlbXBsYXRlLm1vZGVzPXtFVkFMOlwiZXZhbFwiLEVTQ0FQRUQ6XCJlc2NhcGVkXCIsUkFXOlwicmF3XCIsQ09NTUVOVDpcImNvbW1lbnRcIixMSVRFUkFMOlwibGl0ZXJhbFwifTtUZW1wbGF0ZS5wcm90b3R5cGU9e2NyZWF0ZVJlZ2V4OmZ1bmN0aW9uKCl7dmFyIHN0cj1fUkVHRVhfU1RSSU5HO3ZhciBkZWxpbT11dGlscy5lc2NhcGVSZWdFeHBDaGFycyh0aGlzLm9wdHMuZGVsaW1pdGVyKTt2YXIgb3Blbj11dGlscy5lc2NhcGVSZWdFeHBDaGFycyh0aGlzLm9wdHMub3BlbkRlbGltaXRlcik7dmFyIGNsb3NlPXV0aWxzLmVzY2FwZVJlZ0V4cENoYXJzKHRoaXMub3B0cy5jbG9zZURlbGltaXRlcik7c3RyPXN0ci5yZXBsYWNlKC8lL2csZGVsaW0pLnJlcGxhY2UoLzwvZyxvcGVuKS5yZXBsYWNlKC8+L2csY2xvc2UpO3JldHVybiBuZXcgUmVnRXhwKHN0cil9LGNvbXBpbGU6ZnVuY3Rpb24oKXt2YXIgc3JjO3ZhciBmbjt2YXIgb3B0cz10aGlzLm9wdHM7dmFyIHByZXBlbmRlZD1cIlwiO3ZhciBhcHBlbmRlZD1cIlwiO3ZhciBlc2NhcGVGbj1vcHRzLmVzY2FwZUZ1bmN0aW9uO3ZhciBjdG9yO3ZhciBzYW5pdGl6ZWRGaWxlbmFtZT1vcHRzLmZpbGVuYW1lP0pTT04uc3RyaW5naWZ5KG9wdHMuZmlsZW5hbWUpOlwidW5kZWZpbmVkXCI7aWYoIXRoaXMuc291cmNlKXt0aGlzLmdlbmVyYXRlU291cmNlKCk7cHJlcGVuZGVkKz0nICB2YXIgX19vdXRwdXQgPSBcIlwiO1xcbicrXCIgIGZ1bmN0aW9uIF9fYXBwZW5kKHMpIHsgaWYgKHMgIT09IHVuZGVmaW5lZCAmJiBzICE9PSBudWxsKSBfX291dHB1dCArPSBzIH1cXG5cIjtpZihvcHRzLm91dHB1dEZ1bmN0aW9uTmFtZSl7aWYoIV9KU19JREVOVElGSUVSLnRlc3Qob3B0cy5vdXRwdXRGdW5jdGlvbk5hbWUpKXt0aHJvdyBuZXcgRXJyb3IoXCJvdXRwdXRGdW5jdGlvbk5hbWUgaXMgbm90IGEgdmFsaWQgSlMgaWRlbnRpZmllci5cIil9cHJlcGVuZGVkKz1cIiAgdmFyIFwiK29wdHMub3V0cHV0RnVuY3Rpb25OYW1lK1wiID0gX19hcHBlbmQ7XCIrXCJcXG5cIn1pZihvcHRzLmxvY2Fsc05hbWUmJiFfSlNfSURFTlRJRklFUi50ZXN0KG9wdHMubG9jYWxzTmFtZSkpe3Rocm93IG5ldyBFcnJvcihcImxvY2Fsc05hbWUgaXMgbm90IGEgdmFsaWQgSlMgaWRlbnRpZmllci5cIil9aWYob3B0cy5kZXN0cnVjdHVyZWRMb2NhbHMmJm9wdHMuZGVzdHJ1Y3R1cmVkTG9jYWxzLmxlbmd0aCl7dmFyIGRlc3RydWN0dXJpbmc9XCIgIHZhciBfX2xvY2FscyA9IChcIitvcHRzLmxvY2Fsc05hbWUrXCIgfHwge30pLFxcblwiO2Zvcih2YXIgaT0wO2k8b3B0cy5kZXN0cnVjdHVyZWRMb2NhbHMubGVuZ3RoO2krKyl7dmFyIG5hbWU9b3B0cy5kZXN0cnVjdHVyZWRMb2NhbHNbaV07aWYoIV9KU19JREVOVElGSUVSLnRlc3QobmFtZSkpe3Rocm93IG5ldyBFcnJvcihcImRlc3RydWN0dXJlZExvY2Fsc1tcIitpK1wiXSBpcyBub3QgYSB2YWxpZCBKUyBpZGVudGlmaWVyLlwiKX1pZihpPjApe2Rlc3RydWN0dXJpbmcrPVwiLFxcbiAgXCJ9ZGVzdHJ1Y3R1cmluZys9bmFtZStcIiA9IF9fbG9jYWxzLlwiK25hbWV9cHJlcGVuZGVkKz1kZXN0cnVjdHVyaW5nK1wiO1xcblwifWlmKG9wdHMuX3dpdGghPT1mYWxzZSl7cHJlcGVuZGVkKz1cIiAgd2l0aCAoXCIrb3B0cy5sb2NhbHNOYW1lK1wiIHx8IHt9KSB7XCIrXCJcXG5cIjthcHBlbmRlZCs9XCIgIH1cIitcIlxcblwifWFwcGVuZGVkKz1cIiAgcmV0dXJuIF9fb3V0cHV0O1wiK1wiXFxuXCI7dGhpcy5zb3VyY2U9cHJlcGVuZGVkK3RoaXMuc291cmNlK2FwcGVuZGVkfWlmKG9wdHMuY29tcGlsZURlYnVnKXtzcmM9XCJ2YXIgX19saW5lID0gMVwiK1wiXFxuXCIrXCIgICwgX19saW5lcyA9IFwiK0pTT04uc3RyaW5naWZ5KHRoaXMudGVtcGxhdGVUZXh0KStcIlxcblwiK1wiICAsIF9fZmlsZW5hbWUgPSBcIitzYW5pdGl6ZWRGaWxlbmFtZStcIjtcIitcIlxcblwiK1widHJ5IHtcIitcIlxcblwiK3RoaXMuc291cmNlK1wifSBjYXRjaCAoZSkge1wiK1wiXFxuXCIrXCIgIHJldGhyb3coZSwgX19saW5lcywgX19maWxlbmFtZSwgX19saW5lLCBlc2NhcGVGbik7XCIrXCJcXG5cIitcIn1cIitcIlxcblwifWVsc2V7c3JjPXRoaXMuc291cmNlfWlmKG9wdHMuY2xpZW50KXtzcmM9XCJlc2NhcGVGbiA9IGVzY2FwZUZuIHx8IFwiK2VzY2FwZUZuLnRvU3RyaW5nKCkrXCI7XCIrXCJcXG5cIitzcmM7aWYob3B0cy5jb21waWxlRGVidWcpe3NyYz1cInJldGhyb3cgPSByZXRocm93IHx8IFwiK3JldGhyb3cudG9TdHJpbmcoKStcIjtcIitcIlxcblwiK3NyY319aWYob3B0cy5zdHJpY3Qpe3NyYz0nXCJ1c2Ugc3RyaWN0XCI7XFxuJytzcmN9aWYob3B0cy5kZWJ1Zyl7Y29uc29sZS5sb2coc3JjKX1pZihvcHRzLmNvbXBpbGVEZWJ1ZyYmb3B0cy5maWxlbmFtZSl7c3JjPXNyYytcIlxcblwiK1wiLy8jIHNvdXJjZVVSTD1cIitzYW5pdGl6ZWRGaWxlbmFtZStcIlxcblwifXRyeXtpZihvcHRzLmFzeW5jKXt0cnl7Y3Rvcj1uZXcgRnVuY3Rpb24oXCJyZXR1cm4gKGFzeW5jIGZ1bmN0aW9uKCl7fSkuY29uc3RydWN0b3I7XCIpKCl9Y2F0Y2goZSl7aWYoZSBpbnN0YW5jZW9mIFN5bnRheEVycm9yKXt0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgYXN5bmMvYXdhaXRcIil9ZWxzZXt0aHJvdyBlfX19ZWxzZXtjdG9yPUZ1bmN0aW9ufWZuPW5ldyBjdG9yKG9wdHMubG9jYWxzTmFtZStcIiwgZXNjYXBlRm4sIGluY2x1ZGUsIHJldGhyb3dcIixzcmMpfWNhdGNoKGUpe2lmKGUgaW5zdGFuY2VvZiBTeW50YXhFcnJvcil7aWYob3B0cy5maWxlbmFtZSl7ZS5tZXNzYWdlKz1cIiBpbiBcIitvcHRzLmZpbGVuYW1lfWUubWVzc2FnZSs9XCIgd2hpbGUgY29tcGlsaW5nIGVqc1xcblxcblwiO2UubWVzc2FnZSs9XCJJZiB0aGUgYWJvdmUgZXJyb3IgaXMgbm90IGhlbHBmdWwsIHlvdSBtYXkgd2FudCB0byB0cnkgRUpTLUxpbnQ6XFxuXCI7ZS5tZXNzYWdlKz1cImh0dHBzOi8vZ2l0aHViLmNvbS9SeWFuWmltL0VKUy1MaW50XCI7aWYoIW9wdHMuYXN5bmMpe2UubWVzc2FnZSs9XCJcXG5cIjtlLm1lc3NhZ2UrPVwiT3IsIGlmIHlvdSBtZWFudCB0byBjcmVhdGUgYW4gYXN5bmMgZnVuY3Rpb24sIHBhc3MgYGFzeW5jOiB0cnVlYCBhcyBhbiBvcHRpb24uXCJ9fXRocm93IGV9dmFyIHJldHVybmVkRm49b3B0cy5jbGllbnQ/Zm46ZnVuY3Rpb24gYW5vbnltb3VzKGRhdGEpe3ZhciBpbmNsdWRlPWZ1bmN0aW9uKHBhdGgsaW5jbHVkZURhdGEpe3ZhciBkPXV0aWxzLnNoYWxsb3dDb3B5KHV0aWxzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGUoKSxkYXRhKTtpZihpbmNsdWRlRGF0YSl7ZD11dGlscy5zaGFsbG93Q29weShkLGluY2x1ZGVEYXRhKX1yZXR1cm4gaW5jbHVkZUZpbGUocGF0aCxvcHRzKShkKX07cmV0dXJuIGZuLmFwcGx5KG9wdHMuY29udGV4dCxbZGF0YXx8dXRpbHMuY3JlYXRlTnVsbFByb3RvT2JqV2hlcmVQb3NzaWJsZSgpLGVzY2FwZUZuLGluY2x1ZGUscmV0aHJvd10pfTtpZihvcHRzLmZpbGVuYW1lJiZ0eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnR5PT09XCJmdW5jdGlvblwiKXt2YXIgZmlsZW5hbWU9b3B0cy5maWxlbmFtZTt2YXIgYmFzZW5hbWU9cGF0aC5iYXNlbmFtZShmaWxlbmFtZSxwYXRoLmV4dG5hbWUoZmlsZW5hbWUpKTt0cnl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHJldHVybmVkRm4sXCJuYW1lXCIse3ZhbHVlOmJhc2VuYW1lLHdyaXRhYmxlOmZhbHNlLGVudW1lcmFibGU6ZmFsc2UsY29uZmlndXJhYmxlOnRydWV9KX1jYXRjaChlKXt9fXJldHVybiByZXR1cm5lZEZufSxnZW5lcmF0ZVNvdXJjZTpmdW5jdGlvbigpe3ZhciBvcHRzPXRoaXMub3B0cztpZihvcHRzLnJtV2hpdGVzcGFjZSl7dGhpcy50ZW1wbGF0ZVRleHQ9dGhpcy50ZW1wbGF0ZVRleHQucmVwbGFjZSgvW1xcclxcbl0rL2csXCJcXG5cIikucmVwbGFjZSgvXlxccyt8XFxzKyQvZ20sXCJcIil9dGhpcy50ZW1wbGF0ZVRleHQ9dGhpcy50ZW1wbGF0ZVRleHQucmVwbGFjZSgvWyBcXHRdKjwlXy9nbSxcIjwlX1wiKS5yZXBsYWNlKC9fJT5bIFxcdF0qL2dtLFwiXyU+XCIpO3ZhciBzZWxmPXRoaXM7dmFyIG1hdGNoZXM9dGhpcy5wYXJzZVRlbXBsYXRlVGV4dCgpO3ZhciBkPXRoaXMub3B0cy5kZWxpbWl0ZXI7dmFyIG89dGhpcy5vcHRzLm9wZW5EZWxpbWl0ZXI7dmFyIGM9dGhpcy5vcHRzLmNsb3NlRGVsaW1pdGVyO2lmKG1hdGNoZXMmJm1hdGNoZXMubGVuZ3RoKXttYXRjaGVzLmZvckVhY2goZnVuY3Rpb24obGluZSxpbmRleCl7dmFyIGNsb3Npbmc7aWYobGluZS5pbmRleE9mKG8rZCk9PT0wJiZsaW5lLmluZGV4T2YobytkK2QpIT09MCl7Y2xvc2luZz1tYXRjaGVzW2luZGV4KzJdO2lmKCEoY2xvc2luZz09ZCtjfHxjbG9zaW5nPT1cIi1cIitkK2N8fGNsb3Npbmc9PVwiX1wiK2QrYykpe3Rocm93IG5ldyBFcnJvcignQ291bGQgbm90IGZpbmQgbWF0Y2hpbmcgY2xvc2UgdGFnIGZvciBcIicrbGluZSsnXCIuJyl9fXNlbGYuc2NhbkxpbmUobGluZSl9KX19LHBhcnNlVGVtcGxhdGVUZXh0OmZ1bmN0aW9uKCl7dmFyIHN0cj10aGlzLnRlbXBsYXRlVGV4dDt2YXIgcGF0PXRoaXMucmVnZXg7dmFyIHJlc3VsdD1wYXQuZXhlYyhzdHIpO3ZhciBhcnI9W107dmFyIGZpcnN0UG9zO3doaWxlKHJlc3VsdCl7Zmlyc3RQb3M9cmVzdWx0LmluZGV4O2lmKGZpcnN0UG9zIT09MCl7YXJyLnB1c2goc3RyLnN1YnN0cmluZygwLGZpcnN0UG9zKSk7c3RyPXN0ci5zbGljZShmaXJzdFBvcyl9YXJyLnB1c2gocmVzdWx0WzBdKTtzdHI9c3RyLnNsaWNlKHJlc3VsdFswXS5sZW5ndGgpO3Jlc3VsdD1wYXQuZXhlYyhzdHIpfWlmKHN0cil7YXJyLnB1c2goc3RyKX1yZXR1cm4gYXJyfSxfYWRkT3V0cHV0OmZ1bmN0aW9uKGxpbmUpe2lmKHRoaXMudHJ1bmNhdGUpe2xpbmU9bGluZS5yZXBsYWNlKC9eKD86XFxyXFxufFxccnxcXG4pLyxcIlwiKTt0aGlzLnRydW5jYXRlPWZhbHNlfWlmKCFsaW5lKXtyZXR1cm4gbGluZX1saW5lPWxpbmUucmVwbGFjZSgvXFxcXC9nLFwiXFxcXFxcXFxcIik7bGluZT1saW5lLnJlcGxhY2UoL1xcbi9nLFwiXFxcXG5cIik7bGluZT1saW5lLnJlcGxhY2UoL1xcci9nLFwiXFxcXHJcIik7bGluZT1saW5lLnJlcGxhY2UoL1wiL2csJ1xcXFxcIicpO3RoaXMuc291cmNlKz0nICAgIDsgX19hcHBlbmQoXCInK2xpbmUrJ1wiKScrXCJcXG5cIn0sc2NhbkxpbmU6ZnVuY3Rpb24obGluZSl7dmFyIHNlbGY9dGhpczt2YXIgZD10aGlzLm9wdHMuZGVsaW1pdGVyO3ZhciBvPXRoaXMub3B0cy5vcGVuRGVsaW1pdGVyO3ZhciBjPXRoaXMub3B0cy5jbG9zZURlbGltaXRlcjt2YXIgbmV3TGluZUNvdW50PTA7bmV3TGluZUNvdW50PWxpbmUuc3BsaXQoXCJcXG5cIikubGVuZ3RoLTE7c3dpdGNoKGxpbmUpe2Nhc2UgbytkOmNhc2UgbytkK1wiX1wiOnRoaXMubW9kZT1UZW1wbGF0ZS5tb2Rlcy5FVkFMO2JyZWFrO2Nhc2UgbytkK1wiPVwiOnRoaXMubW9kZT1UZW1wbGF0ZS5tb2Rlcy5FU0NBUEVEO2JyZWFrO2Nhc2UgbytkK1wiLVwiOnRoaXMubW9kZT1UZW1wbGF0ZS5tb2Rlcy5SQVc7YnJlYWs7Y2FzZSBvK2QrXCIjXCI6dGhpcy5tb2RlPVRlbXBsYXRlLm1vZGVzLkNPTU1FTlQ7YnJlYWs7Y2FzZSBvK2QrZDp0aGlzLm1vZGU9VGVtcGxhdGUubW9kZXMuTElURVJBTDt0aGlzLnNvdXJjZSs9JyAgICA7IF9fYXBwZW5kKFwiJytsaW5lLnJlcGxhY2UobytkK2QsbytkKSsnXCIpJytcIlxcblwiO2JyZWFrO2Nhc2UgZCtkK2M6dGhpcy5tb2RlPVRlbXBsYXRlLm1vZGVzLkxJVEVSQUw7dGhpcy5zb3VyY2UrPScgICAgOyBfX2FwcGVuZChcIicrbGluZS5yZXBsYWNlKGQrZCtjLGQrYykrJ1wiKScrXCJcXG5cIjticmVhaztjYXNlIGQrYzpjYXNlXCItXCIrZCtjOmNhc2VcIl9cIitkK2M6aWYodGhpcy5tb2RlPT1UZW1wbGF0ZS5tb2Rlcy5MSVRFUkFMKXt0aGlzLl9hZGRPdXRwdXQobGluZSl9dGhpcy5tb2RlPW51bGw7dGhpcy50cnVuY2F0ZT1saW5lLmluZGV4T2YoXCItXCIpPT09MHx8bGluZS5pbmRleE9mKFwiX1wiKT09PTA7YnJlYWs7ZGVmYXVsdDppZih0aGlzLm1vZGUpe3N3aXRjaCh0aGlzLm1vZGUpe2Nhc2UgVGVtcGxhdGUubW9kZXMuRVZBTDpjYXNlIFRlbXBsYXRlLm1vZGVzLkVTQ0FQRUQ6Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5SQVc6aWYobGluZS5sYXN0SW5kZXhPZihcIi8vXCIpPmxpbmUubGFzdEluZGV4T2YoXCJcXG5cIikpe2xpbmUrPVwiXFxuXCJ9fXN3aXRjaCh0aGlzLm1vZGUpe2Nhc2UgVGVtcGxhdGUubW9kZXMuRVZBTDp0aGlzLnNvdXJjZSs9XCIgICAgOyBcIitsaW5lK1wiXFxuXCI7YnJlYWs7Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5FU0NBUEVEOnRoaXMuc291cmNlKz1cIiAgICA7IF9fYXBwZW5kKGVzY2FwZUZuKFwiK3N0cmlwU2VtaShsaW5lKStcIikpXCIrXCJcXG5cIjticmVhaztjYXNlIFRlbXBsYXRlLm1vZGVzLlJBVzp0aGlzLnNvdXJjZSs9XCIgICAgOyBfX2FwcGVuZChcIitzdHJpcFNlbWkobGluZSkrXCIpXCIrXCJcXG5cIjticmVhaztjYXNlIFRlbXBsYXRlLm1vZGVzLkNPTU1FTlQ6YnJlYWs7Y2FzZSBUZW1wbGF0ZS5tb2Rlcy5MSVRFUkFMOnRoaXMuX2FkZE91dHB1dChsaW5lKTticmVha319ZWxzZXt0aGlzLl9hZGRPdXRwdXQobGluZSl9fWlmKHNlbGYub3B0cy5jb21waWxlRGVidWcmJm5ld0xpbmVDb3VudCl7dGhpcy5jdXJyZW50TGluZSs9bmV3TGluZUNvdW50O3RoaXMuc291cmNlKz1cIiAgICA7IF9fbGluZSA9IFwiK3RoaXMuY3VycmVudExpbmUrXCJcXG5cIn19fTtleHBvcnRzLmVzY2FwZVhNTD11dGlscy5lc2NhcGVYTUw7ZXhwb3J0cy5fX2V4cHJlc3M9ZXhwb3J0cy5yZW5kZXJGaWxlO2V4cG9ydHMuVkVSU0lPTj1fVkVSU0lPTl9TVFJJTkc7ZXhwb3J0cy5uYW1lPV9OQU1FO2lmKHR5cGVvZiB3aW5kb3chPVwidW5kZWZpbmVkXCIpe3dpbmRvdy5lanM9ZXhwb3J0c319LHtcIi4uL3BhY2thZ2UuanNvblwiOjYsXCIuL3V0aWxzXCI6MixmczozLHBhdGg6NH1dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1widXNlIHN0cmljdFwiO3ZhciByZWdFeHBDaGFycz0vW3xcXFxce30oKVtcXF1eJCsqPy5dL2c7dmFyIGhhc093blByb3BlcnR5PU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7dmFyIGhhc093bj1mdW5jdGlvbihvYmosa2V5KXtyZXR1cm4gaGFzT3duUHJvcGVydHkuYXBwbHkob2JqLFtrZXldKX07ZXhwb3J0cy5lc2NhcGVSZWdFeHBDaGFycz1mdW5jdGlvbihzdHJpbmcpe2lmKCFzdHJpbmcpe3JldHVyblwiXCJ9cmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVnRXhwQ2hhcnMsXCJcXFxcJCZcIil9O3ZhciBfRU5DT0RFX0hUTUxfUlVMRVM9e1wiJlwiOlwiJmFtcDtcIixcIjxcIjpcIiZsdDtcIixcIj5cIjpcIiZndDtcIiwnXCInOlwiJiMzNDtcIixcIidcIjpcIiYjMzk7XCJ9O3ZhciBfTUFUQ0hfSFRNTD0vWyY8PidcIl0vZztmdW5jdGlvbiBlbmNvZGVfY2hhcihjKXtyZXR1cm4gX0VOQ09ERV9IVE1MX1JVTEVTW2NdfHxjfXZhciBlc2NhcGVGdW5jU3RyPVwidmFyIF9FTkNPREVfSFRNTF9SVUxFUyA9IHtcXG5cIisnICAgICAgXCImXCI6IFwiJmFtcDtcIlxcbicrJyAgICAsIFwiPFwiOiBcIiZsdDtcIlxcbicrJyAgICAsIFwiPlwiOiBcIiZndDtcIlxcbicrJyAgICAsIFxcJ1wiXFwnOiBcIiYjMzQ7XCJcXG4nKycgICAgLCBcIlxcJ1wiOiBcIiYjMzk7XCJcXG4nK1wiICAgIH1cXG5cIitcIiAgLCBfTUFUQ0hfSFRNTCA9IC9bJjw+J1xcXCJdL2c7XFxuXCIrXCJmdW5jdGlvbiBlbmNvZGVfY2hhcihjKSB7XFxuXCIrXCIgIHJldHVybiBfRU5DT0RFX0hUTUxfUlVMRVNbY10gfHwgYztcXG5cIitcIn07XFxuXCI7ZXhwb3J0cy5lc2NhcGVYTUw9ZnVuY3Rpb24obWFya3VwKXtyZXR1cm4gbWFya3VwPT11bmRlZmluZWQ/XCJcIjpTdHJpbmcobWFya3VwKS5yZXBsYWNlKF9NQVRDSF9IVE1MLGVuY29kZV9jaGFyKX07ZnVuY3Rpb24gZXNjYXBlWE1MVG9TdHJpbmcoKXtyZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcykrXCI7XFxuXCIrZXNjYXBlRnVuY1N0cn10cnl7aWYodHlwZW9mIE9iamVjdC5kZWZpbmVQcm9wZXJ0eT09PVwiZnVuY3Rpb25cIil7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZXNjYXBlWE1MLFwidG9TdHJpbmdcIix7dmFsdWU6ZXNjYXBlWE1MVG9TdHJpbmd9KX1lbHNle2V4cG9ydHMuZXNjYXBlWE1MLnRvU3RyaW5nPWVzY2FwZVhNTFRvU3RyaW5nfX1jYXRjaChlcnIpe2NvbnNvbGUud2FybihcIlVuYWJsZSB0byBzZXQgZXNjYXBlWE1MLnRvU3RyaW5nIChpcyB0aGUgRnVuY3Rpb24gcHJvdG90eXBlIGZyb3plbj8pXCIpfWV4cG9ydHMuc2hhbGxvd0NvcHk9ZnVuY3Rpb24odG8sZnJvbSl7ZnJvbT1mcm9tfHx7fTtpZih0byE9PW51bGwmJnRvIT09dW5kZWZpbmVkKXtmb3IodmFyIHAgaW4gZnJvbSl7aWYoIWhhc093bihmcm9tLHApKXtjb250aW51ZX1pZihwPT09XCJfX3Byb3RvX19cInx8cD09PVwiY29uc3RydWN0b3JcIil7Y29udGludWV9dG9bcF09ZnJvbVtwXX19cmV0dXJuIHRvfTtleHBvcnRzLnNoYWxsb3dDb3B5RnJvbUxpc3Q9ZnVuY3Rpb24odG8sZnJvbSxsaXN0KXtsaXN0PWxpc3R8fFtdO2Zyb209ZnJvbXx8e307aWYodG8hPT1udWxsJiZ0byE9PXVuZGVmaW5lZCl7Zm9yKHZhciBpPTA7aTxsaXN0Lmxlbmd0aDtpKyspe3ZhciBwPWxpc3RbaV07aWYodHlwZW9mIGZyb21bcF0hPVwidW5kZWZpbmVkXCIpe2lmKCFoYXNPd24oZnJvbSxwKSl7Y29udGludWV9aWYocD09PVwiX19wcm90b19fXCJ8fHA9PT1cImNvbnN0cnVjdG9yXCIpe2NvbnRpbnVlfXRvW3BdPWZyb21bcF19fX1yZXR1cm4gdG99O2V4cG9ydHMuY2FjaGU9e19kYXRhOnt9LHNldDpmdW5jdGlvbihrZXksdmFsKXt0aGlzLl9kYXRhW2tleV09dmFsfSxnZXQ6ZnVuY3Rpb24oa2V5KXtyZXR1cm4gdGhpcy5fZGF0YVtrZXldfSxyZW1vdmU6ZnVuY3Rpb24oa2V5KXtkZWxldGUgdGhpcy5fZGF0YVtrZXldfSxyZXNldDpmdW5jdGlvbigpe3RoaXMuX2RhdGE9e319fTtleHBvcnRzLmh5cGhlblRvQ2FtZWw9ZnVuY3Rpb24oc3RyKXtyZXR1cm4gc3RyLnJlcGxhY2UoLy1bYS16XS9nLGZ1bmN0aW9uKG1hdGNoKXtyZXR1cm4gbWF0Y2hbMV0udG9VcHBlckNhc2UoKX0pfTtleHBvcnRzLmNyZWF0ZU51bGxQcm90b09ialdoZXJlUG9zc2libGU9ZnVuY3Rpb24oKXtpZih0eXBlb2YgT2JqZWN0LmNyZWF0ZT09XCJmdW5jdGlvblwiKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKX19aWYoISh7X19wcm90b19fOm51bGx9aW5zdGFuY2VvZiBPYmplY3QpKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm57X19wcm90b19fOm51bGx9fX1yZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm57fX19KCl9LHt9XSwzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt9LHt9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsoZnVuY3Rpb24ocHJvY2Vzcyl7ZnVuY3Rpb24gbm9ybWFsaXplQXJyYXkocGFydHMsYWxsb3dBYm92ZVJvb3Qpe3ZhciB1cD0wO2Zvcih2YXIgaT1wYXJ0cy5sZW5ndGgtMTtpPj0wO2ktLSl7dmFyIGxhc3Q9cGFydHNbaV07aWYobGFzdD09PVwiLlwiKXtwYXJ0cy5zcGxpY2UoaSwxKX1lbHNlIGlmKGxhc3Q9PT1cIi4uXCIpe3BhcnRzLnNwbGljZShpLDEpO3VwKyt9ZWxzZSBpZih1cCl7cGFydHMuc3BsaWNlKGksMSk7dXAtLX19aWYoYWxsb3dBYm92ZVJvb3Qpe2Zvcig7dXAtLTt1cCl7cGFydHMudW5zaGlmdChcIi4uXCIpfX1yZXR1cm4gcGFydHN9ZXhwb3J0cy5yZXNvbHZlPWZ1bmN0aW9uKCl7dmFyIHJlc29sdmVkUGF0aD1cIlwiLHJlc29sdmVkQWJzb2x1dGU9ZmFsc2U7Zm9yKHZhciBpPWFyZ3VtZW50cy5sZW5ndGgtMTtpPj0tMSYmIXJlc29sdmVkQWJzb2x1dGU7aS0tKXt2YXIgcGF0aD1pPj0wP2FyZ3VtZW50c1tpXTpwcm9jZXNzLmN3ZCgpO2lmKHR5cGVvZiBwYXRoIT09XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzXCIpfWVsc2UgaWYoIXBhdGgpe2NvbnRpbnVlfXJlc29sdmVkUGF0aD1wYXRoK1wiL1wiK3Jlc29sdmVkUGF0aDtyZXNvbHZlZEFic29sdXRlPXBhdGguY2hhckF0KDApPT09XCIvXCJ9cmVzb2x2ZWRQYXRoPW5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoXCIvXCIpLGZ1bmN0aW9uKHApe3JldHVybiEhcH0pLCFyZXNvbHZlZEFic29sdXRlKS5qb2luKFwiL1wiKTtyZXR1cm4ocmVzb2x2ZWRBYnNvbHV0ZT9cIi9cIjpcIlwiKStyZXNvbHZlZFBhdGh8fFwiLlwifTtleHBvcnRzLm5vcm1hbGl6ZT1mdW5jdGlvbihwYXRoKXt2YXIgaXNBYnNvbHV0ZT1leHBvcnRzLmlzQWJzb2x1dGUocGF0aCksdHJhaWxpbmdTbGFzaD1zdWJzdHIocGF0aCwtMSk9PT1cIi9cIjtwYXRoPW5vcm1hbGl6ZUFycmF5KGZpbHRlcihwYXRoLnNwbGl0KFwiL1wiKSxmdW5jdGlvbihwKXtyZXR1cm4hIXB9KSwhaXNBYnNvbHV0ZSkuam9pbihcIi9cIik7aWYoIXBhdGgmJiFpc0Fic29sdXRlKXtwYXRoPVwiLlwifWlmKHBhdGgmJnRyYWlsaW5nU2xhc2gpe3BhdGgrPVwiL1wifXJldHVybihpc0Fic29sdXRlP1wiL1wiOlwiXCIpK3BhdGh9O2V4cG9ydHMuaXNBYnNvbHV0ZT1mdW5jdGlvbihwYXRoKXtyZXR1cm4gcGF0aC5jaGFyQXQoMCk9PT1cIi9cIn07ZXhwb3J0cy5qb2luPWZ1bmN0aW9uKCl7dmFyIHBhdGhzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtyZXR1cm4gZXhwb3J0cy5ub3JtYWxpemUoZmlsdGVyKHBhdGhzLGZ1bmN0aW9uKHAsaW5kZXgpe2lmKHR5cGVvZiBwIT09XCJzdHJpbmdcIil7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkFyZ3VtZW50cyB0byBwYXRoLmpvaW4gbXVzdCBiZSBzdHJpbmdzXCIpfXJldHVybiBwfSkuam9pbihcIi9cIikpfTtleHBvcnRzLnJlbGF0aXZlPWZ1bmN0aW9uKGZyb20sdG8pe2Zyb209ZXhwb3J0cy5yZXNvbHZlKGZyb20pLnN1YnN0cigxKTt0bz1leHBvcnRzLnJlc29sdmUodG8pLnN1YnN0cigxKTtmdW5jdGlvbiB0cmltKGFycil7dmFyIHN0YXJ0PTA7Zm9yKDtzdGFydDxhcnIubGVuZ3RoO3N0YXJ0Kyspe2lmKGFycltzdGFydF0hPT1cIlwiKWJyZWFrfXZhciBlbmQ9YXJyLmxlbmd0aC0xO2Zvcig7ZW5kPj0wO2VuZC0tKXtpZihhcnJbZW5kXSE9PVwiXCIpYnJlYWt9aWYoc3RhcnQ+ZW5kKXJldHVybltdO3JldHVybiBhcnIuc2xpY2Uoc3RhcnQsZW5kLXN0YXJ0KzEpfXZhciBmcm9tUGFydHM9dHJpbShmcm9tLnNwbGl0KFwiL1wiKSk7dmFyIHRvUGFydHM9dHJpbSh0by5zcGxpdChcIi9cIikpO3ZhciBsZW5ndGg9TWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCx0b1BhcnRzLmxlbmd0aCk7dmFyIHNhbWVQYXJ0c0xlbmd0aD1sZW5ndGg7Zm9yKHZhciBpPTA7aTxsZW5ndGg7aSsrKXtpZihmcm9tUGFydHNbaV0hPT10b1BhcnRzW2ldKXtzYW1lUGFydHNMZW5ndGg9aTticmVha319dmFyIG91dHB1dFBhcnRzPVtdO2Zvcih2YXIgaT1zYW1lUGFydHNMZW5ndGg7aTxmcm9tUGFydHMubGVuZ3RoO2krKyl7b3V0cHV0UGFydHMucHVzaChcIi4uXCIpfW91dHB1dFBhcnRzPW91dHB1dFBhcnRzLmNvbmNhdCh0b1BhcnRzLnNsaWNlKHNhbWVQYXJ0c0xlbmd0aCkpO3JldHVybiBvdXRwdXRQYXJ0cy5qb2luKFwiL1wiKX07ZXhwb3J0cy5zZXA9XCIvXCI7ZXhwb3J0cy5kZWxpbWl0ZXI9XCI6XCI7ZXhwb3J0cy5kaXJuYW1lPWZ1bmN0aW9uKHBhdGgpe2lmKHR5cGVvZiBwYXRoIT09XCJzdHJpbmdcIilwYXRoPXBhdGgrXCJcIjtpZihwYXRoLmxlbmd0aD09PTApcmV0dXJuXCIuXCI7dmFyIGNvZGU9cGF0aC5jaGFyQ29kZUF0KDApO3ZhciBoYXNSb290PWNvZGU9PT00Nzt2YXIgZW5kPS0xO3ZhciBtYXRjaGVkU2xhc2g9dHJ1ZTtmb3IodmFyIGk9cGF0aC5sZW5ndGgtMTtpPj0xOy0taSl7Y29kZT1wYXRoLmNoYXJDb2RlQXQoaSk7aWYoY29kZT09PTQ3KXtpZighbWF0Y2hlZFNsYXNoKXtlbmQ9aTticmVha319ZWxzZXttYXRjaGVkU2xhc2g9ZmFsc2V9fWlmKGVuZD09PS0xKXJldHVybiBoYXNSb290P1wiL1wiOlwiLlwiO2lmKGhhc1Jvb3QmJmVuZD09PTEpe3JldHVyblwiL1wifXJldHVybiBwYXRoLnNsaWNlKDAsZW5kKX07ZnVuY3Rpb24gYmFzZW5hbWUocGF0aCl7aWYodHlwZW9mIHBhdGghPT1cInN0cmluZ1wiKXBhdGg9cGF0aCtcIlwiO3ZhciBzdGFydD0wO3ZhciBlbmQ9LTE7dmFyIG1hdGNoZWRTbGFzaD10cnVlO3ZhciBpO2ZvcihpPXBhdGgubGVuZ3RoLTE7aT49MDstLWkpe2lmKHBhdGguY2hhckNvZGVBdChpKT09PTQ3KXtpZighbWF0Y2hlZFNsYXNoKXtzdGFydD1pKzE7YnJlYWt9fWVsc2UgaWYoZW5kPT09LTEpe21hdGNoZWRTbGFzaD1mYWxzZTtlbmQ9aSsxfX1pZihlbmQ9PT0tMSlyZXR1cm5cIlwiO3JldHVybiBwYXRoLnNsaWNlKHN0YXJ0LGVuZCl9ZXhwb3J0cy5iYXNlbmFtZT1mdW5jdGlvbihwYXRoLGV4dCl7dmFyIGY9YmFzZW5hbWUocGF0aCk7aWYoZXh0JiZmLnN1YnN0cigtMSpleHQubGVuZ3RoKT09PWV4dCl7Zj1mLnN1YnN0cigwLGYubGVuZ3RoLWV4dC5sZW5ndGgpfXJldHVybiBmfTtleHBvcnRzLmV4dG5hbWU9ZnVuY3Rpb24ocGF0aCl7aWYodHlwZW9mIHBhdGghPT1cInN0cmluZ1wiKXBhdGg9cGF0aCtcIlwiO3ZhciBzdGFydERvdD0tMTt2YXIgc3RhcnRQYXJ0PTA7dmFyIGVuZD0tMTt2YXIgbWF0Y2hlZFNsYXNoPXRydWU7dmFyIHByZURvdFN0YXRlPTA7Zm9yKHZhciBpPXBhdGgubGVuZ3RoLTE7aT49MDstLWkpe3ZhciBjb2RlPXBhdGguY2hhckNvZGVBdChpKTtpZihjb2RlPT09NDcpe2lmKCFtYXRjaGVkU2xhc2gpe3N0YXJ0UGFydD1pKzE7YnJlYWt9Y29udGludWV9aWYoZW5kPT09LTEpe21hdGNoZWRTbGFzaD1mYWxzZTtlbmQ9aSsxfWlmKGNvZGU9PT00Nil7aWYoc3RhcnREb3Q9PT0tMSlzdGFydERvdD1pO2Vsc2UgaWYocHJlRG90U3RhdGUhPT0xKXByZURvdFN0YXRlPTF9ZWxzZSBpZihzdGFydERvdCE9PS0xKXtwcmVEb3RTdGF0ZT0tMX19aWYoc3RhcnREb3Q9PT0tMXx8ZW5kPT09LTF8fHByZURvdFN0YXRlPT09MHx8cHJlRG90U3RhdGU9PT0xJiZzdGFydERvdD09PWVuZC0xJiZzdGFydERvdD09PXN0YXJ0UGFydCsxKXtyZXR1cm5cIlwifXJldHVybiBwYXRoLnNsaWNlKHN0YXJ0RG90LGVuZCl9O2Z1bmN0aW9uIGZpbHRlcih4cyxmKXtpZih4cy5maWx0ZXIpcmV0dXJuIHhzLmZpbHRlcihmKTt2YXIgcmVzPVtdO2Zvcih2YXIgaT0wO2k8eHMubGVuZ3RoO2krKyl7aWYoZih4c1tpXSxpLHhzKSlyZXMucHVzaCh4c1tpXSl9cmV0dXJuIHJlc312YXIgc3Vic3RyPVwiYWJcIi5zdWJzdHIoLTEpPT09XCJiXCI/ZnVuY3Rpb24oc3RyLHN0YXJ0LGxlbil7cmV0dXJuIHN0ci5zdWJzdHIoc3RhcnQsbGVuKX06ZnVuY3Rpb24oc3RyLHN0YXJ0LGxlbil7aWYoc3RhcnQ8MClzdGFydD1zdHIubGVuZ3RoK3N0YXJ0O3JldHVybiBzdHIuc3Vic3RyKHN0YXJ0LGxlbil9fSkuY2FsbCh0aGlzLHJlcXVpcmUoXCJfcHJvY2Vzc1wiKSl9LHtfcHJvY2Vzczo1fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIHByb2Nlc3M9bW9kdWxlLmV4cG9ydHM9e307dmFyIGNhY2hlZFNldFRpbWVvdXQ7dmFyIGNhY2hlZENsZWFyVGltZW91dDtmdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0KCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfShmdW5jdGlvbigpe3RyeXtpZih0eXBlb2Ygc2V0VGltZW91dD09PVwiZnVuY3Rpb25cIil7Y2FjaGVkU2V0VGltZW91dD1zZXRUaW1lb3V0fWVsc2V7Y2FjaGVkU2V0VGltZW91dD1kZWZhdWx0U2V0VGltb3V0fX1jYXRjaChlKXtjYWNoZWRTZXRUaW1lb3V0PWRlZmF1bHRTZXRUaW1vdXR9dHJ5e2lmKHR5cGVvZiBjbGVhclRpbWVvdXQ9PT1cImZ1bmN0aW9uXCIpe2NhY2hlZENsZWFyVGltZW91dD1jbGVhclRpbWVvdXR9ZWxzZXtjYWNoZWRDbGVhclRpbWVvdXQ9ZGVmYXVsdENsZWFyVGltZW91dH19Y2F0Y2goZSl7Y2FjaGVkQ2xlYXJUaW1lb3V0PWRlZmF1bHRDbGVhclRpbWVvdXR9fSkoKTtmdW5jdGlvbiBydW5UaW1lb3V0KGZ1bil7aWYoY2FjaGVkU2V0VGltZW91dD09PXNldFRpbWVvdXQpe3JldHVybiBzZXRUaW1lb3V0KGZ1biwwKX1pZigoY2FjaGVkU2V0VGltZW91dD09PWRlZmF1bHRTZXRUaW1vdXR8fCFjYWNoZWRTZXRUaW1lb3V0KSYmc2V0VGltZW91dCl7Y2FjaGVkU2V0VGltZW91dD1zZXRUaW1lb3V0O3JldHVybiBzZXRUaW1lb3V0KGZ1biwwKX10cnl7cmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLDApfWNhdGNoKGUpe3RyeXtyZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsZnVuLDApfWNhdGNoKGUpe3JldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcyxmdW4sMCl9fX1mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKXtpZihjYWNoZWRDbGVhclRpbWVvdXQ9PT1jbGVhclRpbWVvdXQpe3JldHVybiBjbGVhclRpbWVvdXQobWFya2VyKX1pZigoY2FjaGVkQ2xlYXJUaW1lb3V0PT09ZGVmYXVsdENsZWFyVGltZW91dHx8IWNhY2hlZENsZWFyVGltZW91dCkmJmNsZWFyVGltZW91dCl7Y2FjaGVkQ2xlYXJUaW1lb3V0PWNsZWFyVGltZW91dDtyZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcil9dHJ5e3JldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKX1jYXRjaChlKXt0cnl7cmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsbWFya2VyKX1jYXRjaChlKXtyZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcyxtYXJrZXIpfX19dmFyIHF1ZXVlPVtdO3ZhciBkcmFpbmluZz1mYWxzZTt2YXIgY3VycmVudFF1ZXVlO3ZhciBxdWV1ZUluZGV4PS0xO2Z1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpe2lmKCFkcmFpbmluZ3x8IWN1cnJlbnRRdWV1ZSl7cmV0dXJufWRyYWluaW5nPWZhbHNlO2lmKGN1cnJlbnRRdWV1ZS5sZW5ndGgpe3F1ZXVlPWN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpfWVsc2V7cXVldWVJbmRleD0tMX1pZihxdWV1ZS5sZW5ndGgpe2RyYWluUXVldWUoKX19ZnVuY3Rpb24gZHJhaW5RdWV1ZSgpe2lmKGRyYWluaW5nKXtyZXR1cm59dmFyIHRpbWVvdXQ9cnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO2RyYWluaW5nPXRydWU7dmFyIGxlbj1xdWV1ZS5sZW5ndGg7d2hpbGUobGVuKXtjdXJyZW50UXVldWU9cXVldWU7cXVldWU9W107d2hpbGUoKytxdWV1ZUluZGV4PGxlbil7aWYoY3VycmVudFF1ZXVlKXtjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCl9fXF1ZXVlSW5kZXg9LTE7bGVuPXF1ZXVlLmxlbmd0aH1jdXJyZW50UXVldWU9bnVsbDtkcmFpbmluZz1mYWxzZTtydW5DbGVhclRpbWVvdXQodGltZW91dCl9cHJvY2Vzcy5uZXh0VGljaz1mdW5jdGlvbihmdW4pe3ZhciBhcmdzPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSl7Zm9yKHZhciBpPTE7aTxhcmd1bWVudHMubGVuZ3RoO2krKyl7YXJnc1tpLTFdPWFyZ3VtZW50c1tpXX19cXVldWUucHVzaChuZXcgSXRlbShmdW4sYXJncykpO2lmKHF1ZXVlLmxlbmd0aD09PTEmJiFkcmFpbmluZyl7cnVuVGltZW91dChkcmFpblF1ZXVlKX19O2Z1bmN0aW9uIEl0ZW0oZnVuLGFycmF5KXt0aGlzLmZ1bj1mdW47dGhpcy5hcnJheT1hcnJheX1JdGVtLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfTtwcm9jZXNzLnRpdGxlPVwiYnJvd3NlclwiO3Byb2Nlc3MuYnJvd3Nlcj10cnVlO3Byb2Nlc3MuZW52PXt9O3Byb2Nlc3MuYXJndj1bXTtwcm9jZXNzLnZlcnNpb249XCJcIjtwcm9jZXNzLnZlcnNpb25zPXt9O2Z1bmN0aW9uIG5vb3AoKXt9cHJvY2Vzcy5vbj1ub29wO3Byb2Nlc3MuYWRkTGlzdGVuZXI9bm9vcDtwcm9jZXNzLm9uY2U9bm9vcDtwcm9jZXNzLm9mZj1ub29wO3Byb2Nlc3MucmVtb3ZlTGlzdGVuZXI9bm9vcDtwcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycz1ub29wO3Byb2Nlc3MuZW1pdD1ub29wO3Byb2Nlc3MucHJlcGVuZExpc3RlbmVyPW5vb3A7cHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyPW5vb3A7cHJvY2Vzcy5saXN0ZW5lcnM9ZnVuY3Rpb24obmFtZSl7cmV0dXJuW119O3Byb2Nlc3MuYmluZGluZz1mdW5jdGlvbihuYW1lKXt0aHJvdyBuZXcgRXJyb3IoXCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZFwiKX07cHJvY2Vzcy5jd2Q9ZnVuY3Rpb24oKXtyZXR1cm5cIi9cIn07cHJvY2Vzcy5jaGRpcj1mdW5jdGlvbihkaXIpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX07cHJvY2Vzcy51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX0se31dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPXtuYW1lOlwiZWpzXCIsZGVzY3JpcHRpb246XCJFbWJlZGRlZCBKYXZhU2NyaXB0IHRlbXBsYXRlc1wiLGtleXdvcmRzOltcInRlbXBsYXRlXCIsXCJlbmdpbmVcIixcImVqc1wiXSx2ZXJzaW9uOlwiMy4xLjlcIixhdXRob3I6XCJNYXR0aGV3IEVlcm5pc3NlIDxtZGVAZmxlZWdpeC5vcmc+IChodHRwOi8vZmxlZWdpeC5vcmcpXCIsbGljZW5zZTpcIkFwYWNoZS0yLjBcIixiaW46e2VqczpcIi4vYmluL2NsaS5qc1wifSxtYWluOlwiLi9saWIvZWpzLmpzXCIsanNkZWxpdnI6XCJlanMubWluLmpzXCIsdW5wa2c6XCJlanMubWluLmpzXCIscmVwb3NpdG9yeTp7dHlwZTpcImdpdFwiLHVybDpcImdpdDovL2dpdGh1Yi5jb20vbWRlL2Vqcy5naXRcIn0sYnVnczpcImh0dHBzOi8vZ2l0aHViLmNvbS9tZGUvZWpzL2lzc3Vlc1wiLGhvbWVwYWdlOlwiaHR0cHM6Ly9naXRodWIuY29tL21kZS9lanNcIixkZXBlbmRlbmNpZXM6e2pha2U6XCJeMTAuOC41XCJ9LGRldkRlcGVuZGVuY2llczp7YnJvd3NlcmlmeTpcIl4xNi41LjFcIixlc2xpbnQ6XCJeNi44LjBcIixcImdpdC1kaXJlY3RvcnktZGVwbG95XCI6XCJeMS41LjFcIixqc2RvYzpcIl40LjAuMlwiLFwibHJ1LWNhY2hlXCI6XCJeNC4wLjFcIixtb2NoYTpcIl4xMC4yLjBcIixcInVnbGlmeS1qc1wiOlwiXjMuMy4xNlwifSxlbmdpbmVzOntub2RlOlwiPj0wLjEwLjBcIn0sc2NyaXB0czp7dGVzdDpcIm1vY2hhIC11IHRkZFwifX19LHt9XX0se30sWzFdKSgxKX0pO1xuIiwgImltcG9ydCBPYnNpZGlhbiBmcm9tIFwib2JzaWRpYW5cIjtcbmNvbnN0IHtcbiAgYWRkSWNvbixcbiAgS2V5bWFwLFxuICBNYXJrZG93blJlbmRlcmVyLFxuICBOb3RpY2UsXG4gIFBsdWdpbixcbiAgUGx1Z2luU2V0dGluZ1RhYixcbiAgcmVxdWVzdCxcbiAgcmVxdWVzdFVybCxcbiAgU2V0dGluZyxcbiAgVEFic3RyYWN0RmlsZSxcbiAgVEZpbGUsXG59ID0gT2JzaWRpYW47XG5pbXBvcnQgeyBTbWFydFRlbXBsYXRlcyB9IGZyb20gXCJzbWFydC10ZW1wbGF0ZXNcIjtcbmltcG9ydCB7IE1hcmtkb3duQWRhcHRlciB9IGZyb20gXCJzbWFydC10ZW1wbGF0ZXMvYWRhcHRlcnMvbWFya2Rvd24uanNcIjtcbmltcG9ydCB7IFNtYXJ0Q2hhdE1vZGVsIH0gZnJvbSBcInNtYXJ0LWNoYXQtbW9kZWxcIjtcbmltcG9ydCB2aWV3cyBmcm9tIFwiLi9kaXN0L3ZpZXdzLmpzb25cIjtcbmltcG9ydCBkZWZhdWx0X3RlbXBsYXRlcyBmcm9tIFwiLi9kaXN0L3RlbXBsYXRlcy5qc29uXCI7XG5pbXBvcnQgZGVmYXVsdF92YXJfcHJvbXB0cyBmcm9tIFwiLi90ZW1wbGF0ZXMvdmFyX3Byb21wdHMuanNvblwiO1xuaW1wb3J0IHsgU21hcnRFbnYgfSBmcm9tIFwic21hcnQtZW52aXJvbm1lbnQvc21hcnRfZW52LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNtYXJ0VGVtcGxhdGVzUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgYXN5bmMgb25sb2FkKCkgeyB0aGlzLmFwcC53b3Jrc3BhY2Uub25MYXlvdXRSZWFkeSh0aGlzLmluaXRpYWxpemUuYmluZCh0aGlzKSk7IH0gLy8gaW5pdGlhbGl6ZSB3aGVuIGxheW91dCBpcyByZWFkeVxuXG4gIHN0YXRpYyBnZXQgZGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9wZW5haToge30sXG4gICAgICBjaGF0X21vZGVsX3BsYXRmb3JtX2tleTogJ29wZW5haScsXG4gICAgICB0ZW1wbGF0ZXNfZm9sZGVyOiBcInNtYXJ0LXRlbXBsYXRlc1wiLFxuICAgICAgdmFyX3Byb21wdHM6IHtcbiAgICAgICAgJ3N1bW1hcnknOiB7cHJvbXB0OiAnQSBicmllZiBzdW1tYXJ5IHBhcmFncmFwaC4nfSxcbiAgICAgICAgJ25vdGVzJzoge3Byb21wdDogJ0NvbmNpc2Ugbm90ZXMgaW4gbGlzdCBmb3JtYXQuJ30sXG4gICAgICAgICdtZXJtYWlkJzoge3Byb21wdDogJ0EgbWVybWFpZCBjaGFydCByZXByZXNlbnRpbmcgdGhlIGNvbnRlbnQuIEV4LiBncmFwaCBURFxcbkEgLS0+IEJcXG5CIC0tPiBDJ31cbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuICBhc3luYyBpbml0aWFsaXplKCkge1xuICAgIHRoaXMub2JzaWRpYW4gPSBPYnNpZGlhbjtcbiAgICBhd2FpdCB0aGlzLmxvYWRfc2V0dGluZ3MoKTtcbiAgICBhd2FpdCB0aGlzLmVuc3VyZV90ZW1wbGF0ZXNfZm9sZGVyKCk7XG4gICAgYXdhaXQgdGhpcy5pbmNsdWRlX2RlZmF1bHRfdGVtcGxhdGVzKCk7XG4gICAgU21hcnRFbnYuY3JlYXRlKHRoaXMsIHtcbiAgICAgIGdsb2JhbF9yZWY6IHdpbmRvdyxcbiAgICB9KTtcbiAgICBhd2FpdCB0aGlzLmxvYWRfc21hcnRfdGVtcGxhdGVzKCk7XG4gICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTbWFydFRlbXBsYXRlc1NldHRpbmdzVGFiKHRoaXMuYXBwLCB0aGlzKSk7XG4gICAgdGhpcy5hZGRfY29tbWFuZHMoKTtcbiAgfVxuICBhc3luYyBsb2FkX3NtYXJ0X3RlbXBsYXRlcygpIHtcbiAgICBhd2FpdCBTbWFydFRlbXBsYXRlcy5sb2FkKHRoaXMuZW52LCB7XG4gICAgICByZXF1ZXN0X2FkYXB0ZXI6IHJlcXVlc3RVcmwsIC8vIHVzZSBvYnNpZGlhbidzIHJlcXVlc3RVcmwgZm9yIHJlcXVlc3RzXG4gICAgICByZWFkX2FkYXB0ZXI6IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIucmVhZC5iaW5kKHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIpLFxuICAgICAgZmlsZV90eXBlX2FkYXB0ZXJzOiBbXG4gICAgICAgIE1hcmtkb3duQWRhcHRlcixcbiAgICAgIF0sXG4gICAgfSk7XG4gICAgYXdhaXQgdGhpcy5nZXRfdmFyX3Byb21wdHNfc2V0dGluZ3MoKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWRfc2V0dGluZ3MoKSB7XG4gICAgdGhpcy5zZXR0aW5ncyA9IHtcbiAgICAgIC4uLnRoaXMuY29uc3RydWN0b3IuZGVmYXVsdHMsXG4gICAgICAuLi4oYXdhaXQgdGhpcy5sb2FkRGF0YSgpKSxcbiAgICB9O1xuICAgIC8vIGxvYWQgdmFyIHByb21wdHMgZnJvbSB0ZW1wbGF0ZXMgZm9sZGVyIChwcmV2ZW50cyBwcm9tcHRzIGZyb20gYmVpbmcgbG9zdCB3aGVuIHVuaW5zdGFsbGluZyBwbHVnaW4pXG4gICAgdGhpcy5zZXR0aW5ncyA9IHtcbiAgICAgIC4uLnRoaXMuc2V0dGluZ3MsXG4gICAgICAuLi4oYXdhaXQgdGhpcy5sb2FkX3Zhcl9wcm9tcHRzKCkpLFxuICAgIH07XG4gIH1cbiAgYXN5bmMgbG9hZF92YXJfcHJvbXB0cygpIHtcbiAgICBjb25zdCB2YXJfcHJvbXB0c19wYXRoID0gYCR7dGhpcy5zZXR0aW5ncy50ZW1wbGF0ZXNfZm9sZGVyfS92YXJfcHJvbXB0cy5qc29uYDtcbiAgICB0cnkge1xuICAgICAgaWYgKGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuZXhpc3RzKHZhcl9wcm9tcHRzX3BhdGgpKSB7XG4gICAgICAgIGNvbnN0IHZhcl9wcm9tcHRzX2ZpbGUgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLnJlYWQodmFyX3Byb21wdHNfcGF0aCk7XG4gICAgICAgIGlmICh2YXJfcHJvbXB0c19maWxlKSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodmFyX3Byb21wdHNfZmlsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgbG9hZGluZyB2YXJfcHJvbXB0cyBmcm9tICR7dmFyX3Byb21wdHNfcGF0aH06YCwgZXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4ge307XG4gIH1cbiAgYXN5bmMgc2F2ZV9zZXR0aW5ncyhyZXJlbmRlcj1mYWxzZSkge1xuICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7IC8vIE9ic2lkaWFuIEFQSS0+c2F2ZURhdGFcbiAgICAvLyBzYXZlIHZhcl9wcm9tcHRzIHRvIHNtYXJ0IHRlbXBsYXRlcyBmb2xkZXIgaW4gdmFyX3Byb21wdHMuanNvblxuICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIud3JpdGUoXG4gICAgICBgJHt0aGlzLnNldHRpbmdzLnRlbXBsYXRlc19mb2xkZXJ9L3Zhcl9wcm9tcHRzLmpzb25gLFxuICAgICAgSlNPTi5zdHJpbmdpZnkoe3Zhcl9wcm9tcHRzOiB0aGlzLnNldHRpbmdzLnZhcl9wcm9tcHRzfSwgbnVsbCwgMiksXG4gICAgKTtcbiAgICBhd2FpdCB0aGlzLmxvYWRfc2V0dGluZ3MoKTsgLy8gcmUtbG9hZCBzZXR0aW5ncyBpbnRvIG1lbW9yeVxuICB9XG4gIGdldF90ZW1wbGF0ZXNfZnJvbV9mb2xkZXIodGVtcGxhdGVzX2ZvbGRlcl9wYXRoKSB7XG4gICAgY29uc3QgdGVtcGxhdGVzID0gW107XG4gICAgY29uc3QgZm9sZGVyID0gdGhpcy5hcHAudmF1bHQuZ2V0Rm9sZGVyQnlQYXRoKHRlbXBsYXRlc19mb2xkZXJfcGF0aCk7XG4gICAgaWYoIWZvbGRlcikgcmV0dXJuIHRlbXBsYXRlcztcbiAgICBmb2xkZXIuY2hpbGRyZW5cbiAgICAgIC5mb3JFYWNoKGZpbGVfb3JfZm9sZGVyID0+IHtcbiAgICAgICAgaWYoZmlsZV9vcl9mb2xkZXIgaW5zdGFuY2VvZiB0aGlzLm9ic2lkaWFuLlRGaWxlKSB7XG4gICAgICAgICAgdGhpcy5lbnYuc21hcnRfdGVtcGxhdGVzLmFkZF90ZW1wbGF0ZShmaWxlX29yX2ZvbGRlci5wYXRoKTtcbiAgICAgICAgICB0ZW1wbGF0ZXMucHVzaChmaWxlX29yX2ZvbGRlcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaGFuZGxlIHN1YmZvbGRlcnNcbiAgICAgICAgZWxzZSBpZihmaWxlX29yX2ZvbGRlciBpbnN0YW5jZW9mIHRoaXMub2JzaWRpYW4uVEZvbGRlcikge1xuICAgICAgICAgIHRlbXBsYXRlcy5wdXNoKC4uLnRoaXMuZ2V0X3RlbXBsYXRlc19mcm9tX2ZvbGRlcihmaWxlX29yX2ZvbGRlci5wYXRoKSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgO1xuICAgIHJldHVybiB0ZW1wbGF0ZXM7XG4gIH1cbiAgYXN5bmMgZ2V0X3Zhcl9wcm9tcHRzX3NldHRpbmdzKCkge1xuICAgIHRoaXMuYWN0aXZlX3RlbXBsYXRlX3ZhcnMgPSBbXTtcbiAgICBjb25zdCB0ZW1wbGF0ZXMgPSB0aGlzLmdldF90ZW1wbGF0ZXNfZnJvbV9mb2xkZXIodGhpcy5zZXR0aW5ncy50ZW1wbGF0ZXNfZm9sZGVyKTtcbiAgICBmb3IoY29uc3QgdGVtcGxhdGUgb2YgdGVtcGxhdGVzKSB7XG4gICAgICBjb25zdCB0ZW1wbGF0ZV92YXJzID0gYXdhaXQgdGhpcy5lbnYuc21hcnRfdGVtcGxhdGVzLmdldF92YXJpYWJsZXModGVtcGxhdGUucGF0aCk7XG4gICAgICB0ZW1wbGF0ZV92YXJzXG4gICAgICAgIC5maWx0ZXIoKHtpbmxpbmV9KSA9PiAhaW5saW5lKVxuICAgICAgICAuZm9yRWFjaCgoe25hbWUsIHByb21wdH0pID0+IHtcbiAgICAgICAgICBpZighdGhpcy5zZXR0aW5ncy52YXJfcHJvbXB0cykgdGhpcy5zZXR0aW5ncy52YXJfcHJvbXB0cyA9IHt9O1xuICAgICAgICAgIC8vIGlmIHByb21wdCBpcyBub3QgaW4gc2V0dGluZ3MsIGFkZCBpdFxuICAgICAgICAgIGlmKCF0aGlzLnNldHRpbmdzLnZhcl9wcm9tcHRzW25hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLnZhcl9wcm9tcHRzW25hbWVdID0ge3Byb21wdDogcHJvbXB0fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5hY3RpdmVfdGVtcGxhdGVfdmFycy5wdXNoKG5hbWUpO1xuICAgICAgICB9KVxuICAgICAgO1xuICAgIH1cbiAgfVxuICAvLyBjaGVjayBpZiB0ZW1wbGF0ZXMgZm9sZGVyIGV4aXN0c1xuICAvLyBpZiBub3QsIGNyZWF0ZSBpdFxuICBhc3luYyBlbnN1cmVfdGVtcGxhdGVzX2ZvbGRlcigpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZXNfZm9sZGVyID0gdGhpcy5hcHAudmF1bHQuZ2V0Rm9sZGVyQnlQYXRoKHRoaXMuc2V0dGluZ3MudGVtcGxhdGVzX2ZvbGRlcik7XG4gICAgaWYgKCF0ZW1wbGF0ZXNfZm9sZGVyKSB7XG4gICAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGVGb2xkZXIodGhpcy5zZXR0aW5ncy50ZW1wbGF0ZXNfZm9sZGVyKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgaW5jbHVkZV9kZWZhdWx0X3RlbXBsYXRlcygpIHtcbiAgICAvLyBjaGVjayBpZiBkZWZhdWx0IHRlbXBsYXRlcyBmb2xkZXJcbiAgICBjb25zdCBkZWZhdWx0X3RlbXBsYXRlc19mb2xkZXIgPSB0aGlzLmFwcC52YXVsdC5nZXRGb2xkZXJCeVBhdGgoYCR7dGhpcy5zZXR0aW5ncy50ZW1wbGF0ZXNfZm9sZGVyfS9kZWZhdWx0YCk7XG4gICAgaWYgKCFkZWZhdWx0X3RlbXBsYXRlc19mb2xkZXIpIHtcbiAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZUZvbGRlcihgJHt0aGlzLnNldHRpbmdzLnRlbXBsYXRlc19mb2xkZXJ9L2RlZmF1bHRgKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBbbmFtZSwgY29udGVudF0gb2YgT2JqZWN0LmVudHJpZXMoZGVmYXVsdF90ZW1wbGF0ZXMpKSB7XG4gICAgICBjb25zdCBkZWZhdWx0X3RlbXBsYXRlID0gdGhpcy5hcHAudmF1bHQuZ2V0RmlsZUJ5UGF0aChgJHt0aGlzLnNldHRpbmdzLnRlbXBsYXRlc19mb2xkZXJ9L2RlZmF1bHQvJHtuYW1lfS5tZGApO1xuICAgICAgaWYgKCFkZWZhdWx0X3RlbXBsYXRlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZShcbiAgICAgICAgICBgJHt0aGlzLnNldHRpbmdzLnRlbXBsYXRlc19mb2xkZXJ9L2RlZmF1bHQvJHtuYW1lfS5tZGAsXG4gICAgICAgICAgY29udGVudFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBjaGVjayBpZiB2YXJfcHJvbXB0cy5qc29uIGV4aXN0c1xuICAgIGNvbnN0IHZhcl9wcm9tcHRzX3BhdGggPSBgJHt0aGlzLnNldHRpbmdzLnRlbXBsYXRlc19mb2xkZXJ9L3Zhcl9wcm9tcHRzLmpzb25gO1xuICAgIGlmICghKGF3YWl0IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuZXhpc3RzKHZhcl9wcm9tcHRzX3BhdGgpKSkge1xuICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci53cml0ZSh2YXJfcHJvbXB0c19wYXRoLCBcInt9XCIpO1xuICAgIH1cbiAgICAvLyBmb3IgZWFjaCBkZWZhdWx0IHZhciBwcm9tcHQsIGFkZCBpdCB0byB2YXJfcHJvbXB0cy5qc29uIGlmIGl0IGRvZXNuJ3QgZXhpc3RcbiAgICBmb3IgKGNvbnN0IFtuYW1lLCBwcm9tcHRdIG9mIE9iamVjdC5lbnRyaWVzKGRlZmF1bHRfdmFyX3Byb21wdHMudmFyX3Byb21wdHMpKSB7XG4gICAgICBpZighdGhpcy5zZXR0aW5ncy52YXJfcHJvbXB0c1tuYW1lXSkge1xuICAgICAgICB0aGlzLnNldHRpbmdzLnZhcl9wcm9tcHRzW25hbWVdID0gcHJvbXB0O1xuICAgICAgfVxuICAgIH1cbiAgICBhd2FpdCB0aGlzLnNhdmVfc2V0dGluZ3MoKTtcbiAgfVxuXG4gIGFkZF9jb21tYW5kcygpIHtcbiAgICB0aGlzLmFkZF90ZW1wbGF0ZV9jb21tYW5kcygpO1xuICAgIC8vIHVwZGF0ZSB0ZW1wbGF0ZXMgY29tbWFuZHNcbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6ICd1cGRhdGUtY29tbWFuZHMnLFxuICAgICAgbmFtZTogJ1JlZnJlc2ggY29tbWFuZHMgKGFkZHMvcmVtb3ZlcyB0ZW1wbGF0ZXMgZnJvbSBjb21tYW5kcyknLFxuICAgICAgaWNvbjogJ3BlbmNpbF9pY29uJyxcbiAgICAgIGVkaXRvckNhbGxiYWNrOiB0aGlzLmFkZF90ZW1wbGF0ZV9jb21tYW5kcy5iaW5kKHRoaXMpLFxuICAgIH0pO1xuICB9XG4gIGFkZF90ZW1wbGF0ZV9jb21tYW5kcygpIHtcbiAgICBjb25zdCB0ZW1wbGF0ZXMgPSB0aGlzLmdldF90ZW1wbGF0ZXNfZnJvbV9mb2xkZXIodGhpcy5zZXR0aW5ncy50ZW1wbGF0ZXNfZm9sZGVyKTtcbiAgICBmb3IgKGNvbnN0IHRlbXBsYXRlIG9mIHRlbXBsYXRlcykge1xuICAgICAgLy8gZXhjbHVkZSBqc29uIGZpbGVzXG4gICAgICBpZih0ZW1wbGF0ZS5uYW1lLmVuZHNXaXRoKCcuanNvbicpKSBjb250aW51ZTtcbiAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgIGlkOiBgJHtmb3JtYXRfY29tbWFuZF9uYW1lKHRlbXBsYXRlLm5hbWUpfWAsXG4gICAgICAgIG5hbWU6IGBHZW5lcmF0ZTogJHt0ZW1wbGF0ZS5uYW1lLnNwbGl0KCcubWQnKT8uWzBdIHx8IHRlbXBsYXRlLm5hbWV9YCxcbiAgICAgICAgaWNvbjogXCJwZW5jaWxfaWNvblwiLFxuICAgICAgICBob3RrZXlzOiBbXSxcbiAgICAgICAgZWRpdG9yQ2FsbGJhY2s6IHRoaXMucnVuX3NtYXJ0X3RlbXBsYXRlLmJpbmQodGhpcywgdGVtcGxhdGUucGF0aCksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBydW5fc21hcnRfdGVtcGxhdGUodGVtcGxhdGVfcGF0aCwgZWRpdG9yLCBjdHgpIHtcbiAgICAvLyBnZXQgcGF0aCBvZiBhY3RpdmUgZmlsZVxuICAgIGNvbnN0IGZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgIGNvbnN0IGZpbGVfcGF0aCA9IGZpbGUucGF0aDtcbiAgICBsZXQgY29udGV4dCA9IGZpbGVfcGF0aCArIFwiXFxuXCI7IC8vIGFkZCBmaWxlIHBhdGggdG8gY29udGV4dCAoZm9sZGVyIGFuZCBmaWxlIG5hbWUpXG4gICAgaWYoZWRpdG9yLnNvbWV0aGluZ1NlbGVjdGVkKCkpIGNvbnRleHQgPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XG4gICAgZWxzZSBjb250ZXh0ID0gZWRpdG9yLmdldFZhbHVlKCk7XG4gICAgaWYgKCFjb250ZXh0KSByZXR1cm4gbmV3IE5vdGljZShcIltTbWFydCBDb21tYW5kc10gTm8gZmlsZSBvciBzZWxlY3Rpb24gZm91bmRcIik7XG5cbiAgICBjb25zdCB0ZW1wbGF0ZV90ZmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEZpbGVCeVBhdGgodGVtcGxhdGVfcGF0aCk7XG4gICAgLy8gZ2V0IHRlbXBsYXRlIGZyb250bWF0dGVyXG4gICAgY29uc3QgdGVtcGxhdGVfY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNhY2hlZFJlYWQodGVtcGxhdGVfdGZpbGUpO1xuICAgIGNvbnN0IHRlbXBsYXRlX2Zyb250bWF0dGVyID0gcGFyc2VfZnJvbnRtYXR0ZXIodGVtcGxhdGVfY29udGVudCk7XG4gICAgaWYodGVtcGxhdGVfZnJvbnRtYXR0ZXI/LnRhZ3NfYXNfY29udGV4dCkge1xuICAgICAgY29udGV4dCA9IGAke3RoaXMudGFnc19hc19jb250ZXh0fVxcbiR7Y29udGV4dH1gO1xuICAgIH1cbiAgICBjb25zdCBvcHRzID0ge1xuICAgICAgZmlsZV90eXBlOiB0ZW1wbGF0ZV90ZmlsZS5leHRlbnNpb24sXG4gICAgfTtcbiAgICBpZih0ZW1wbGF0ZV9mcm9udG1hdHRlcj8uc3lzdGVtX3Byb21wdCkge1xuICAgICAgb3B0cy5zeXN0ZW1fcHJvbXB0ID0gdGVtcGxhdGVfZnJvbnRtYXR0ZXIuc3lzdGVtX3Byb21wdDtcbiAgICB9XG4gICAgY29uc3QgcmVzcCA9IGF3YWl0IHRoaXMuZW52LnNtYXJ0X3RlbXBsYXRlcy5yZW5kZXIodGhpcy5zdHJpcF9mcm9udG1hdHRlcl9jb250ZXh0X2NvbmZpZyh0ZW1wbGF0ZV9jb250ZW50KSwgY29udGV4dCwgb3B0cyk7XG4gICAgLy8gZ2V0IGxhc3QgbGluZSBvZiBlZGl0b3JcbiAgICBjb25zdCBsaW5lcyA9IGVkaXRvci5nZXRWYWx1ZSgpLnNwbGl0KFwiXFxuXCIpO1xuICAgIGNvbnN0IGxhc3RfbGluZSA9IGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdO1xuICAgIGVkaXRvci5zZXRWYWx1ZShlZGl0b3IuZ2V0VmFsdWUoKSArIFwiXFxuXCIgKyByZXNwKTtcbiAgICBjb25zdCBvdXRwdXRfcG9zID0geyBsaW5lOiBsYXN0X2xpbmUsIGNoOiAwIH07XG4gICAgZWRpdG9yLnNldEN1cnNvcihvdXRwdXRfcG9zKTtcbiAgICBlZGl0b3Iuc2Nyb2xsSW50b1ZpZXcoeyB0bzogb3V0cHV0X3BvcywgZnJvbTogb3V0cHV0X3BvcyB9LCB0cnVlKTtcbiAgfVxuICBnZXQgY29udGV4dF9mcm9udG1hdHRlcl9pbmRleCgpIHtcbiAgICByZXR1cm4gWyd0YWdzX2FzX2NvbnRleHQnLCAnc3lzdGVtX3Byb21wdCddXG4gIH1cblxuICBnZXQgYWxsX3RhZ3MoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0VGFncygpKVxuICAgICAgLmZpbHRlcigoW25hbWVdKSA9PiAhdGhpcy5jb250ZXh0X2Zyb250bWF0dGVyX2luZGV4LmluY2x1ZGVzKG5hbWUpKVxuICAgICAgLm1hcCgoW25hbWUsIGNvdW50XSkgPT4gKHtuYW1lLCBjb3VudH0pKVxuICAgICAgLnNvcnQoKGEsIGIpID0+IGIuY291bnQgLSBhLmNvdW50KVxuICAgIDtcbiAgfVxuXG4gIGdldCB0YWdzX2FzX2NvbnRleHQoKSB7XG4gICAgcmV0dXJuIGBFeGlzdGluZyB0YWdzIGluIGZvcm1hdCBcInRhZyAoZnJlcXVlbmN5KVwiOlxcbmAgKyB0aGlzLmFsbF90YWdzLm1hcCh0YWcgPT4gYCR7dGFnLm5hbWV9JHt0YWcuY291bnQgPiAxID8gYCAoJHt0YWcuY291bnR9KWAgOiAnJ31gKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgc3RyaXBfZnJvbnRtYXR0ZXJfY29udGV4dF9jb25maWcodGVtcGxhdGVfY29udGVudCkge1xuICAgIGNvbnN0IHJlZ2V4X3BhdHRlcm4gPSB0aGlzLmNvbnRleHRfZnJvbnRtYXR0ZXJfaW5kZXhcbiAgICAgIC5tYXAodGFnID0+IGBeJHt0YWd9Oi4qXFxcXG5gKVxuICAgICAgLmpvaW4oJ3wnKTtcbiAgICBjb25zdCBkeW5hbWljX3JlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleF9wYXR0ZXJuLCAnZ20nKTtcblxuICAgIHJldHVybiB0ZW1wbGF0ZV9jb250ZW50XG4gICAgICAvLyBkeW5hbWljYWxseSByZW1vdmUgbGluZXMgc3RhcnRpbmcgd2l0aCBjb250ZXh0IGZyb250bWF0dGVyIHRhZ3NcbiAgICAgIC5yZXBsYWNlKGR5bmFtaWNfcmVnZXgsICcnKVxuICAgICAgLy8gcmVtb3ZlIC0tLSBkZWxpbWl0ZXJzIGlmIG5vIGZyb250bWF0dGVyIGlzIHByZXNlbnRcbiAgICAgIC5yZXBsYWNlKC9eLS0tXFxuLS0tL2dtLCAnJylcbiAgICA7XG4gIH1cbn1cblxuY2xhc3MgU21hcnRUZW1wbGF0ZXNTZXR0aW5nc1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICBjb25zdHJ1Y3RvcihhcHAsIHBsdWdpbikge1xuICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcbiAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgICB0aGlzLmNvbmZpZyA9IHBsdWdpbi5zZXR0aW5ncztcbiAgfVxuICBkaXNwbGF5KCkge1xuICAgIHRoaXMuc21hcnRfc2V0dGluZ3MgPSBuZXcgU21hcnRUZW1wbGF0ZXNTZXR0aW5ncyhcbiAgICAgIHRoaXMucGx1Z2luLmVudixcbiAgICAgIHRoaXMuY29udGFpbmVyRWwsXG4gICAgICB7XG4gICAgICAgIG1haW46IHRoaXMucGx1Z2luLCAvLyBmaXhlcyBub3Qgc2F2aW5nXG4gICAgICAgIHRlbXBsYXRlX25hbWU6IFwic21hcnRfdGVtcGxhdGVzX3NldHRpbmdzXCIsXG4gICAgICAgIHZpZXdzLFxuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMuc21hcnRfc2V0dGluZ3MucmVuZGVyKCk7XG4gIH1cbn1cbmltcG9ydCB7IFNtYXJ0U2V0dGluZ3MgfSBmcm9tIFwic21hcnQtc2V0dGluZ1wiO1xuLy8gU21hcnQgVGVtcGxhdGVzIFNwZWNpZmljIFNldHRpbmdzXG5jbGFzcyBTbWFydFRlbXBsYXRlc1NldHRpbmdzIGV4dGVuZHMgU21hcnRTZXR0aW5ncyB7XG4gIGdldCBzZXR0aW5ncygpIHsgcmV0dXJuIHRoaXMuZW52LnNtYXJ0X3RlbXBsYXRlc19wbHVnaW4uc2V0dGluZ3M7IH1cbiAgc2V0IHNldHRpbmdzKHNldHRpbmdzKSB7XG4gICAgdGhpcy5lbnYuc21hcnRfdGVtcGxhdGVzX3BsdWdpbi5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICB9XG4gIGdldCBtb2RlbF9jb25maWcoKSB7IHJldHVybiB0aGlzLnNldHRpbmdzW3RoaXMuc2V0dGluZ3MuY2hhdF9tb2RlbF9wbGF0Zm9ybV9rZXldOyB9XG4gIGFzeW5jIGdldF92aWV3X2RhdGEoKXtcbiAgICAvLyBmb3IgZWFjaCBmaWxlIGluIHRlbXBsYXRlcyBmb2xkZXJcbiAgICBhd2FpdCB0aGlzLmVudi5zbWFydF90ZW1wbGF0ZXNfcGx1Z2luLmdldF92YXJfcHJvbXB0c19zZXR0aW5ncygpO1xuICAgIC8vIGdldCBjaGF0IHBsYXRmb3Jtc1xuICAgIGlmKCF0aGlzLl9tb2RlbF9zZXR0aW5ncykgdGhpcy5sb2FkX21vZGVsX3NldHRpbmdzKCk7XG4gICAgY29uc3QgdmFyX3Byb21wdHMgPSBPYmplY3QuZW50cmllcyh0aGlzLnNldHRpbmdzLnZhcl9wcm9tcHRzKVxuICAgICAgLy8gbWFwXG4gICAgICAubWFwKChbbmFtZSwgcHJvbXB0XSkgPT4gKHtuYW1lLCBwcm9tcHQsIGFjdGl2ZTogdGhpcy5lbnYuc21hcnRfdGVtcGxhdGVzX3BsdWdpbi5hY3RpdmVfdGVtcGxhdGVfdmFycy5pbmNsdWRlcyhuYW1lKX0pKVxuICAgICAgLy8gc29ydCBhbHBoYWJldGljYWxseSBieSBuYW1lXG4gICAgICAuc29ydCgoYSwgYikgPT4gYS5uYW1lLmxvY2FsZUNvbXBhcmUoYi5uYW1lKSlcbiAgICAgIC8vIHNvcnQgYnkgd2hldGhlciBwcm9tcHQgaXMgaW4gYWN0aXZlIHRlbXBsYXRlIHZhcnNcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBiLmFjdGl2ZSAtIGEuYWN0aXZlKVxuICAgIDtcbiAgICByZXR1cm4ge1xuICAgICAgbW9kZWxfc2V0dGluZ3M6IHRoaXMuX21vZGVsX3NldHRpbmdzIHx8IG51bGwsXG4gICAgICBzZXR0aW5nczogdGhpcy5zZXR0aW5ncyxcbiAgICAgIHZhcl9wcm9tcHRzLFxuICAgIH07XG4gIH1cbiAgYXN5bmMgY2FuX2ltcG9ydF9mcm9tX3NtYXJ0X2Nvbm5lY3Rpb25zKCkge1xuICAgIGlmKCEoYXdhaXQgdGhpcy5tYWluLmFwcC52YXVsdC5hZGFwdGVyLmV4aXN0cyhgJHt0aGlzLm1haW4uYXBwLnZhdWx0LmNvbmZpZ0Rpcn0vcGx1Z2lucy9zbWFydC1jb25uZWN0aW9ucy9kYXRhLmpzb25gKSkpIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBjb25maWdfZmlsZSA9IGF3YWl0IHRoaXMubWFpbi5hcHAudmF1bHQuYWRhcHRlci5yZWFkKGAke3RoaXMubWFpbi5hcHAudmF1bHQuY29uZmlnRGlyfS9wbHVnaW5zL3NtYXJ0LWNvbm5lY3Rpb25zL2RhdGEuanNvbmApO1xuICAgIGlmKCFjb25maWdfZmlsZSkgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGNvbmZpZyA9IEpTT04ucGFyc2UoY29uZmlnX2ZpbGUpO1xuICAgIC8vIGlmIGhhcyBhbnkgYXBpX2tleSBmb3IgU21hcnRDaGF0TW9kZWwucGxhdGZvcm1zIGluIHNtYXJ0LWNvbm5lY3Rpb25zLCBidXQgbm90IGluIHNldHRpbmdzLCByZXR1cm4gdHJ1ZVxuICAgIGlmKGNvbmZpZ1t0aGlzLnNldHRpbmdzLmNoYXRfbW9kZWxfcGxhdGZvcm1fa2V5XT8uYXBpX2tleT8ubGVuZ3RoICYmICF0aGlzLnNldHRpbmdzW3RoaXMuc2V0dGluZ3MuY2hhdF9tb2RlbF9wbGF0Zm9ybV9rZXldPy5hcGlfa2V5Py5sZW5ndGgpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBhc3luYyBsb2FkX21vZGVsX3NldHRpbmdzKCkge1xuICAgIGNvbnN0IGNoYXRfcGxhdGZvcm1zID0gU21hcnRDaGF0TW9kZWwucGxhdGZvcm1zO1xuICAgIGNvbnN0IHNtYXJ0X2NoYXRfbW9kZWwgPSBuZXcgU21hcnRDaGF0TW9kZWwoXG4gICAgICB0aGlzLmVudixcbiAgICAgIHRoaXMuc2V0dGluZ3MuY2hhdF9tb2RlbF9wbGF0Zm9ybV9rZXkgfHwgJ29wZW5haScsXG4gICAgICB0aGlzLm1vZGVsX2NvbmZpZ1xuICAgICk7XG4gICAgc21hcnRfY2hhdF9tb2RlbC5fcmVxdWVzdF9hZGFwdGVyID0gcmVxdWVzdFVybDtcbiAgICBjb25zdCBwbGF0Zm9ybV9jaGF0X21vZGVscyA9IGF3YWl0IHNtYXJ0X2NoYXRfbW9kZWwuZ2V0X21vZGVscygpO1xuICAgIHRoaXMuX21vZGVsX3NldHRpbmdzID0gYXdhaXQgdGhpcy5lanMucmVuZGVyKFxuICAgICAgdGhpcy52aWV3c1snc21hcnRfdGVtcGxhdGVzX21vZGVsX3NldHRpbmdzJ10sXG4gICAgICB7XG4gICAgICAgIHNldHRpbmdzOiB0aGlzLnNldHRpbmdzLFxuICAgICAgICBjaGF0X3BsYXRmb3JtcyxcbiAgICAgICAgcGxhdGZvcm1fY2hhdF9tb2RlbHMsXG4gICAgICAgIGNoYXRfcGxhdGZvcm06IHNtYXJ0X2NoYXRfbW9kZWwucGxhdGZvcm0sXG4gICAgICAgIGNhbl9pbXBvcnRfZnJvbV9zbWFydF9jb25uZWN0aW9uczogYXdhaXQgdGhpcy5jYW5faW1wb3J0X2Zyb21fc21hcnRfY29ubmVjdGlvbnMoKSxcbiAgICAgIH1cbiAgICApO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cblxuICBnZXQgdGVtcGxhdGUgKCl7IHJldHVybiB0aGlzLnZpZXdzW3RoaXMudGVtcGxhdGVfbmFtZV07IH1cbiAgYXN5bmMgY2hhbmdlZF9zbWFydF9jaGF0X3BsYXRmb3JtKHJlbmRlciA9IHRydWUpe1xuICAgIHRoaXMuX21vZGVsX3NldHRpbmdzID0gbnVsbDtcbiAgICB0aGlzLmVudi5zbWFydF90ZW1wbGF0ZXNfcGx1Z2luLmxvYWRfc21hcnRfdGVtcGxhdGVzKCk7XG4gICAgaWYocmVuZGVyKSB0aGlzLnJlbmRlcigpO1xuICB9XG4gIC8vIGltcG9ydCBtb2RlbCBjb25maWcgZnJvbSBzbWFydC1jb25uZWN0aW9uc1xuICBhc3luYyBpbXBvcnRfbW9kZWxfY29uZmlnX2Zyb21fc21hcnRfY29ubmVjdGlvbnMoKXtcbiAgICBjb25zdCBjb25maWdfZmlsZSA9IGF3YWl0IHRoaXMubWFpbi5hcHAudmF1bHQuYWRhcHRlci5yZWFkKGAke3RoaXMubWFpbi5hcHAudmF1bHQuY29uZmlnRGlyfS9wbHVnaW5zL3NtYXJ0LWNvbm5lY3Rpb25zL2RhdGEuanNvbmApO1xuICAgIGlmKCFjb25maWdfZmlsZSkgcmV0dXJuIG5ldyBOb3RpY2UoXCJbU21hcnQgVGVtcGxhdGVzXSBObyBtb2RlbCBjb25maWcgZm91bmQgaW4gc21hcnQtY29ubmVjdGlvbnNcIik7XG4gICAgY29uc3QgY29uZmlnID0gSlNPTi5wYXJzZShjb25maWdfZmlsZSk7XG4gICAgY29uc3Qgc2V0dGluZ3MgPSB0aGlzLnNldHRpbmdzO1xuICAgIGlmKGNvbmZpZ1t0aGlzLnNldHRpbmdzLmNoYXRfbW9kZWxfcGxhdGZvcm1fa2V5XSkgc2V0dGluZ3NbdGhpcy5zZXR0aW5ncy5jaGF0X21vZGVsX3BsYXRmb3JtX2tleV0gPSB7Li4uY29uZmlnW3RoaXMuc2V0dGluZ3MuY2hhdF9tb2RlbF9wbGF0Zm9ybV9rZXldfTtcbiAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgYXdhaXQgdGhpcy5lbnYuc21hcnRfdGVtcGxhdGVzX3BsdWdpbi5zYXZlX3NldHRpbmdzKCk7XG4gICAgdGhpcy5fbW9kZWxfc2V0dGluZ3MgPSBudWxsO1xuICAgIHRoaXMucmVuZGVyKCk7XG4gIH1cbiAgYXN5bmMgdXBkYXRlKHNldHRpbmcsIHZhbHVlKSB7XG4gICAgYXdhaXQgc3VwZXIudXBkYXRlKHNldHRpbmcsIHZhbHVlKTtcbiAgfVxuICBhc3luYyByZW1vdmVfdmFyX3Byb21wdChzZXR0aW5nLCB2YWx1ZSwgZWxtKSB7XG4gICAgY29uc3QgdmFyX3Byb21wdF9uYW1lID0gZWxtLmRhdGFzZXQudmFsdWU7XG4gICAgZGVsZXRlIHRoaXMuc2V0dGluZ3MudmFyX3Byb21wdHNbdmFyX3Byb21wdF9uYW1lXTtcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZSgndmFyX3Byb21wdHMnLCB0aGlzLnNldHRpbmdzLnZhcl9wcm9tcHRzKTtcbiAgICB0aGlzLnJlbmRlcigpO1xuICB9XG59XG5cbi8vIGNvbnZlcnQgc3RyaW5nIHRvIGxvd2VyY2FzZSBsZXR0ZXJzIGFuZCBoeXBoZW5zIG9ubHlcbmZ1bmN0aW9uIGZvcm1hdF9jb21tYW5kX25hbWUobmFtZSkge1xuICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teYS16MC05XS9pZywgJy0nKTtcbn1cbi8vIHJldHVybiBmcm9udG1hdHRlciBvYmplY3RcbmZ1bmN0aW9uIHBhcnNlX2Zyb250bWF0dGVyKGNvbnRlbnQpIHtcbiAgICBjb25zdCBtYXRjaCA9IGNvbnRlbnQubWF0Y2goL14tLS1cXG4oW1xcc1xcU10rPylcXG4tLS0vKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgY29uc3QgZnJvbnRtYXR0ZXIgPSBtYXRjaFsxXTtcbiAgICAgICAgY29uc3QgeWFtbF9vYmplY3QgPSB7fTtcbiAgICAgICAgY29uc3QgbGluZXMgPSBmcm9udG1hdHRlci5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuICAgICAgICAgICAgY29uc3QgW2tleSwgLi4udmFsdWVfcGFydHNdID0gbGluZS5zcGxpdCgnOicpO1xuICAgICAgICAgICAgaWYgKGtleSAmJiB2YWx1ZV9wYXJ0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZV9wYXJ0cy5qb2luKCc6JykudHJpbSgpO1xuICAgICAgICAgICAgICAgIHlhbWxfb2JqZWN0W2tleS50cmltKCldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHlhbWxfb2JqZWN0O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn0iLCAiLy8gQ29weXJpZ2h0IChjKSBCcmlhbiBKb3NlcGggUGV0cm9cblxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG4vLyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4vLyBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cbi8vIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbi8vIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuLy8gRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxuLy8gTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRVxuLy8gTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTlxuLy8gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OXG4vLyBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuaW1wb3J0IGVqcyBmcm9tICcuL2Vqcy5taW4uY2pzJztcbmltcG9ydCB7IFNtYXJ0Q2hhdE1vZGVsIH0gZnJvbSAnc21hcnQtY2hhdC1tb2RlbCc7XG5cbmV4cG9ydCBjbGFzcyBTbWFydFRlbXBsYXRlcyB7XG4gIGNvbnN0cnVjdG9yKGVudiA9IHt9LCBvcHRzID0ge30pIHtcbiAgICB0aGlzLmVudiA9IGVudjtcbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIHRoaXMuYWRhcHRlciA9IG9wdHMuYWRhcHRlciB8fCBudWxsOyAvLyBERVBSRUNBVEVEOiBpbiBmYXZvciBvZiBmaWxlX3R5cGVfYWRhcHRlcnNcbiAgICB0aGlzLmZpbGVfdHlwZV9hZGFwdGVycyA9IHt9O1xuICAgIGlmKG9wdHMuZmlsZV90eXBlX2FkYXB0ZXJzKSB7XG4gICAgICBmb3IoY29uc3QgYWRhcHRlcl9jbGFzcyBvZiBvcHRzLmZpbGVfdHlwZV9hZGFwdGVycykge1xuICAgICAgICBjb25zdCBhZGFwdGVyID0gbmV3IGFkYXB0ZXJfY2xhc3ModGhpcyk7XG4gICAgICAgIGZvcihjb25zdCBmaWxlX3R5cGUgb2YgYWRhcHRlci5maWxlX3R5cGVzKSB7XG4gICAgICAgICAgdGhpcy5maWxlX3R5cGVfYWRhcHRlcnNbZmlsZV90eXBlXSA9IGFkYXB0ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYob3B0cy5yZWFkX2FkYXB0ZXIpIHRoaXMucmVhZF9hZGFwdGVyID0gb3B0cy5yZWFkX2FkYXB0ZXI7XG4gICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJvcHRzLnJlYWRfYWRhcHRlciBpcyByZXF1aXJlZCAoZXguIGFzeW5jIChwYXRoKSA9PiBhd2FpdCBmcy5wcm9taXNlcy5yZWFkRmlsZShwYXRoLCAndXRmOCcpKVwiKTtcbiAgICB0aGlzLl90ZW1wbGF0ZXMgPSB7fTtcbiAgfVxuICBzdGF0aWMgYXN5bmMgbG9hZChlbnYsIG9wdHMgPSB7fSkge1xuICAgIGVudi5zbWFydF90ZW1wbGF0ZXMgPSBuZXcgU21hcnRUZW1wbGF0ZXMoZW52LCBvcHRzKTtcbiAgICBhd2FpdCBlbnYuc21hcnRfdGVtcGxhdGVzLmluaXQoKTtcbiAgICByZXR1cm4gZW52LnNtYXJ0X3RlbXBsYXRlcztcbiAgfVxuICBhc3luYyBpbml0KCkge1xuICAgIC8vIFJFU0VSVkVEXG4gIH1cbiAgZ2V0IHJlcXVlc3RfYWRhcHRlcigpIHsgcmV0dXJuIHRoaXMub3B0cy5yZXF1ZXN0X2FkYXB0ZXIgfHwgbnVsbDsgfVxuICBnZXQgc2V0dGluZ3MoKSB7IHJldHVybiB0aGlzLmVudi5zZXR0aW5nczsgfVxuICBnZXQgdmFyX3Byb21wdHMoKSB7IHJldHVybiB0aGlzLnNldHRpbmdzLnNtYXJ0X3RlbXBsYXRlcz8udmFyX3Byb21wdHMgfHwge307IH1cbiAgZ2V0IGFwaV9rZXkoKSB7IHJldHVybiB0aGlzLnNldHRpbmdzLnNtYXJ0X3RlbXBsYXRlcz8uYXBpX2tleTsgfVxuICBnZXQgZmlsZV90eXBlcygpIHtcbiAgICByZXR1cm4gW1xuICAgICAgLi4uT2JqZWN0LmtleXModGhpcy5maWxlX3R5cGVfYWRhcHRlcnMpLFxuICAgICAgJ2VqcycsXG4gICAgXTtcbiAgfVxuICBnZXRfYWRhcHRlcl9ieShmaWxlX3R5cGUpeyByZXR1cm4gdGhpcy5maWxlX3R5cGVfYWRhcHRlcnNbZmlsZV90eXBlXTsgfVxuICAvLyBFSlMgdGVtcGxhdGUgYmFzZSBzeW50YXggZW5naW5lXG4gIGFzeW5jIGdldF90ZW1wbGF0ZSh0ZW1wbGF0ZSwgb3B0cyA9IHt9KSB7XG4gICAgaWYodHlwZW9mIHRlbXBsYXRlICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gICAgaWYodGhpcy5fdGVtcGxhdGVzW3RlbXBsYXRlXSkgdGVtcGxhdGUgPSB0aGlzLl90ZW1wbGF0ZXNbdGVtcGxhdGVdO1xuICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLmdldF9hZGFwdGVyX2J5KG9wdHMuZmlsZV90eXBlIHx8IHRlbXBsYXRlLnNwbGl0KCcuJykucG9wKCkpO1xuICAgIGlmKHR5cGVvZiBhZGFwdGVyPy5nZXRfdGVtcGxhdGUgPT09ICdmdW5jdGlvbicpIHJldHVybiBhd2FpdCBhZGFwdGVyLmdldF90ZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgaWYgKCF0ZW1wbGF0ZS5pbmNsdWRlcygnXFxuJykgJiYgdGhpcy5maWxlX3R5cGVzLmluY2x1ZGVzKHRlbXBsYXRlLnNwbGl0KCcuJykucG9wKCkpKSB7XG4gICAgICB0ZW1wbGF0ZSA9IGF3YWl0IHRoaXMubG9hZF90ZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYWRhcHRlcj8uY29udmVydF90b19lanMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRlbXBsYXRlID0gYWRhcHRlci5jb252ZXJ0X3RvX2Vqcyh0ZW1wbGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgfVxuXG4gIGFzeW5jIGxvYWRfdGVtcGxhdGUocG9pbnRlcikge1xuICAgIHRyeSB7XG4gICAgICBsZXQgdGVtcGxhdGUgPSBhd2FpdCB0aGlzLnJlYWRfYWRhcHRlcihwb2ludGVyKTtcbiAgICAgIC8vIC8vIGlmIGlzIGJ1ZmZlciwgY29udmVydCB0byBzdHJpbmcgKFdBUk5JTkc6IGJyZWFrcyBPYnNpZGlhbiBtb2JpbGUpXG4gICAgICAvLyBpZiAodHlwZW9mIEJ1ZmZlcj8uaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgQnVmZmVyLmlzQnVmZmVyKHRlbXBsYXRlKSkge1xuICAgICAgLy8gICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnRvU3RyaW5nKCk7XG4gICAgICAvLyB9XG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGxvYWRpbmcgdGVtcGxhdGUgZnJvbSAke3BvaW50ZXJ9OmAsIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrKTtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cblxuICAvLyBHZXQgdmFyaWFibGVzIGZyb20gRUpTIHRlbXBsYXRlXG4gIGFzeW5jIGdldF92YXJpYWJsZXMocG9pbnRlciwgb3B0cyA9IHt9KSB7XG4gICAgbGV0IHZhcmlhYmxlcyA9IFtdO1xuICAgIGNvbnN0IGZpbGVfdHlwZSA9IG9wdHMuZmlsZV90eXBlIHx8IHBvaW50ZXIuc3BsaXQoJy4nKS5wb3AoKTtcbiAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5nZXRfYWRhcHRlcl9ieShmaWxlX3R5cGUpO1xuICAgIGlmIChhZGFwdGVyICYmIHR5cGVvZiBhZGFwdGVyLmdldF92YXJpYWJsZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBhd2FpdCBhZGFwdGVyLmdldF92YXJpYWJsZXMocG9pbnRlciwgb3B0cyk7XG4gICAgfVxuICAgIGNvbnN0IHRlbXBsYXRlID0gYXdhaXQgdGhpcy5nZXRfdGVtcGxhdGUocG9pbnRlciwgb3B0cyk7XG4gICAgY29uc3QgcmVnZXggPSAvPCVbLV89XT9cXHMqPT9cXHMqKFtcXHcuXSsoXFxbXFx3K10pPylcXHMqWy1fXT8lPi9nO1xuICAgIGxldCBtYXRjaDtcbiAgICB3aGlsZSAoKG1hdGNoID0gcmVnZXguZXhlYyh0ZW1wbGF0ZSkpICE9PSBudWxsKSB7XG4gICAgICBjb25zdCB2YXJpYWJsZSA9IG1hdGNoWzFdO1xuICAgICAgY29uc3QgbWFpblZhcmlhYmxlID0gdmFyaWFibGUuc3BsaXQoL1xcW3xcXC4vKVswXS50cmltKCk7XG4gICAgICBjb25zdCBwcm9tcHQgPSB0aGlzLnZhcl9wcm9tcHRzW21haW5WYXJpYWJsZV0/LnByb21wdCB8fCBudWxsO1xuICAgICAgdmFyaWFibGVzLnB1c2goeyBuYW1lOiBtYWluVmFyaWFibGUsIHByb21wdCB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhcmlhYmxlcztcbiAgfVxuXG4gIGFzeW5jIGdldF9jaGF0bWxfdG9vbHModmFyaWFibGVzLCBvcHRzID0ge30pIHtcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gdmFyaWFibGVzLnJlZHVjZSgoYWNjLCB2YXJpYWJsZSkgPT4ge1xuICAgICAgYWNjW3ZhcmlhYmxlLm5hbWVdID0geyB0eXBlOiAnc3RyaW5nJywgZGVzY3JpcHRpb246IHZhcmlhYmxlLnByb21wdCB8fCAnVE9ETycgfTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgICBmdW5jdGlvbjoge1xuICAgICAgICBuYW1lOiBcImdlbmVyYXRlX2NvbnRlbnRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFwiR2VuZXJhdGUgYXJndW1lbnRzIGJhc2VkIG9uIHRoZSBDT05URVhULlwiICsgKG9wdHMuc3lzdGVtX3Byb21wdCA/IGAgJHtvcHRzLnN5c3RlbV9wcm9tcHR9YCA6ICcnKSxcbiAgICAgICAgcGFyYW1ldGVyczoge1xuICAgICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgICAgcHJvcGVydGllcyxcbiAgICAgICAgICByZXF1aXJlZDogdmFyaWFibGVzLm1hcCh2YXJpYWJsZSA9PiB2YXJpYWJsZS5uYW1lKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIEdldCB2aWV3IGRhdGEgdXNpbmcgdGhlIGZ1bmN0aW9uIGNhbGwgb3V0cHV0XG4gIGFzeW5jIGdldF92aWV3X2RhdGEob3V0cHV0KSB7XG4gICAgaWYgKHRoaXMuYWRhcHRlciAmJiB0eXBlb2YgdGhpcy5hZGFwdGVyLmdldF92aWV3X2RhdGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiB0aGlzLmFkYXB0ZXIuZ2V0X3ZpZXdfZGF0YShvdXRwdXQpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG5cbiAgLy8gUmVuZGVyIHRlbXBsYXRlIHdpdGggY29udGV4dCBhbmQgb3B0aW9uc1xuICBhc3luYyByZW5kZXIodGVtcGxhdGUsIGNvbnRleHQsIG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IHRlbXBsYXRlX2NvbnRlbnQgPSBhd2FpdCB0aGlzLmdldF90ZW1wbGF0ZSh0ZW1wbGF0ZSwgb3B0cyk7XG4gICAgY29uc3QgdmFyaWFibGVzID0gYXdhaXQgdGhpcy5nZXRfdmFyaWFibGVzKHRlbXBsYXRlLCBvcHRzKTtcbiAgICBjb25zdCBtZXJnZWRDb250ZXh0ID0geyBjb250ZXh0LCAuLi5vcHRzIH07XG4gICAgdmFyaWFibGVzLmZvckVhY2godmFyaWFibGUgPT4ge1xuICAgICAgbWVyZ2VkQ29udGV4dFt2YXJpYWJsZS5uYW1lXSA9ICdFTVBUWSc7XG4gICAgfSk7XG5cbiAgICBjb25zdCBmdW5jdGlvbkNhbGxSZXF1ZXN0ID0ge1xuICAgICAgbWVzc2FnZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICBjb250ZW50OiBgLS0tQ09OVEVYVC0tLVxcbiR7Y29udGV4dH1cXG4tLS1FTkQgQ09OVEVYVC0tLWAsXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICB0b29sczogW1xuICAgICAgICBhd2FpdCB0aGlzLmdldF9jaGF0bWxfdG9vbHModmFyaWFibGVzLCBvcHRzKVxuICAgICAgXSxcbiAgICAgIHRvb2xfY2hvaWNlOiB7XG4gICAgICAgIHR5cGU6ICdmdW5jdGlvbicsXG4gICAgICAgIGZ1bmN0aW9uOiB7XG4gICAgICAgICAgbmFtZTogJ2dlbmVyYXRlX2NvbnRlbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzdHJlYW06IGZhbHNlXG4gICAgfTtcbiAgICBpZihvcHRzLnN5c3RlbV9wcm9tcHQpe1xuICAgICAgZnVuY3Rpb25DYWxsUmVxdWVzdC5tZXNzYWdlc1swXS5jb250ZW50ICs9IGBcXG4tLS1JTVBPUlRBTlQtLS1cXG4ke29wdHMuc3lzdGVtX3Byb21wdH1cXG4tLS1FTkQgSU1QT1JUQU5ULS0tYDtcbiAgICAgIGZ1bmN0aW9uQ2FsbFJlcXVlc3QubWVzc2FnZXMudW5zaGlmdCh7cm9sZTogJ3N5c3RlbScsIGNvbnRlbnQ6IG9wdHMuc3lzdGVtX3Byb21wdH0pO1xuICAgIH1cblxuICAgIC8vIFVzZSBTbWFydENoYXRNb2RlbCB0byBnZXQgcmVwbGFjZW1lbnQgdmFsdWVzXG4gICAgY29uc3QgY2hhdE1vZGVsID0gbmV3IFNtYXJ0Q2hhdE1vZGVsKHRoaXMuZW52LCB0aGlzLmNoYXRfbW9kZWxfcGxhdGZvcm1fa2V5LCB0aGlzLm1vZGVsX2NvbmZpZyk7XG4gICAgaWYodGhpcy5yZXF1ZXN0X2FkYXB0ZXIpIGNoYXRNb2RlbC5fcmVxdWVzdF9hZGFwdGVyID0gdGhpcy5yZXF1ZXN0X2FkYXB0ZXI7XG4gICAgY29uc3QgcmVwbGFjZW1lbnRWYWx1ZXMgPSBhd2FpdCBjaGF0TW9kZWwuY29tcGxldGUoZnVuY3Rpb25DYWxsUmVxdWVzdCk7XG4gICAgT2JqZWN0LmVudHJpZXMocmVwbGFjZW1lbnRWYWx1ZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgaWYodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgUmVwbGFjZW1lbnQgdmFsdWUgaXMgbm90IGEgc3RyaW5nIG9yIG51bWJlcjogYCwgSlNPTi5zdHJpbmdpZnkodmFsdWUsIG51bGwsIDIpKTtcbiAgICAgICAgaWYoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXBsYWNlbWVudFZhbHVlc1trZXldID0gdmFsdWUuam9pbignXFxuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVwbGFjZW1lbnRWYWx1ZXNba2V5XSA9IHZhbHVlID8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogJyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIE1lcmdlIHJlcGxhY2VtZW50IHZhbHVlcyBpbnRvIGNvbnRleHRcbiAgICBPYmplY3QuYXNzaWduKG1lcmdlZENvbnRleHQsIHJlcGxhY2VtZW50VmFsdWVzKTtcblxuICAgIHJldHVybiBlanMucmVuZGVyKHRlbXBsYXRlX2NvbnRlbnQsIG1lcmdlZENvbnRleHQpO1xuICB9XG4gIGdldCBtb2RlbF9jb25maWcoKSB7XG4gICAgaWYodGhpcy5lbnYuc21hcnRfdGVtcGxhdGVzX3BsdWdpbj8uc2V0dGluZ3M/Llt0aGlzLmNoYXRfbW9kZWxfcGxhdGZvcm1fa2V5XSkgcmV0dXJuIHRoaXMuZW52LnNtYXJ0X3RlbXBsYXRlc19wbHVnaW4uc2V0dGluZ3NbdGhpcy5jaGF0X21vZGVsX3BsYXRmb3JtX2tleV07XG4gICAgaWYodGhpcy5lbnYuc2V0dGluZ3M/Llt0aGlzLmNoYXRfbW9kZWxfcGxhdGZvcm1fa2V5XSkgcmV0dXJuIHRoaXMuZW52LnNldHRpbmdzW3RoaXMuY2hhdF9tb2RlbF9wbGF0Zm9ybV9rZXldO1xuICAgIHJldHVybiB7YXBpX2tleTogdGhpcy5hcGlfa2V5fTtcbiAgfVxuICBnZXQgY2hhdF9tb2RlbF9wbGF0Zm9ybV9rZXkoKSB7XG4gICAgaWYodGhpcy5lbnYuc21hcnRfdGVtcGxhdGVzX3BsdWdpbj8uc2V0dGluZ3M/LmNoYXRfbW9kZWxfcGxhdGZvcm1fa2V5KSByZXR1cm4gdGhpcy5lbnYuc21hcnRfdGVtcGxhdGVzX3BsdWdpbi5zZXR0aW5ncy5jaGF0X21vZGVsX3BsYXRmb3JtX2tleTtcbiAgICBpZih0aGlzLmVudi5zZXR0aW5ncz8uc21hcnRfdGVtcGxhdGVzPy5jaGF0X21vZGVsX3BsYXRmb3JtX2tleSkgcmV0dXJuIHRoaXMuZW52LnNldHRpbmdzLnNtYXJ0X3RlbXBsYXRlcy5jaGF0X21vZGVsX3BsYXRmb3JtX2tleTtcbiAgICByZXR1cm4gdGhpcy5lbnYuc2V0dGluZ3M/LmNoYXRfbW9kZWxfcGxhdGZvcm1fa2V5IHx8ICdvcGVuYWknO1xuICB9XG4gIGFkZF90ZW1wbGF0ZShwYXRoKSB7XG4gICAgY29uc3QgZmlsZV9uYW1lID0gcGF0aC5zcGxpdCgnLycpLnBvcCgpLnNwbGl0KCcuJykuc2hpZnQoKTtcbiAgICB0aGlzLl90ZW1wbGF0ZXNbZmlsZV9uYW1lXSA9IHBhdGg7XG4gIH1cbiAgZ2V0IHRlbXBsYXRlcygpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5fdGVtcGxhdGVzKTtcbiAgfVxufVxuIiwgImV4cG9ydCBjbGFzcyBNYXJrZG93bkFkYXB0ZXIge1xuICBjb25zdHJ1Y3RvcihtYWluKSB7XG4gICAgdGhpcy5tYWluID0gbWFpbjtcbiAgfVxuICBnZXQgZmlsZV90eXBlcygpIHsgcmV0dXJuIFsnbWQnXTsgfVxuICBjb252ZXJ0X3RvX2Vqcyh0ZW1wbGF0ZSkge1xuICAgIHJldHVybiBjb252ZXJ0X3RvX2Vqcyh0ZW1wbGF0ZSk7XG4gIH1cbiAgYXN5bmMgZ2V0X3ZhcmlhYmxlcyh0ZW1wbGF0ZSkge1xuICAgIGlmICghdGVtcGxhdGUuaW5jbHVkZXMoJ1xcbicpICYmIHRoaXMuZmlsZV90eXBlcy5pbmNsdWRlcyh0ZW1wbGF0ZS5zcGxpdCgnLicpLnBvcCgpKSkge1xuICAgICAgdGVtcGxhdGUgPSBhd2FpdCB0aGlzLm1haW4ubG9hZF90ZW1wbGF0ZSh0ZW1wbGF0ZSk7XG4gICAgfVxuICAgIGNvbnN0IHZhcmlhYmxlcyA9IFtdO1xuICAgIGNvbnN0IHJlZ2V4ID0gL3t7XFxzKihbXn1dKylcXHMqfX0vZ2k7XG4gICAgY29uc3QgbWF0Y2hlcyA9IHRlbXBsYXRlLm1hdGNoKHJlZ2V4KTtcbiAgICB2YXIgaSA9IDE7XG4gICAgbWF0Y2hlcz8uZm9yRWFjaCgobWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgICBpZiAobWF0Y2guaW5jbHVkZXMoJ1wiJykpIHtcbiAgICAgICAgdmFyaWFibGVzLnB1c2goe1xuICAgICAgICAgIG5hbWU6IGB2YXJfJHtpKyt9YCxcbiAgICAgICAgICBwcm9tcHQ6IG1hdGNoLnJlcGxhY2UoL3t7XFxzKlwiKFteXCJdKylcIlxccyp9fS9nLCAnJDEnKS50cmltKCksXG4gICAgICAgICAgaW5saW5lOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IG5hbWUgPSBtYXRjaC5yZXBsYWNlKC97e1xccyo9P1xccyooW1xcd1xccy4tXSsoXFxbXFx3K10pPylcXHMqfX0vZywgJyQxJykudHJpbSgpO1xuICAgICAgICBjb25zdCBwcm9tcHRfa2V5ID0gbmFtZS5yZXBsYWNlKC9bLVxcc10vZywgJ18nKTsgLy8gUmVwbGFjZSBoeXBoZW5zIGFuZCBzcGFjZXMgd2l0aCB1bmRlcnNjb3Jlc1xuICAgICAgICBjb25zdCBwcm9tcHQgPSAodGhpcy5tYWluLnZhcl9wcm9tcHRzW3Byb21wdF9rZXldPy5wcm9tcHQgfHwgbmFtZSArICcgcHJvbXB0JykudHJpbSgpO1xuICAgICAgICB2YXJpYWJsZXMucHVzaCh7IG5hbWU6IHByb21wdF9rZXksIHByb21wdCB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdmFyaWFibGVzO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0X3RvX2Vqcyhjb250ZW50KSB7XG4gIC8vIGRldGVjdCBicmFja2V0cyB3aXRoIHF1b3Rlc1xuICBjb25zdCByZWdleCA9IC97e1xccypcIihbXlwiXSspXCJcXHMqfX0vZztcbiAgY29uc3QgbWF0Y2hlcyA9IGNvbnRlbnQubWF0Y2gocmVnZXgpO1xuICAvLyBmb3IgZWFjaCBtYXRjaCwgcmVwbGFjZSB3aXRoIHZhcl88bWF0Y2g+XG4gIG1hdGNoZXM/LmZvckVhY2goKG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UobWF0Y2gsIGA8JS0gdmFyXyR7aW5kZXggKyAxfSAlPmApO1xuICB9KTtcbiAgLy8gcmVwbGFjZSBtdXN0YWNoZSBzeW50YXggd2l0aCBFSlMgc3ludGF4XG4gIGNvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoL3t7XFxzKihbXFx3XFxzLV0rKVxccyp9fS9nLCAobWF0Y2gsIHAxKSA9PiBgPCUtICR7cDEudHJpbSgpLnJlcGxhY2UoL1tcXHMtXSsvZywgJ18nKX0gJT5gKTtcbiAgcmV0dXJuIGNvbnRlbnQ7XG59IiwgIntcbiAgXCJSRUFETUVcIjogXCIjIFNtYXJ0IFRlbXBsYXRlcyBmb3IgT2JzaWRpYW5cXG5cXG5TbWFydCBUZW1wbGF0ZXMgYWxsb3dzIHlvdSB0byBjcmVhdGUgYW5kIHVzZSBjb25maWd1cmFibGUgdGVtcGxhdGVzIHV0aWxpemluZyBTbWFydCBFbnZpcm9ubWVudHMuXFxuXFxuU21hcnQgVGVtcGxhdGVzIGlzIGEgY29tcGFuaW9uIHBsdWdpbiB0byBbU21hcnQgQ29ubmVjdGlvbnNdKGh0dHBzOi8vZ2l0aHViLmNvbS9icmlhbnBldHJvL29ic2lkaWFuLXNtYXJ0LWNvbm5lY3Rpb25zLyksIGEgcGx1Z2luIGZvciBPYnNpZGlhbiB0aGF0IGltcGxlbWVudHMgYSBTbWFydCBFbnZpcm9ubWVudCBmb3IgdXRpbGl6aW5nIEFJIHRvIGVuaGFuY2UgeW91ciBub3Rlcy5cXG5cXG4jIyBGZWF0dXJlc1xcblxcbkNyZWF0ZSBhbmQgdXNlIGN1c3RvbWl6YWJsZSB0ZW1wbGF0ZXMgd2l0aCBkeW5hbWljIHZhcmlhYmxlcy5cXG5cXG4tICoqQUktUG93ZXJlZCoqOiBMZXZlcmFnZSBBSSBtb2RlbHMgdG8gZ2VuZXJhdGUgY29udGVudCBiYXNlZCBvbiB5b3VyIHRlbXBsYXRlcywgdmFyaWFibGUgcHJvbXB0cywgYW5kIGN1cnJlbnQgY29udGV4dCAobm90ZSBvciBoaWdobGlnaHRlZCB0ZXh0KS5cXG4tICoqVmFyaWFibGUgUHJvbXB0cyoqOiBEZWZpbmUgcHJvbXB0cyBmb3IgZWFjaCB2YXJpYWJsZSBmb3IgbW9yZSBjb250cm9sIG92ZXIgY29udGVudCBnZW5lcmF0aW9uLlxcbi0gKipGbGV4aWJsZSBDb25maWd1cmF0aW9uKio6IENob29zZSB5b3VyIHByZWZlcnJlZCBBSSBtb2RlbCBwbGF0Zm9ybS5cXG4tICoqTWFudWFsIFByb21wdCBJbnB1dCoqOiBVc2UgYHt7IFxcXCJZb3VyIHByb21wdCBoZXJlXFxcIiB9fWAgc3ludGF4IGZvciBvbi10aGUtZmx5IGN1c3RvbSBwcm9tcHRzIHdpdGhpbiB0ZW1wbGF0ZXMuXFxuLSAqKkVKUyBTeW50YXggU3VwcG9ydCoqOiBVdGlsaXplIEVKUyBzeW50YXggZm9yIG1vcmUgYWR2YW5jZWQgdGVtcGxhdGUgbG9naWMgYW5kIGZvcm1hdHRpbmcuXFxuXFxuKk1vcmUgZmVhdHVyZXMgY29taW5nIHNvb24uLi4qOlxcbi0gSW50ZWdyYXRpb24gd2l0aCBbU21hcnQgTWVtb3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9Nb3NzeTEwMjIvU21hcnQtTWVtb3MpXFxuLSBJbnRlZ3JhdGlvbiB3aXRoIFNtYXJ0IENvbm5lY3Rpb25zIHRvIHJldHJpZXZlIGFkZGl0aW9uYWwgY29udGV4dFxcbi0gSW50ZWdyYXRpb24gd2l0aCBbU21hcnQgQ29ubmVjdGlvbnMgVmlzdWFsaXplcl0oaHR0cHM6Ly9naXRodWIuY29tL01vc3N5MTAyMi9TbWFydC1Db25uZWN0aW9ucy1WaXN1YWxpemVyKSBmb3IgdmlzdWFsIHNlbGVjdGlvbiBvZiBub2RlcyB0byB1c2UgYXMgY29udGV4dFxcblxcbiMjIEluc3RhbGxhdGlvblxcblxcbkN1cnJlbnRseSBpbiBiZXRhLiBSZXF1aXJlcyBpbnN0YWxsaW5nIG1hbnVhbGx5IG9yIHZpYSBCUkFULlxcblxcbioqU21hcnQgQ29ubmVjdGlvbnMgU3VwcG9ydGVycyoqOiBpbnN0YWxsIHVzaW5nIHRoZSBcXFwiRWFzeSBJbnN0YWxsXFxcIiBidXR0b24gaW4gdGhlIGVhcmx5LXJlbGVhc2UgKHZlcnNpb24gYDIuMmApIHBsdWdpbiBzZXR0aW5ncy5cXG5cXG4jIyBVc2FnZVxcblxcbjEuIFNldCB1cCB5b3VyIHByZWZlcnJlZCBBSSBtb2RlbCBwbGF0Zm9ybSBpbiB0aGUgcGx1Z2luIHNldHRpbmdzLlxcbjIuIENyZWF0ZSBzbWFydCB0ZW1wbGF0ZXMgaW4gdGhlIGRlc2lnbmF0ZWQgdGVtcGxhdGVzIGZvbGRlci5cXG4zLiBVc2UgdGhlIGNvbW1hbmQgcGFsZXR0ZSB0byBydW4geW91ciBzbWFydCB0ZW1wbGF0ZXMgb24geW91ciBub3RlcyBvciBzZWxlY3Rpb25zLlxcblxcbiMjIFVzaW5nIFRlbXBsYXRlc1xcbi0gQSBjb21tYW5kIGlzIGNyZWF0ZWQgZm9yIGVhY2ggdGVtcGxhdGUgaW4gdGhlIHRlbXBsYXRlcyBmb2xkZXIuXFxuLSBUaGUgY29tbWFuZCBpcyBydW4gb24gdGhlIGN1cnJlbnQgbm90ZSBvciBoaWdobGlnaHRlZCBzZWxlY3Rpb24gKGlmIGFueSkuXFxuLSBUaGUgdGVtcGxhdGUgaXMgcmVuZGVyZWQgYW5kIHRoZSByZXN1bHRpbmcgY29udGVudCBpcyBpbnNlcnRlZCBhdCB0aGUgY3VycmVudCBjdXJzb3IgbG9jYXRpb24uXFxuXFxuIyMgQ3JlYXRpbmcgVGVtcGxhdGVzXFxuXFxuMS4gTmF2aWdhdGUgdG8geW91ciBkZXNpZ25hdGVkIHRlbXBsYXRlcyBmb2xkZXIuXFxuMi4gQ3JlYXRlIGEgbmV3IE1hcmtkb3duIGZpbGUgZm9yIHlvdXIgdGVtcGxhdGUuXFxuMy4gVXNlIHNwZWNpYWwgc3ludGF4IHRvIGRlZmluZSBkeW5hbWljIHBhcnRzIG9mIHlvdXIgdGVtcGxhdGU6XFxuICAgLSBge3sgdmFyaWFibGVfbmFtZSB9fWA6IFNpbXBsZSBicmFja2V0IHN5bnRheCBmb3IgcHJlZGVmaW5lZCB2YXJpYWJsZXNcXG4gICAtIGB7eyBcXFwiWW91ciBjdXN0b20gcHJvbXB0IGhlcmVcXFwiIH19YDogTWFudWFsIHByb21wdCBpbnB1dCBzeW50YXhcXG4gICAtIGA8JS0gLi4uICU+YDogRUpTIHN5bnRheCBmb3IgYWR2YW5jZWQgbG9naWMgYW5kIGZvcm1hdHRpbmdcXG5cXG5FeGFtcGxlIHRlbXBsYXRlOlxcbmBgYG1hcmtkb3duXFxuIyBEZWZhdWx0IFNtYXJ0IFRlbXBsYXRlXFxuXFxuIyMjIFN1bW1hcnlcXG57eyBzdW1tYXJ5IH19IDwtIFNpbXBsZSBicmFja2V0IHN5bnRheFxcblxcbiMjIyBOb3Rlc1xcbnt7IG5vdGVzIH19XFxuXFxuIyMjIENoYXJ0XFxuPCUtICdgYGBtZXJtYWlkJyAlPiA8LSBFSlMgc3ludGF4IGlzIGFsc28gYXZhaWxhYmxlXFxue3sgbWVybWFpZCB9fVxcbjwlLSAnYGBgJyAlPlxcbmBgYFxcblxcbiMjIyBDdXN0b20gUHJvbXB0XFxue3sgXFxcIllvdXIgY3VzdG9tIHByb21wdCBoZXJlXFxcIiB9fSA8LSBNYW51YWwgcHJvbXB0IGlucHV0IHN5bnRheFxcblxcbiMjIFNldHRpbmdzXFxuIVtdKC4vYXNzZXRzL1NtYXJ0JTIwVGVtcGxhdGVzJTIwU2V0dGluZ3MucG5nKVxcblxcbiMjIyBNb2RlbCBQbGF0Zm9ybVxcblxcbkNob29zZSB5b3VyIHByZWZlcnJlZCBBSSBtb2RlbCBwbGF0Zm9ybSAoZS5nLiwgT3BlbkFJKSBhbmQgZW50ZXIgeW91ciBBUEkga2V5IGluIHRoZSBzZXR0aW5ncy5cXG5cXG4jIyMgVGVtcGxhdGVzIEZvbGRlclxcblxcblNwZWNpZnkgdGhlIGZvbGRlciB3aGVyZSB5b3VyIHNtYXJ0IHRlbXBsYXRlcyB3aWxsIGJlIHN0b3JlZC5cXG5cXG4jIyMgVmFyaWFibGUgUHJvbXB0c1xcblxcbkN1c3RvbWl6ZSB0aGUgcHJvbXB0cyBmb3IgdGVtcGxhdGUgdmFyaWFibGVzIGxpa2Ugc3VtbWFyeSwgbm90ZXMsIGFuZCBtZXJtYWlkIGNoYXJ0cy5cXG5cXG4jIyBIb3cgaXQgV29ya3NcXG5cXG5gYGBtZXJtYWlkXFxuZ3JhcGggVERcXG4gIEFbU21hcnQgVGVtcGxhdGVdIC0tPnxDb250YWluc3wgQihWYXJpYWJsZSBQbGFjZWhvbGRlcnMpXFxuICBDW3Zhcl9wcm9tcHRzXSAtLT58RGVmaW5lc3wgRChWYXJpYWJsZSBQcm9tcHRzKVxcbiAgRVtDdXJyZW50IENvbnRleHRdIC0tPnxQcm92aWRlc3wgRihDb250ZW50IGZvciBQcm9jZXNzaW5nKVxcbiAgQiAtLT4gR3tTbWFydCBUZW1wbGF0ZXMgUGx1Z2lufVxcbiAgRCAtLT4gR1xcbiAgRiAtLT4gR1xcbiAgRyAtLT58UHJvY2Vzc2VzfCBIKEFJIE1vZGVsKVxcbiAgSCAtLT58R2VuZXJhdGVzfCBJKFZhcmlhYmxlIENvbnRlbnQpXFxuICBJIC0tPiBKe1RlbXBsYXRlIFJlbmRlcmluZ31cXG4gIEEgLS0+IEpcXG4gIEogLS0+fFByb2R1Y2VzfCBLW0ZpbmFsIE91dHB1dF1cXG5gYGBcXG5cXG4jIyBBYm91dFxcblxcbkNyZWF0ZWQgYnkgW1x1RDgzQ1x1REYzNCBCcmlhbl0oaHR0cHM6Ly94LmNvbS93ZmhicmlhbikgYXMgYSBjb21wYW5pb24gcGx1Z2luIHRvIFtTbWFydCBDb25uZWN0aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL2JyaWFucGV0cm8vb2JzaWRpYW4tc21hcnQtY29ubmVjdGlvbnMvKSwgYSBwbHVnaW4gZm9yIE9ic2lkaWFuIHRoYXQgaW1wbGVtZW50cyBhIFNtYXJ0IEVudmlyb25tZW50IGZvciB1dGlsaXppbmcgQUkgdG8gZW5oYW5jZSB5b3VyIG5vdGVzLlxcblxcbiMjIyBEZXZlbG9wbWVudFxcblxcblVzZXMgW0pTQnJhaW5zXShodHRwczovL2pzYnJhaW5zLm9yZy8pIHRvIG1pbmltaXplIGRlcGVuZGVuY2llcyBhbmQgcHJvdmlkZSBhbiBlYXNpbHkgYWRhcHRhYmxlIGFyY2hpdGVjdHVyZSB0aGF0IHN1cHBvcnRzIG5ldyBtb2RlbHMgYW5kIHBsYXRmb3Jtcy5cXG5cXG4tIFtTbWFydCBUZW1wbGF0ZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9icmlhbnBldHJvL2pzYnJhaW5zL3RyZWUvbWFpbi9zbWFydC10ZW1wbGF0ZXMpXFxuLSBbU21hcnQgQ2hhdCBNb2RlbF0oaHR0cHM6Ly9naXRodWIuY29tL2JyaWFucGV0cm8vanNicmFpbnMvdHJlZS9tYWluL3NtYXJ0LWNoYXQtbW9kZWwpXFxuXFxuXCIsXG4gIFwic21hcnRfdGVtcGxhdGVzX21vZGVsX3NldHRpbmdzXCI6IFwiICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nLWNvbXBvbmVudFxcXCJcXG4gICAgZGF0YS1uYW1lPVxcXCJNb2RlbCBwbGF0Zm9ybVxcXCJcXG4gICAgZGF0YS1zZXR0aW5nPVxcXCJjaGF0X21vZGVsX3BsYXRmb3JtX2tleVxcXCJcXG4gICAgZGF0YS10eXBlPVxcXCJkcm9wZG93blxcXCJcXG4gICAgZGF0YS1kZXNjcmlwdGlvbj1cXFwiU2VsZWN0IGEgbW9kZWwgcGxhdGZvcm0gdG8gdXNlIHdpdGggU21hcnQgQ2hhdC5cXFwiXFxuICAgIGRhdGEtY2FsbGJhY2s9XFxcImNoYW5nZWRfc21hcnRfY2hhdF9wbGF0Zm9ybVxcXCJcXG4gICAgPCUtIGNoYXRfcGxhdGZvcm1zLm1hcCgocGxhdGZvcm0sIGkpID0+IGBkYXRhLW9wdGlvbi0ke2kgKyAxfT1cXFwiJHtwbGF0Zm9ybS5rZXl9fCR7cGxhdGZvcm0uZGVzY3JpcHRpb259XFxcImApLmpvaW4oJ1xcXFxuJykgJT5cXG4gID48L2Rpdj5cXG4gIDwlIGlmKGNoYXRfcGxhdGZvcm0/LmZldGNoX21vZGVscykgeyAlPlxcbiAgICA8JSBpZihzZXR0aW5nc1tzZXR0aW5ncy5jaGF0X21vZGVsX3BsYXRmb3JtX2tleV0/LmFwaV9rZXkpIHsgJT5cXG4gICAgICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nLWNvbXBvbmVudFxcXCJcXG4gICAgICAgIGRhdGEtbmFtZT1cXFwiTW9kZWwgbmFtZVxcXCJcXG4gICAgICAgIGRhdGEtdHlwZT1cXFwiZHJvcGRvd25cXFwiXFxuICAgICAgICBkYXRhLXNldHRpbmc9XFxcIjwlPSBzZXR0aW5ncy5jaGF0X21vZGVsX3BsYXRmb3JtX2tleSAlPi5tb2RlbF9uYW1lXFxcIlxcbiAgICAgICAgPCUtIHBsYXRmb3JtX2NoYXRfbW9kZWxzLm1hcCgobW9kZWwsIGkpID0+IGBkYXRhLW9wdGlvbi0ke2l9PVxcXCIke21vZGVsLmtleX18JHttb2RlbC5tb2RlbF9uYW1lfSAoJHttb2RlbC5kZXNjcmlwdGlvbn0pXFxcImApLmpvaW4oJ1xcXFxuJykgJT5cXG4gICAgICA+PC9kaXY+XFxuICAgIDwlIH0gJT5cXG4gICAgPCUgaWYoIXBsYXRmb3JtX2NoYXRfbW9kZWxzLmxlbmd0aCkgeyAlPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmctY29tcG9uZW50XFxcIlxcbiAgICAgICAgZGF0YS1uYW1lPVxcXCJSZWZyZXNoIG1vZGVscyBsaXN0XFxcIlxcbiAgICAgICAgZGF0YS10eXBlPVxcXCJidXR0b25cXFwiXFxuICAgICAgICBkYXRhLWNhbGxiYWNrPVxcXCJjaGFuZ2VkX3NtYXJ0X2NoYXRfcGxhdGZvcm1cXFwiXFxuICAgICAgPjwvZGl2PlxcbiAgICA8JSB9ICU+XFxuICAgIDwlIGlmKGNhbl9pbXBvcnRfZnJvbV9zbWFydF9jb25uZWN0aW9ucykgeyAlPlxcbiAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmctY29tcG9uZW50XFxcIlxcbiAgICAgICAgZGF0YS1uYW1lPVxcXCJJbXBvcnQgbW9kZWwgY29uZmlnIGZyb20gU21hcnQgQ29ubmVjdGlvbnNcXFwiXFxuICAgICAgICBkYXRhLXR5cGU9XFxcImJ1dHRvblxcXCJcXG4gICAgICAgIGRhdGEtY2FsbGJhY2s9XFxcImltcG9ydF9tb2RlbF9jb25maWdfZnJvbV9zbWFydF9jb25uZWN0aW9uc1xcXCJcXG4gICAgICA+PC9kaXY+XFxuICAgIDwlIH0gJT5cXG4gICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZy1jb21wb25lbnRcXFwiXFxuICAgICAgZGF0YS1uYW1lPVxcXCI8JT0gY2hhdF9wbGF0Zm9ybS5kZXNjcmlwdGlvbiAlPiBBUEkga2V5XFxcIlxcbiAgICAgIGRhdGEtdHlwZT1cXFwicGFzc3dvcmRcXFwiXFxuICAgICAgZGF0YS1zZXR0aW5nPVxcXCI8JT0gc2V0dGluZ3MuY2hhdF9tb2RlbF9wbGF0Zm9ybV9rZXkgJT4uYXBpX2tleVxcXCJcXG4gICAgICA8JSBpZihjaGF0X3BsYXRmb3JtLnNpZ251cF91cmwpIHsgJT5cXG4gICAgICAgIGRhdGEtZGVzY3JpcHRpb249XFxcIjxhIGhyZWY9JzwlPSBjaGF0X3BsYXRmb3JtLnNpZ251cF91cmwgJT4nPkdldCBBUEkgS2V5PC9hPiBmb3IgPCU9IGNoYXRfcGxhdGZvcm0uZGVzY3JpcHRpb24gJT4uXFxcIlxcbiAgICAgIDwlIH0gZWxzZSB7ICU+XFxuICAgICAgICBkYXRhLWRlc2NyaXB0aW9uPVxcXCJBUEkgS2V5IGZvciA8JT0gY2hhdF9wbGF0Zm9ybS5kZXNjcmlwdGlvbiAlPi5cXFwiXFxuICAgICAgPCUgfSAlPlxcbiAgICAgIGRhdGEtcGxhY2Vob2xkZXI9XFxcIkVudGVyIGFuIEFQSSBrZXlcXFwiXFxuICAgICAgZGF0YS1idXR0b249XFxcIlNhdmVcXFwiXFxuICAgICAgZGF0YS1jYWxsYmFjaz1cXFwiY2hhbmdlZF9zbWFydF9jaGF0X3BsYXRmb3JtXFxcIlxcbiAgICA+PC9kaXY+XFxuICA8JSB9ICU+XCIsXG4gIFwic21hcnRfdGVtcGxhdGVzX3NldHRpbmdzXCI6IFwiPGRpdiBpZD1cXFwic21hcnQtdGVtcGxhdGVzLXNldHRpbmdzXFxcIj5cXG4gIDxoMj5BSSBtb2RlbCBzZXR0aW5nczwvaDI+XFxuICA8ZGl2IGNsYXNzPVxcXCJzbWFydC10ZW1wbGF0ZXMtbW9kZWwtc2V0dGluZ3NcXFwiPlxcbiAgICA8JSBpZihtb2RlbF9zZXR0aW5ncykgeyAlPlxcbiAgICAgIDwlLSBtb2RlbF9zZXR0aW5ncyAlPlxcbiAgICA8JSB9IGVsc2UgeyAlPlxcbiAgICAgIExvYWRpbmcgbW9kZWwgc2V0dGluZ3MuLi5cXG4gICAgPCUgfSAlPlxcbiAgPC9kaXY+XFxuICA8aDI+U21hcnQgVGVtcGxhdGVzIGZvbGRlcjwvaDI+XFxuICA8ZGl2IGNsYXNzPVxcXCJzZXR0aW5nLWNvbXBvbmVudFxcXCJcXG4gICAgZGF0YS1uYW1lPVxcXCJUZW1wbGF0ZXMgRm9sZGVyXFxcIlxcbiAgICBkYXRhLXNldHRpbmc9XFxcInRlbXBsYXRlc19mb2xkZXJcXFwiXFxuICAgIGRhdGEtdHlwZT1cXFwidGV4dFxcXCJcXG4gID48L2Rpdj5cXG4gIDxoMj5Db25maWd1cmUgdmFyaWFibGUgcHJvbXB0czwvaDI+XFxuICA8ZGl2IGlkPVxcXCJzbWFydC10ZW1wbGF0ZXMtdmFyLXByb21wdHNcXFwiPlxcbiAgICA8JSB2YXJfcHJvbXB0cy5mb3JFYWNoKCh2YXJfcHJvbXB0LCBpKSA9PiB7ICU+XFxuICAgICAgPCUgaWYoaSA9PT0gMCkgeyAlPlxcbiAgICAgICAgPGgzPkFjdGl2ZTwvaDM+XFxuICAgICAgPCUgfSBlbHNlIGlmKGkgPiAwICYmIHZhcl9wcm9tcHRzW2ktMV0uYWN0aXZlICE9PSB2YXJfcHJvbXB0LmFjdGl2ZSkgeyAlPlxcbiAgICAgICAgPGgzPkluYWN0aXZlPC9oMz5cXG4gICAgICA8JSB9ICU+XFxuICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZy1jb21wb25lbnRcXFwiXFxuICAgICAgICBkYXRhLW5hbWU9XFxcIjwlPSB2YXJfcHJvbXB0Lm5hbWUgJT5cXFwiXFxuICAgICAgICBkYXRhLXR5cGU9XFxcInRleHRhcmVhXFxcIlxcbiAgICAgICAgZGF0YS1zZXR0aW5nPVxcXCJ2YXJfcHJvbXB0cy48JT0gdmFyX3Byb21wdC5uYW1lICU+LnByb21wdFxcXCJcXG4gICAgICAgIGRhdGEtbWF4LWxlbmd0aD1cXFwiMzAwXFxcIlxcbiAgICAgID48L2Rpdj5cXG4gICAgICA8JSAvLyBpZiAhdmFyX3Byb21wdC5hY3RpdmUsIGFkZCBhIGJ1dHRvbiB0byByZW1vdmUgaXQgJT5cXG4gICAgICA8JSBpZighdmFyX3Byb21wdC5hY3RpdmUpIHsgJT5cXG4gICAgICAgIDxkaXYgY2xhc3M9XFxcInNldHRpbmctY29tcG9uZW50XFxcIlxcbiAgICAgICAgICBkYXRhLW5hbWU9XFxcIlJlbW92ZVxcXCJcXG4gICAgICAgICAgZGF0YS12YWx1ZT1cXFwiPCU9IHZhcl9wcm9tcHQubmFtZSAlPlxcXCJcXG4gICAgICAgICAgZGF0YS10eXBlPVxcXCJidXR0b25cXFwiXFxuICAgICAgICAgIGRhdGEtY2FsbGJhY2s9XFxcInJlbW92ZV92YXJfcHJvbXB0XFxcIlxcbiAgICAgICAgPjwvZGl2PlxcbiAgICAgIDwlIH0gJT5cXG4gICAgPCUgfSkgJT5cXG4gIDwvZGl2PlxcbjwvZGl2PlwiXG59IiwgIntcbiAgXCJvdmVydmlld1wiOiBcIiMjIyBTdW1tYXJ5XFxue3sgc3VtbWFyeSB9fVxcblxcbiMjIyBLZXkgUG9pbnRzXFxue3sga2V5IHBvaW50cyB9fVxcblxcbiMjIyBDaGFydFxcbjwlLSAnYGBgbWVybWFpZCcgJT5cXG57eyBtZXJtYWlkIH19XFxuPCUtICdgYGAnICU+XFxuXCIsXG4gIFwidGFnc1wiOiBcIi0tLVxcbnRhZ3NfYXNfY29udGV4dDogXFxcInRydWVcXFwiXFxuc3lzdGVtX3Byb21wdDogVGFncyBzaG91bGQgYmUgb3V0cHV0IGluIG1hcmtkb3duIGJ1bGxldCBsaXN0IGZvcm1hdC4gSW5jbHVkZSB0aGUgcmVhc29uIGZvciBlYWNoIHRhZyBpbiBwYXJlbnRoZXNlcy5cXG4tLS1cXG4jIyMjIyByZWNvbW1lbmRlZCBleGlzdGluZyB0YWdzXFxue3sgVEFHUyBFWElTVElORyB9fVxcblxcbiMjIyMjIHJlY29tbWVuZGVkIG5ldyB0YWdzXFxue3sgVEFHUyBORVcgfX1cXG5cIlxufSIsICJ7XG4gIFwidmFyX3Byb21wdHNcIjoge1xuICAgIFwic3VtbWFyeVwiOiB7XG4gICAgICBcInByb21wdFwiOiBcIkEgc3VtbWFyeSBwYXJhZ3JhcGggYWJvdXQgdGhlIGNvbnRlbnQuXCJcbiAgICB9LFxuICAgIFwia2V5X3BvaW50c1wiOiB7XG4gICAgICBcInByb21wdFwiOiBcIkNvbmNpc2Ugbm90ZXMgYWJvdXQgdGhlIGNvbnRlbnQuXCJcbiAgICB9LFxuICAgIFwibWVybWFpZFwiOiB7XG4gICAgICBcInByb21wdFwiOiBcIk1lcm1haWQgY2hhcnQgcmVwcmVzZW50YXRpb24gb2YgdGhlIGNvbnRlbnQuIEV4LiBncmFwaCBURFxcbkEgLS0+IEJcXG5CIC0tPiBDXCJcbiAgICB9LFxuICAgIFwiVEFHU19FWElTVElOR1wiOiB7XG4gICAgICBcInByb21wdFwiOiBcIkxpc3QgMyBleGlzdGluZyB0YWdzIHRoYXQgbWlnaHQgYmUgbW9zdCByZWxldmFudCB0byB0aGUgY29udGVudC5cIlxuICAgIH0sXG4gICAgXCJUQUdTX05FV1wiOiB7XG4gICAgICBcInByb21wdFwiOiBcIkxpc3QgMyBuZXcgdGFncyB0aGF0IG1pZ2h0IGJlIG1vc3QgcmVsZXZhbnQgdG8gdGhlIGNvbnRlbnQuXCJcbiAgICB9XG4gIH1cbn0iLCAiLy8gQ29weXJpZ2h0IChjKSBCcmlhbiBKb3NlcGggUGV0cm9cblxuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG4vLyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXG4vLyBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cbi8vIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcblxuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbi8vIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuLy8gRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORFxuLy8gTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRVxuLy8gTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTlxuLy8gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OXG4vLyBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuY2xhc3MgU21hcnRFbnYge1xuICBjb25zdHJ1Y3RvcihtYWluLCBvcHRzPXt9KSB7XG4gICAgY29uc3QgbWFpbl9uYW1lID0gY2FtZWxfY2FzZV90b19zbmFrZV9jYXNlKG1haW4uY29uc3RydWN0b3IubmFtZSk7XG4gICAgdGhpc1ttYWluX25hbWVdID0gbWFpbjsgLy8gZXguIHNtYXJ0X2Nvbm5lY3Rpb25zX3BsdWdpblxuICAgIHRoaXMubWFpbnMgPSBbbWFpbl9uYW1lXTtcbiAgICB0aGlzLm1haW4gPSBtYWluOyAvLyBERVBSRUNBVEVEIGluIGZhdm9yIG9mIG1haW4gY2xhc3MgbmFtZSBjb252ZXJ0ZWQgdG8gc25ha2UgY2FzZVxuICAgIHRoaXMucGx1Z2luID0gdGhpcy5tYWluOyAvLyBERVBSRUNBVEVEIGluIGZhdm9yIG9mIG1haW5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdHMpO1xuICB9XG4gIHN0YXRpYyBjcmVhdGUobWFpbiwgb3B0cz17fSkge1xuICAgIGNvbnN0IGdsb2JhbF9yZWYgPSBvcHRzLmdsb2JhbF9yZWYgfHwgd2luZG93IHx8IGdsb2JhbDtcbiAgICBjb25zdCBleGlzdGluZ19zbWFydF9lbnYgPSBnbG9iYWxfcmVmLnNtYXJ0X2VudjtcbiAgICBpZihleGlzdGluZ19zbWFydF9lbnYpIHtcbiAgICAgIGNvbnN0IG1haW5fbmFtZSA9IGNhbWVsX2Nhc2VfdG9fc25ha2VfY2FzZShtYWluLmNvbnN0cnVjdG9yLm5hbWUpO1xuICAgICAgZXhpc3Rpbmdfc21hcnRfZW52W21haW5fbmFtZV0gPSBtYWluO1xuICAgICAgZXhpc3Rpbmdfc21hcnRfZW52Lm1haW5zLnB1c2gobWFpbl9uYW1lKTtcbiAgICAgIE9iamVjdC5rZXlzKG9wdHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYodHlwZW9mIG9wdHNba2V5XSA9PT0gJ29iamVjdCcpe1xuICAgICAgICAgIGlmKEFycmF5LmlzQXJyYXkob3B0c1trZXldKSl7XG4gICAgICAgICAgICBleGlzdGluZ19zbWFydF9lbnZba2V5XSA9IFtcbiAgICAgICAgICAgICAgLi4uKGV4aXN0aW5nX3NtYXJ0X2VudltrZXldIHx8IFtdKSxcbiAgICAgICAgICAgICAgLi4ub3B0c1trZXldXG4gICAgICAgICAgICBdO1xuICAgICAgICAgIH0gZWxzZSBpZihvcHRzW2tleV0gIT09IG51bGwpIHtcbiAgICAgICAgICAgIGV4aXN0aW5nX3NtYXJ0X2VudltrZXldID0ge1xuICAgICAgICAgICAgICAuLi4oZXhpc3Rpbmdfc21hcnRfZW52W2tleV0gfHwge30pLFxuICAgICAgICAgICAgICAuLi5vcHRzW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYoZXhpc3Rpbmdfc21hcnRfZW52W2tleV0pIGNvbnNvbGUud2FybihgU21hcnRFbnY6IE92ZXJ3cml0aW5nIGV4aXN0aW5nIHByb3BlcnR5ICR7a2V5fSB3aXRoICR7b3B0c1trZXldfWApO1xuICAgICAgICAgIGV4aXN0aW5nX3NtYXJ0X2VudltrZXldID0gb3B0c1trZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGdsb2JhbF9yZWYuc21hcnRfZW52ID0gZXhpc3Rpbmdfc21hcnRfZW52O1xuICAgIH1lbHNlIHtcbiAgICAgIGdsb2JhbF9yZWYuc21hcnRfZW52ID0gbmV3IHRoaXMobWFpbiwgb3B0cyk7XG4gICAgfVxuICAgIG1haW4uZW52ID0gZ2xvYmFsX3JlZi5zbWFydF9lbnY7XG4gICAgcmV0dXJuIGdsb2JhbF9yZWYuc21hcnRfZW52O1xuICB9XG4gIGdldCBzZXR0aW5ncygpIHtcbiAgICBjb25zdCBzZXR0aW5ncyA9IHt9O1xuICAgIHRoaXMubWFpbnMuZm9yRWFjaChtYWluID0+IHtcbiAgICAgIGlmKCFzZXR0aW5nc1ttYWluXSkgc2V0dGluZ3NbbWFpbl0gPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKHRoaXNbbWFpbl0uc2V0dGluZ3MgfHwge30pLmZvckVhY2goc2V0dGluZyA9PiB7XG4gICAgICAgIHNldHRpbmdzW21haW5dW3NldHRpbmddID0gdGhpc1ttYWluXS5zZXR0aW5nc1tzZXR0aW5nXTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBzZXR0aW5ncztcbiAgfVxufVxuZXhwb3J0IHsgU21hcnRFbnYgfTtcblxuZnVuY3Rpb24gY2FtZWxfY2FzZV90b19zbmFrZV9jYXNlKHN0cikge1xuICBjb25zdCByZXN1bHQgPSBzdHJcbiAgICAucmVwbGFjZSgvKFtBLVpdKS9nLCAobWF0Y2gpID0+IGBfJHttYXRjaC50b0xvd2VyQ2FzZSgpfWApXG4gICAgLnJlcGxhY2UoL15fLywgJycpIC8vIHJlbW92ZSBsZWFkaW5nIHVuZGVyc2NvcmVcbiAgO1xuICByZXR1cm4gcmVzdWx0O1xufSIsICIvLyBDb3B5cmlnaHQgKGMpIEJyaWFuIEpvc2VwaCBQZXRyb1xuXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcbi8vIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbi8vIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xuLy8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuLy8gaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXG4vLyBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EXG4vLyBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFXG4vLyBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OXG4vLyBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT05cbi8vIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuaW1wb3J0IGVqcyBmcm9tIFwiLi9lanMubWluLmNqc1wiO1xuY2xhc3MgU21hcnRTZXR0aW5ncyB7XG4gIGNvbnN0cnVjdG9yKGVudiwgY29udGFpbmVyLCBvcHRzID0geyB0ZW1wbGF0ZV9uYW1lOiBcInNtYXJ0X3NldHRpbmdzXCIgfSkge1xuICAgIHRoaXMuZW52ID0gZW52O1xuICAgIHRoaXMubWFpbiA9IG9wdHMubWFpbiB8fCB0aGlzLmVudi5wbHVnaW47IC8vIERFUFJFQ0FURUQgaW4gZmF2b3Igb2Ygc25ha2VfY2FzZSBuYW1lIG9mIHBsdWdpbiBjbGFzc1xuICAgIHRoaXMucGx1Z2luID0gdGhpcy5tYWluOyAvLyBERVBSRUNBVEVEIGluIGZhdm9yIG9mIG1haW5cbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICBpZih0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpIG9wdHMgPSB7IHRlbXBsYXRlX25hbWU6IG9wdHMgfTsgLy8gREVQUkVDQVRFRCBoYW5kbGluZ1xuICAgIHRoaXMudGVtcGxhdGVfbmFtZSA9IG9wdHMudGVtcGxhdGVfbmFtZTtcbiAgICB0aGlzLmVqcyA9IHRoaXMuZW52LmVqcyB8fCBlanM7XG4gICAgdGhpcy52aWV3cyA9IG9wdHMudmlld3MgfHwgdGhpcy5lbnYudmlld3M7XG4gICAgdGhpcy50ZW1wbGF0ZXMgPSB0aGlzLmVudi50ZW1wbGF0ZXM7IC8vIERFUFJFQ0FURUQgaW4gZmF2b3Igb2Ygdmlld3NcbiAgfVxuICBnZXQgc2V0dGluZ3MoKSB7IHJldHVybiB0aGlzLm1haW4uc2V0dGluZ3M7IH1cbiAgc2V0IHNldHRpbmdzKHNldHRpbmdzKSB7IHRoaXMubWFpbi5zZXR0aW5ncyA9IHNldHRpbmdzOyB9XG4gIGFzeW5jIHJlbmRlcigpIHtcbiAgICBjb25zdCB2aWV3X2RhdGEgPSAodHlwZW9mIHRoaXMuZ2V0X3ZpZXdfZGF0YSA9PT0gXCJmdW5jdGlvblwiKSA/IGF3YWl0IHRoaXMuZ2V0X3ZpZXdfZGF0YSgpIDogdGhpcy52aWV3X2RhdGE7XG4gICAgdGhpcy5yZW5kZXJfdGVtcGxhdGUodmlld19kYXRhKTtcbiAgICB0aGlzLnJlbmRlcl9jb21wb25lbnRzKCk7XG4gIH1cbiAgcmVuZGVyX3RlbXBsYXRlKHZpZXdfZGF0YSA9IG51bGwpIHtcbiAgICBpZiAoIXRoaXMudGVtcGxhdGUpIHRocm93IG5ldyBFcnJvcihgU2V0dGluZ3MgdGVtcGxhdGUgbm90IGZvdW5kLmApO1xuICAgIHRoaXMuY29udGFpbmVyLmVtcHR5KCk7XG4gICAgdGhpcy5jb250YWluZXIuaW5uZXJIVE1MID0gdGhpcy5lanMucmVuZGVyKHRoaXMudGVtcGxhdGUsIHZpZXdfZGF0YSB8fCB0aGlzLnZpZXdfZGF0YSwgeyBjb250ZXh0OiB0aGlzIH0pO1xuICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyZWQgdGVtcGxhdGVcIik7XG4gIH1cbiAgYXN5bmMgdXBkYXRlKHNldHRpbmcsIHZhbHVlKSB7XG4gICAgY29uc29sZS5sb2coXCJzYXZpbmcgc2V0dGluZzogXCIgKyBzZXR0aW5nKTtcbiAgICBsZXQgc2V0dGluZ3MgPSB7Li4udGhpcy5zZXR0aW5nc307XG4gICAgaWYgKHNldHRpbmcuaW5jbHVkZXMoXCIuXCIpKSB7XG4gICAgICBsZXQgcGFydHMgPSBzZXR0aW5nLnNwbGl0KFwiLlwiKTtcbiAgICAgIGxldCBvYmogPSBzZXR0aW5ncztcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGlmICghb2JqW3BhcnRzW2ldXSkgb2JqW3BhcnRzW2ldXSA9IHt9O1xuICAgICAgICBvYmogPSBvYmpbcGFydHNbaV1dO1xuICAgICAgfVxuICAgICAgb2JqW3BhcnRzW3BhcnRzLmxlbmd0aCAtIDFdXSA9ICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldHRpbmdzW3NldHRpbmddID0gKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikgPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcbiAgICB9XG4gICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgIGF3YWl0IHRoaXMubWFpbi5zYXZlX3NldHRpbmdzKHRydWUpO1xuICAgIGNvbnNvbGUubG9nKFwic2F2ZWQgc2V0dGluZ3NcIik7XG4gICAgLy8gY29uc29sZS5sb2codGhpcy5zZXR0aW5ncyk7XG4gIH1cbiAgcmVuZGVyX2NvbXBvbmVudHMoKSB7XG4gICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJpbmcgY29tcG9uZW50c1wiKTtcbiAgICBpZighdGhpcy5tYWluLm9ic2lkaWFuLlNldHRpbmcpIGNvbnNvbGUubG9nKFwibWlzc2luZyBPYnNpZGlhblwiKTtcbiAgICB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFwiLnNldHRpbmctY29tcG9uZW50XCIpLmZvckVhY2goZWxtID0+IHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwicmVuZGVyaW5nIGNvbXBvbmVudDogXCIgKyBlbG0uZGF0YXNldC5zZXR0aW5nKTtcbiAgICAgIGNvbnN0IHNldHRpbmdfZWxtID0gbmV3IHRoaXMubWFpbi5vYnNpZGlhbi5TZXR0aW5nKGVsbSk7XG4gICAgICBpZiAoZWxtLmRhdGFzZXQubmFtZSkgc2V0dGluZ19lbG0uc2V0TmFtZShlbG0uZGF0YXNldC5uYW1lKTtcbiAgICAgIGlmIChlbG0uZGF0YXNldC5kZXNjcmlwdGlvbikgc2V0dGluZ19lbG0uZGVzY0VsLmlubmVySFRNTCA9IGVsbS5kYXRhc2V0LmRlc2NyaXB0aW9uO1xuICAgICAgY29uc3Qgc2V0dGluZyA9IGVsbS5kYXRhc2V0LnNldHRpbmc7XG4gICAgICBpZiAoZWxtLmRhdGFzZXQudHlwZSA9PT0gXCJ0ZXh0XCIpIHtcbiAgICAgICAgc2V0dGluZ19lbG0uYWRkVGV4dCh0ZXh0ID0+IHtcbiAgICAgICAgICB0ZXh0LnNldFBsYWNlaG9sZGVyKGVsbS5kYXRhc2V0LnBsYWNlaG9sZGVyIHx8IFwiXCIpO1xuICAgICAgICAgIHRleHQuc2V0VmFsdWUodGhpcy5nZXRfc2V0dGluZyhzZXR0aW5nKSk7XG4gICAgICAgICAgbGV0IGRlYm91bmNlVGltZXI7XG4gICAgICAgICAgaWYgKGVsbS5kYXRhc2V0LmJ1dHRvbikge1xuICAgICAgICAgICAgc2V0dGluZ19lbG0uYWRkQnV0dG9uKGJ1dHRvbiA9PiB7XG4gICAgICAgICAgICAgIGJ1dHRvbi5zZXRCdXR0b25UZXh0KGVsbS5kYXRhc2V0LmJ1dHRvbik7XG4gICAgICAgICAgICAgIGJ1dHRvbi5vbkNsaWNrKGFzeW5jICgpID0+IHRoaXMuaGFuZGxlX29uX2NoYW5nZShzZXR0aW5nLCB0ZXh0LmdldFZhbHVlKCksIGVsbSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dChkZWJvdW5jZVRpbWVyKTtcbiAgICAgICAgICAgICAgZGVib3VuY2VUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5oYW5kbGVfb25fY2hhbmdlKHNldHRpbmcsIHZhbHVlLCBlbG0pLCAyMDAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGVsbS5kYXRhc2V0LnR5cGUgPT09IFwicGFzc3dvcmRcIikge1xuICAgICAgICBzZXR0aW5nX2VsbS5hZGRUZXh0KHRleHQgPT4ge1xuICAgICAgICAgIHRleHQuaW5wdXRFbC50eXBlID0gXCJwYXNzd29yZFwiO1xuICAgICAgICAgIHRleHQuc2V0UGxhY2Vob2xkZXIoZWxtLmRhdGFzZXQucGxhY2Vob2xkZXIgfHwgXCJcIik7XG4gICAgICAgICAgY29uc3Qgc2V0dGluZ192YWx1ZSA9IHRoaXMuZ2V0X3NldHRpbmcoc2V0dGluZyk7XG4gICAgICAgICAgaWYgKHNldHRpbmdfdmFsdWUpIHRleHQuc2V0VmFsdWUoc2V0dGluZ192YWx1ZSk7XG4gICAgICAgICAgdGV4dC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHRoaXMuaGFuZGxlX29uX2NoYW5nZShzZXR0aW5nLCB2YWx1ZSwgZWxtKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChlbG0uZGF0YXNldC50eXBlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHNldHRpbmdfZWxtLmFkZFRleHQobnVtYmVyID0+IHtcbiAgICAgICAgICBudW1iZXIuaW5wdXRFbC50eXBlID0gXCJudW1iZXJcIjtcbiAgICAgICAgICBudW1iZXIuc2V0UGxhY2Vob2xkZXIoZWxtLmRhdGFzZXQucGxhY2Vob2xkZXIgfHwgXCJcIik7XG4gICAgICAgICAgbnVtYmVyLmlucHV0RWwudmFsdWUgPSBwYXJzZUludCh0aGlzLmdldF9zZXR0aW5nKHNldHRpbmcpKTtcbiAgICAgICAgICBudW1iZXIuaW5wdXRFbC5taW4gPSBlbG0uZGF0YXNldC5taW4gfHwgMDtcbiAgICAgICAgICBpZiAoZWxtLmRhdGFzZXQubWF4KSBudW1iZXIuaW5wdXRFbC5tYXggPSBlbG0uZGF0YXNldC5tYXg7XG4gICAgICAgICAgbGV0IGRlYm91bmNlVGltZXI7XG4gICAgICAgICAgbnVtYmVyLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGRlYm91bmNlVGltZXIpO1xuICAgICAgICAgICAgZGVib3VuY2VUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4gdGhpcy5oYW5kbGVfb25fY2hhbmdlKHNldHRpbmcsIHBhcnNlSW50KHZhbHVlKSwgZWxtKSwgMjAwMCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChlbG0uZGF0YXNldC50eXBlID09PSBcImRyb3Bkb3duXCIpIHtcbiAgICAgICAgc2V0dGluZ19lbG0uYWRkRHJvcGRvd24oZHJvcGRvd24gPT4ge1xuICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGVsbS5kYXRhc2V0KVxuICAgICAgICAgICAgLmZpbHRlcigoW2ssIHZdKSA9PiBrLnN0YXJ0c1dpdGgoXCJvcHRpb25cIikpXG4gICAgICAgICAgICAuZm9yRWFjaCgoW2ssIHZdKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IFt2YWx1ZSwgbmFtZV0gPSB2LnNwbGl0KFwifFwiKTtcbiAgICAgICAgICAgICAgZHJvcGRvd24uYWRkT3B0aW9uKHZhbHVlLCBuYW1lIHx8IHZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIGRyb3Bkb3duLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4gdGhpcy5oYW5kbGVfb25fY2hhbmdlKHNldHRpbmcsIHZhbHVlLCBlbG0pKTtcbiAgICAgICAgICBkcm9wZG93bi5zZXRWYWx1ZSh0aGlzLmdldF9zZXR0aW5nKHNldHRpbmcpKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGVsbS5kYXRhc2V0LnR5cGUgPT09IFwiYnV0dG9uXCIpIHtcbiAgICAgICAgc2V0dGluZ19lbG0uYWRkQnV0dG9uKGJ1dHRvbiA9PiB7XG4gICAgICAgICAgYnV0dG9uLnNldEJ1dHRvblRleHQoZWxtLmRhdGFzZXQuYnRuVGV4dCB8fCBlbG0uZGF0YXNldC5uYW1lKTtcbiAgICAgICAgICBidXR0b24ub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoZWxtLmRhdGFzZXQuY29uZmlybSkge1xuICAgICAgICAgICAgICBjb25zdCBjb25maXJtYXRpb25fbWVzc2FnZSA9IGVsbS5kYXRhc2V0LmNvbmZpcm07XG4gICAgICAgICAgICAgIGlmICghY29uZmlybShjb25maXJtYXRpb25fbWVzc2FnZSkpIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbG0uZGF0YXNldC5ocmVmKSB3aW5kb3cub3BlbihlbG0uZGF0YXNldC5ocmVmKTtcbiAgICAgICAgICAgIGlmIChlbG0uZGF0YXNldC5jYWxsYmFjaykgdGhpc1tlbG0uZGF0YXNldC5jYWxsYmFja10oc2V0dGluZywgbnVsbCwgZWxtKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGVsbS5kYXRhc2V0LnR5cGUgPT09IFwidG9nZ2xlXCIpIHtcbiAgICAgICAgc2V0dGluZ19lbG0uYWRkVG9nZ2xlKHRvZ2dsZSA9PiB7XG4gICAgICAgICAgdG9nZ2xlLnNldFZhbHVlKHRoaXMuZ2V0X3NldHRpbmcoc2V0dGluZykpO1xuICAgICAgICAgIHRvZ2dsZS5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHRoaXMuaGFuZGxlX29uX2NoYW5nZShzZXR0aW5nLCB2YWx1ZSwgZWxtKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChlbG0uZGF0YXNldC50eXBlID09PSBcInRleHRhcmVhXCIpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJyZW5kZXJpbmcgdGV4dGFyZWFcIik7XG4gICAgICAgIHNldHRpbmdfZWxtLmFkZFRleHRBcmVhKHRleHRhcmVhID0+IHtcbiAgICAgICAgICB0ZXh0YXJlYS5zZXRWYWx1ZSh0aGlzLmdldF9zZXR0aW5nKHNldHRpbmcpKTtcbiAgICAgICAgICB0ZXh0YXJlYS5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHRoaXMuaGFuZGxlX29uX2NoYW5nZShzZXR0aW5nLCB2YWx1ZSwgZWxtKSk7XG4gICAgICAgICAgaWYgKGVsbS5kYXRhc2V0Lm1heExlbmd0aCkgdGV4dGFyZWEuaW5wdXRFbC5tYXhMZW5ndGggPSBlbG0uZGF0YXNldC5tYXhMZW5ndGg7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcInJlbmRlcmVkIHRleHRhcmVhXCIpO1xuICAgICAgfVxuICAgICAgaWYgKGVsbS5kYXRhc2V0LmRpc2FibGVkKSBzZXR0aW5nX2VsbS5zZXREaXNhYmxlZCh0cnVlKTtcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZyhcInJlbmRlcmVkIGNvbXBvbmVudHNcIik7XG4gIH1cbiAgYXN5bmMgaGFuZGxlX29uX2NoYW5nZShzZXR0aW5nLCB2YWx1ZSwgZWxtKSB7XG4gICAgYXdhaXQgdGhpcy51cGRhdGUoc2V0dGluZywgdmFsdWUpO1xuICAgIGlmIChlbG0uZGF0YXNldC5jYWxsYmFjaykgdGhpc1tlbG0uZGF0YXNldC5jYWxsYmFja10oc2V0dGluZywgdmFsdWUsIGVsbSk7XG4gIH1cbiAgZ2V0X3NldHRpbmcoc2V0dGluZykge1xuICAgIGlmIChzZXR0aW5nLmluY2x1ZGVzKFwiLlwiKSkge1xuICAgICAgbGV0IHBhcnRzID0gc2V0dGluZy5zcGxpdChcIi5cIik7XG4gICAgICAvLyBsZXQgb2JqID0gdGhpcy5wbHVnaW4uc2V0dGluZ3M7XG4gICAgICBsZXQgb2JqID0gdGhpcy5zZXR0aW5ncztcbiAgICAgIGZvciAobGV0IHBhcnQgb2YgcGFydHMuc2xpY2UoMCwgLTEpKSB7XG4gICAgICAgIGlmIChvYmpbcGFydF0gPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRoaXMucGx1Z2luLmNvbnN0cnVjdG9yLmRlZmF1bHRzW3NldHRpbmddOyAvLyBGYWxsYmFjayB0byBkZWZhdWx0IGlmIHBhdGggaXMgYnJva2VuXG4gICAgICAgIG9iaiA9IG9ialtwYXJ0XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpbcGFydHNbcGFydHMubGVuZ3RoIC0gMV1dID8/IHRoaXMucGx1Z2luLmNvbnN0cnVjdG9yLmRlZmF1bHRzW3NldHRpbmddO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gdGhpcy5wbHVnaW4uc2V0dGluZ3Nbc2V0dGluZ10gPz8gdGhpcy5wbHVnaW4uY29uc3RydWN0b3IuZGVmYXVsdHNbc2V0dGluZ107XG4gICAgICByZXR1cm4gdGhpcy5zZXR0aW5nc1tzZXR0aW5nXSA/PyB0aGlzLnBsdWdpbi5jb25zdHJ1Y3Rvci5kZWZhdWx0c1tzZXR0aW5nXTtcbiAgICB9XG4gIH1cbiAgLy8gb3ZlcnJpZGUgaW4gc3ViY2xhc3MgKHJlcXVpcmVkKVxuICBnZXQgdGVtcGxhdGUoKSB7IHJldHVybiBcIlwiOyB9IC8vIGVqcyB0ZW1wbGF0ZSBzdHJpbmdcbiAgZ2V0IHZpZXdfZGF0YSgpIHsgcmV0dXJuIHt9OyB9IC8vIG9iamVjdCBwcm9wZXJ0aWVzIGF2YWlsYWJsZSBpbiB0ZW1wbGF0ZVxufVxuZXhwb3J0IHsgU21hcnRTZXR0aW5ncyB9OyJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBLDRDQUFBQSxVQUFBQyxTQUFBO0FBQUEsS0FBQyxTQUFTLEdBQUU7QUFBQyxVQUFHLE9BQU9ELGFBQVUsWUFBVSxPQUFPQyxZQUFTLGFBQVk7QUFBQyxRQUFBQSxRQUFPLFVBQVEsRUFBRTtBQUFBLE1BQUMsV0FBUyxPQUFPLFdBQVMsY0FBWSxPQUFPLEtBQUk7QUFBQyxlQUFPLENBQUMsR0FBRSxDQUFDO0FBQUEsTUFBQyxPQUFLO0FBQUMsWUFBSTtBQUFFLFlBQUcsT0FBTyxXQUFTLGFBQVk7QUFBQyxjQUFFO0FBQUEsUUFBTSxXQUFTLE9BQU8sV0FBUyxhQUFZO0FBQUMsY0FBRTtBQUFBLFFBQU0sV0FBUyxPQUFPLFNBQU8sYUFBWTtBQUFDLGNBQUU7QUFBQSxRQUFJLE9BQUs7QUFBQyxjQUFFO0FBQUEsUUFBSTtBQUFDLFVBQUUsTUFBSSxFQUFFO0FBQUEsTUFBQztBQUFBLElBQUMsR0FBRyxXQUFVO0FBQUMsVUFBSUMsU0FBT0QsU0FBT0Q7QUFBUSxjQUFPLDJCQUFVO0FBQUMsaUJBQVMsRUFBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLG1CQUFTLEVBQUVHLElBQUUsR0FBRTtBQUFDLGdCQUFHLENBQUMsRUFBRUEsRUFBQyxHQUFFO0FBQUMsa0JBQUcsQ0FBQyxFQUFFQSxFQUFD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WUFBWSxLQUFLLEdBQUcsRUFBRSxLQUFLO0FBQ3pDLG9CQUFZLElBQUksS0FBSyxDQUFDLElBQUk7QUFBQSxNQUM5QjtBQUFBLElBQ0o7QUFDQSxXQUFPO0FBQUEsRUFDWDtBQUNBLFNBQU87QUFDWDsiLAogICJuYW1lcyI6IFsiZXhwb3J0cyIsICJtb2R1bGUiLCAiZGVmaW5lIiwgImkiLCAiciIsICJuIiwgInJlcXVpcmUiLCAicGF0aCIsICJzZWxmIiwgImUiLCAiZXhwb3J0cyIsICJvdXQiLCAiZXhwb3J0cyIsICJleHBvcnRzIiwgImV4cG9ydHMiLCAiZXhwb3J0cyIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJleHBvcnRzIiwgImV4cG9ydHMiLCAicmVxdWlyZV9vcGVuX3JvdXRlciIsICJleHBvcnRzIiwgImV4cG9ydHMiLCAibSIsICJleHBvcnRzIiwgInJlcXVpcmVfY29oZXJlIiwgImV4cG9ydHMiLCAicmVxdWlyZV9hbnRocm9waWMiLCAiZXhwb3J0cyIsICJleHBvcnRzIiwgImV4cG9ydHMiLCAiU21hcnRDaGF0TW9kZWwiLCAicmVxdWVzdCIsICJyZXF1aXJlX2Vqc19taW4iLCAiZXhwb3J0cyIsICJtb2R1bGUiLCAiZGVmaW5lIiwgImkiLCAiciIsICJuIiwgInJlcXVpcmUiLCAicGF0aCIsICJzZWxmIiwgImUiLCAiZWpzIiwgImltcG9ydF9zbWFydF9jaGF0X21vZGVsIiwgImltcG9ydF9lanNfbWluIiwgImVqcyIsICJPYnNpZGlhbiJdCn0K
